
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006224  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ff4  080063ac  080063ac  000073ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a0  080093a0  0000b02c  2**0
                  CONTENTS
  4 .ARM          00000008  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a8  080093a8  0000b02c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a8  080093a8  0000a3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093ac  080093ac  0000a3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080093b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b02c  2**0
                  CONTENTS
 10 .bss          000001d0  2000002c  2000002c  0000b02c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001fc  200001fc  0000b02c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b02c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128ed  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003437  00000000  00000000  0001d949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  00020d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e28  00000000  00000000  00021fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023567  00000000  00000000  00022df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019998  00000000  00000000  0004635f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf985  00000000  00000000  0005fcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f67c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b40  00000000  00000000  0012f6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  00134200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006394 	.word	0x08006394

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08006394 	.word	0x08006394

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2108      	movs	r1, #8
 80004d0:	4802      	ldr	r0, [pc, #8]	@ (80004dc <button_init+0x14>)
 80004d2:	f002 fe59 	bl	8003188 <HAL_GPIO_WritePin>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40020c00 	.word	0x40020c00

080004e0 <button_Scan>:

void button_Scan(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	482f      	ldr	r0, [pc, #188]	@ (80005a8 <button_Scan+0xc8>)
 80004ec:	f002 fe4c 	bl	8003188 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2108      	movs	r1, #8
 80004f4:	482c      	ldr	r0, [pc, #176]	@ (80005a8 <button_Scan+0xc8>)
 80004f6:	f002 fe47 	bl	8003188 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004fa:	230a      	movs	r3, #10
 80004fc:	2202      	movs	r2, #2
 80004fe:	492b      	ldr	r1, [pc, #172]	@ (80005ac <button_Scan+0xcc>)
 8000500:	482b      	ldr	r0, [pc, #172]	@ (80005b0 <button_Scan+0xd0>)
 8000502:	f004 fd92 	bl	800502a <HAL_SPI_Receive>
	  int button_index = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800050a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800050e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e03f      	b.n	8000596 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	db06      	blt.n	800052a <button_Scan+0x4a>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b03      	cmp	r3, #3
 8000520:	dc03      	bgt.n	800052a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3304      	adds	r3, #4
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e018      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b03      	cmp	r3, #3
 800052e:	dd07      	ble.n	8000540 <button_Scan+0x60>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	dc04      	bgt.n	8000540 <button_Scan+0x60>
			  button_index = 7 - i;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f1c3 0307 	rsb	r3, r3, #7
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00d      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b07      	cmp	r3, #7
 8000544:	dd06      	ble.n	8000554 <button_Scan+0x74>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0b      	cmp	r3, #11
 800054a:	dc03      	bgt.n	8000554 <button_Scan+0x74>
			  button_index = i + 4;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3304      	adds	r3, #4
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e003      	b.n	800055c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f1c3 0317 	rsb	r3, r3, #23
 800055a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <button_Scan+0xcc>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	897b      	ldrh	r3, [r7, #10]
 8000562:	4013      	ands	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <button_Scan+0x96>
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <button_Scan+0xd4>)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2100      	movs	r1, #0
 8000570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000574:	e009      	b.n	800058a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000576:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <button_Scan+0xd4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057e:	3301      	adds	r3, #1
 8000580:	b299      	uxth	r1, r3
 8000582:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <button_Scan+0xd4>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800058a:	897b      	ldrh	r3, [r7, #10]
 800058c:	085b      	lsrs	r3, r3, #1
 800058e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	ddbc      	ble.n	8000516 <button_Scan+0x36>
	  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020c00 	.word	0x40020c00
 80005ac:	20000068 	.word	0x20000068
 80005b0:	20000158 	.word	0x20000158
 80005b4:	20000048 	.word	0x20000048

080005b8 <CalibrateInit>:

 uint8_t al_hours;
 uint8_t al_min;
 uint8_t al_sec;
char* update_value[6] = {"seconds", "minutes", "hours", "days", "months", "years"};
void CalibrateInit(){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	cal_hour=ds3231_hours;
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <CalibrateInit+0x48>)
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <CalibrateInit+0x4c>)
 80005c2:	701a      	strb	r2, [r3, #0]
	cal_min=ds3231_min;
 80005c4:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <CalibrateInit+0x50>)
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	4b10      	ldr	r3, [pc, #64]	@ (800060c <CalibrateInit+0x54>)
 80005ca:	701a      	strb	r2, [r3, #0]
	cal_sec=ds3231_sec;
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <CalibrateInit+0x58>)
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <CalibrateInit+0x5c>)
 80005d2:	701a      	strb	r2, [r3, #0]
	cal_day=ds3231_day;
 80005d4:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <CalibrateInit+0x60>)
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	4b10      	ldr	r3, [pc, #64]	@ (800061c <CalibrateInit+0x64>)
 80005da:	701a      	strb	r2, [r3, #0]
	cal_date=ds3231_date;
 80005dc:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <CalibrateInit+0x68>)
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <CalibrateInit+0x6c>)
 80005e2:	701a      	strb	r2, [r3, #0]
	cal_month=ds3231_month;
 80005e4:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <CalibrateInit+0x70>)
 80005e6:	781a      	ldrb	r2, [r3, #0]
 80005e8:	4b10      	ldr	r3, [pc, #64]	@ (800062c <CalibrateInit+0x74>)
 80005ea:	701a      	strb	r2, [r3, #0]
	cal_year=ds3231_year;
 80005ec:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <CalibrateInit+0x78>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <CalibrateInit+0x7c>)
 80005f2:	701a      	strb	r2, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000087 	.word	0x20000087
 8000604:	20000074 	.word	0x20000074
 8000608:	20000088 	.word	0x20000088
 800060c:	20000075 	.word	0x20000075
 8000610:	20000089 	.word	0x20000089
 8000614:	20000076 	.word	0x20000076
 8000618:	2000008b 	.word	0x2000008b
 800061c:	20000078 	.word	0x20000078
 8000620:	2000008a 	.word	0x2000008a
 8000624:	20000077 	.word	0x20000077
 8000628:	2000008c 	.word	0x2000008c
 800062c:	20000079 	.word	0x20000079
 8000630:	2000008d 	.word	0x2000008d
 8000634:	2000007a 	.word	0x2000007a

08000638 <ChangeValue>:

void ChangeValue(int val){
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	switch(val){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b05      	cmp	r3, #5
 8000644:	f200 809e 	bhi.w	8000784 <ChangeValue+0x14c>
 8000648:	a201      	add	r2, pc, #4	@ (adr r2, 8000650 <ChangeValue+0x18>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	08000669 	.word	0x08000669
 8000654:	08000687 	.word	0x08000687
 8000658:	080006a3 	.word	0x080006a3
 800065c:	080006bf 	.word	0x080006bf
 8000660:	0800075b 	.word	0x0800075b
 8000664:	08000777 	.word	0x08000777
	case 0:
		cal_sec++;
 8000668:	4b4f      	ldr	r3, [pc, #316]	@ (80007a8 <ChangeValue+0x170>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b4d      	ldr	r3, [pc, #308]	@ (80007a8 <ChangeValue+0x170>)
 8000672:	701a      	strb	r2, [r3, #0]
		if(cal_sec > 59) cal_sec=0;
 8000674:	4b4c      	ldr	r3, [pc, #304]	@ (80007a8 <ChangeValue+0x170>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b3b      	cmp	r3, #59	@ 0x3b
 800067a:	f240 8085 	bls.w	8000788 <ChangeValue+0x150>
 800067e:	4b4a      	ldr	r3, [pc, #296]	@ (80007a8 <ChangeValue+0x170>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
		break;
 8000684:	e080      	b.n	8000788 <ChangeValue+0x150>
	case 1:
		cal_min++;
 8000686:	4b49      	ldr	r3, [pc, #292]	@ (80007ac <ChangeValue+0x174>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b47      	ldr	r3, [pc, #284]	@ (80007ac <ChangeValue+0x174>)
 8000690:	701a      	strb	r2, [r3, #0]
		if(cal_min > 59) cal_min=0;
 8000692:	4b46      	ldr	r3, [pc, #280]	@ (80007ac <ChangeValue+0x174>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b3b      	cmp	r3, #59	@ 0x3b
 8000698:	d978      	bls.n	800078c <ChangeValue+0x154>
 800069a:	4b44      	ldr	r3, [pc, #272]	@ (80007ac <ChangeValue+0x174>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
		break;
 80006a0:	e074      	b.n	800078c <ChangeValue+0x154>
	case 2:
		cal_hour++;
 80006a2:	4b43      	ldr	r3, [pc, #268]	@ (80007b0 <ChangeValue+0x178>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b41      	ldr	r3, [pc, #260]	@ (80007b0 <ChangeValue+0x178>)
 80006ac:	701a      	strb	r2, [r3, #0]
		if(cal_hour > 23) cal_hour =0;
 80006ae:	4b40      	ldr	r3, [pc, #256]	@ (80007b0 <ChangeValue+0x178>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b17      	cmp	r3, #23
 80006b4:	d96c      	bls.n	8000790 <ChangeValue+0x158>
 80006b6:	4b3e      	ldr	r3, [pc, #248]	@ (80007b0 <ChangeValue+0x178>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
		break;
 80006bc:	e068      	b.n	8000790 <ChangeValue+0x158>
	case 3:
		cal_day++;
 80006be:	4b3d      	ldr	r3, [pc, #244]	@ (80007b4 <ChangeValue+0x17c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b3b      	ldr	r3, [pc, #236]	@ (80007b4 <ChangeValue+0x17c>)
 80006c8:	701a      	strb	r2, [r3, #0]
		cal_date++;
 80006ca:	4b3b      	ldr	r3, [pc, #236]	@ (80007b8 <ChangeValue+0x180>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b39      	ldr	r3, [pc, #228]	@ (80007b8 <ChangeValue+0x180>)
 80006d4:	701a      	strb	r2, [r3, #0]
		if(cal_day >28){
 80006d6:	4b37      	ldr	r3, [pc, #220]	@ (80007b4 <ChangeValue+0x17c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b1c      	cmp	r3, #28
 80006dc:	d916      	bls.n	800070c <ChangeValue+0xd4>
			if(cal_month ==2){
 80006de:	4b37      	ldr	r3, [pc, #220]	@ (80007bc <ChangeValue+0x184>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d131      	bne.n	800074a <ChangeValue+0x112>
				if(cal_year%4 !=0){
 80006e6:	4b36      	ldr	r3, [pc, #216]	@ (80007c0 <ChangeValue+0x188>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	f003 0303 	and.w	r3, r3, #3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <ChangeValue+0xc4>
					cal_day=1;
 80006f4:	4b2f      	ldr	r3, [pc, #188]	@ (80007b4 <ChangeValue+0x17c>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e026      	b.n	800074a <ChangeValue+0x112>
				}
				else{
					if(cal_day >29) cal_day=0;
 80006fc:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <ChangeValue+0x17c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b1d      	cmp	r3, #29
 8000702:	d922      	bls.n	800074a <ChangeValue+0x112>
 8000704:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <ChangeValue+0x17c>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e01e      	b.n	800074a <ChangeValue+0x112>
				}
			}
		}
		else if(cal_month==4 || cal_month==6 || cal_month==9 || cal_month==11){
 800070c:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <ChangeValue+0x184>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b04      	cmp	r3, #4
 8000712:	d00b      	beq.n	800072c <ChangeValue+0xf4>
 8000714:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <ChangeValue+0x184>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b06      	cmp	r3, #6
 800071a:	d007      	beq.n	800072c <ChangeValue+0xf4>
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <ChangeValue+0x184>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b09      	cmp	r3, #9
 8000722:	d003      	beq.n	800072c <ChangeValue+0xf4>
 8000724:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <ChangeValue+0x184>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b0b      	cmp	r3, #11
 800072a:	d107      	bne.n	800073c <ChangeValue+0x104>
			if(cal_day > 30) cal_day=0;
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <ChangeValue+0x17c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b1e      	cmp	r3, #30
 8000732:	d90a      	bls.n	800074a <ChangeValue+0x112>
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <ChangeValue+0x17c>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
 800073a:	e006      	b.n	800074a <ChangeValue+0x112>
		}
		else{
			if(cal_day>31) cal_day=0;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <ChangeValue+0x17c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b1f      	cmp	r3, #31
 8000742:	d902      	bls.n	800074a <ChangeValue+0x112>
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <ChangeValue+0x17c>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
		}
		if(cal_date>8) cal_date=2;
 800074a:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <ChangeValue+0x180>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b08      	cmp	r3, #8
 8000750:	d920      	bls.n	8000794 <ChangeValue+0x15c>
 8000752:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <ChangeValue+0x180>)
 8000754:	2202      	movs	r2, #2
 8000756:	701a      	strb	r2, [r3, #0]

		break;
 8000758:	e01c      	b.n	8000794 <ChangeValue+0x15c>
	case 4:
		cal_month++;
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <ChangeValue+0x184>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <ChangeValue+0x184>)
 8000764:	701a      	strb	r2, [r3, #0]
		if(cal_month>12) cal_month=1;
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <ChangeValue+0x184>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b0c      	cmp	r3, #12
 800076c:	d914      	bls.n	8000798 <ChangeValue+0x160>
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <ChangeValue+0x184>)
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
		break;
 8000774:	e010      	b.n	8000798 <ChangeValue+0x160>
	case 5:
		cal_year++;
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <ChangeValue+0x188>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <ChangeValue+0x188>)
 8000780:	701a      	strb	r2, [r3, #0]
		break;
 8000782:	e00a      	b.n	800079a <ChangeValue+0x162>
	default:
		break;
 8000784:	bf00      	nop
 8000786:	e008      	b.n	800079a <ChangeValue+0x162>
		break;
 8000788:	bf00      	nop
 800078a:	e006      	b.n	800079a <ChangeValue+0x162>
		break;
 800078c:	bf00      	nop
 800078e:	e004      	b.n	800079a <ChangeValue+0x162>
		break;
 8000790:	bf00      	nop
 8000792:	e002      	b.n	800079a <ChangeValue+0x162>
		break;
 8000794:	bf00      	nop
 8000796:	e000      	b.n	800079a <ChangeValue+0x162>
		break;
 8000798:	bf00      	nop
	}
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000076 	.word	0x20000076
 80007ac:	20000075 	.word	0x20000075
 80007b0:	20000074 	.word	0x20000074
 80007b4:	20000078 	.word	0x20000078
 80007b8:	20000077 	.word	0x20000077
 80007bc:	20000079 	.word	0x20000079
 80007c0:	2000007a 	.word	0x2000007a

080007c4 <ApplyChange>:

void ApplyChange(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
		ds3231_Write(ADDRESS_SEC, cal_sec);
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <ApplyChange+0x5c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 f9f4 	bl	8000bbc <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, cal_min);
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <ApplyChange+0x60>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	f000 f9ee 	bl	8000bbc <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, cal_hour);
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <ApplyChange+0x64>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	2002      	movs	r0, #2
 80007e8:	f000 f9e8 	bl	8000bbc <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, cal_day);
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <ApplyChange+0x68>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	2003      	movs	r0, #3
 80007f4:	f000 f9e2 	bl	8000bbc <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, cal_date);
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <ApplyChange+0x6c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	2004      	movs	r0, #4
 8000800:	f000 f9dc 	bl	8000bbc <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, cal_month);
 8000804:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <ApplyChange+0x70>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	2005      	movs	r0, #5
 800080c:	f000 f9d6 	bl	8000bbc <ds3231_Write>
		ds3231_Write(ADDRESS_YEAR, cal_year);
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <ApplyChange+0x74>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	2006      	movs	r0, #6
 8000818:	f000 f9d0 	bl	8000bbc <ds3231_Write>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000076 	.word	0x20000076
 8000824:	20000075 	.word	0x20000075
 8000828:	20000074 	.word	0x20000074
 800082c:	20000078 	.word	0x20000078
 8000830:	20000077 	.word	0x20000077
 8000834:	20000079 	.word	0x20000079
 8000838:	2000007a 	.word	0x2000007a

0800083c <ChangeAlarm>:

void ChangeAlarm(){
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	switch (counter) {
 8000840:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <ChangeAlarm+0x88>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d022      	beq.n	800088e <ChangeAlarm+0x52>
 8000848:	2b02      	cmp	r3, #2
 800084a:	dc2e      	bgt.n	80008aa <ChangeAlarm+0x6e>
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <ChangeAlarm+0x1a>
 8000850:	2b01      	cmp	r3, #1
 8000852:	d00e      	beq.n	8000872 <ChangeAlarm+0x36>
	case 2:
		al_hours++;
		if(al_hours >23) al_hours=0;
		break;
	default:
		break;
 8000854:	e029      	b.n	80008aa <ChangeAlarm+0x6e>
		al_sec++;
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <ChangeAlarm+0x8c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <ChangeAlarm+0x8c>)
 8000860:	701a      	strb	r2, [r3, #0]
		if(al_sec > 59) al_sec=0;
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <ChangeAlarm+0x8c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b3b      	cmp	r3, #59	@ 0x3b
 8000868:	d921      	bls.n	80008ae <ChangeAlarm+0x72>
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <ChangeAlarm+0x8c>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
		break;
 8000870:	e01d      	b.n	80008ae <ChangeAlarm+0x72>
		al_min++;
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <ChangeAlarm+0x90>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <ChangeAlarm+0x90>)
 800087c:	701a      	strb	r2, [r3, #0]
		if(al_min >59) al_min=0;
 800087e:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <ChangeAlarm+0x90>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b3b      	cmp	r3, #59	@ 0x3b
 8000884:	d915      	bls.n	80008b2 <ChangeAlarm+0x76>
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <ChangeAlarm+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
		break;
 800088c:	e011      	b.n	80008b2 <ChangeAlarm+0x76>
		al_hours++;
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <ChangeAlarm+0x94>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <ChangeAlarm+0x94>)
 8000898:	701a      	strb	r2, [r3, #0]
		if(al_hours >23) al_hours=0;
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <ChangeAlarm+0x94>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b17      	cmp	r3, #23
 80008a0:	d909      	bls.n	80008b6 <ChangeAlarm+0x7a>
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <ChangeAlarm+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
		break;
 80008a8:	e005      	b.n	80008b6 <ChangeAlarm+0x7a>
		break;
 80008aa:	bf00      	nop
 80008ac:	e004      	b.n	80008b8 <ChangeAlarm+0x7c>
		break;
 80008ae:	bf00      	nop
 80008b0:	e002      	b.n	80008b8 <ChangeAlarm+0x7c>
		break;
 80008b2:	bf00      	nop
 80008b4:	e000      	b.n	80008b8 <ChangeAlarm+0x7c>
		break;
 80008b6:	bf00      	nop
	}
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	2000006c 	.word	0x2000006c
 80008c8:	2000007d 	.word	0x2000007d
 80008cc:	2000007c 	.word	0x2000007c
 80008d0:	2000007b 	.word	0x2000007b

080008d4 <fsm>:

void fsm(uint16_t status){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	@ 0x50
 80008d8:	af04      	add	r7, sp, #16
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
	switch(status){
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	f000 80bc 	beq.w	8000a5e <fsm+0x18a>
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	f300 80fc 	bgt.w	8000ae4 <fsm+0x210>
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d002      	beq.n	80008f6 <fsm+0x22>
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d045      	beq.n	8000980 <fsm+0xac>
			if(counter>2) counter =0;
		}
		lcd_StrCenter(10, 20, "SET ALARM", BLUE, YELLOW, 16, 0);
		break;
	default:
		break;
 80008f4:	e0f6      	b.n	8000ae4 <fsm+0x210>
		ds3231_ReadTime();
 80008f6:	f000 f983 	bl	8000c00 <ds3231_ReadTime>
		displayTime();
 80008fa:	f001 fa5d 	bl	8001db8 <displayTime>
		lcd_StrCenter(10, 20, "NORMAL", BLUE, YELLOW, 16, 0);
 80008fe:	2300      	movs	r3, #0
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	2310      	movs	r3, #16
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	231f      	movs	r3, #31
 800090e:	4a79      	ldr	r2, [pc, #484]	@ (8000af4 <fsm+0x220>)
 8000910:	2114      	movs	r1, #20
 8000912:	200a      	movs	r0, #10
 8000914:	f001 f86e 	bl	80019f4 <lcd_StrCenter>
		if (ds3231_hours == al_hours && ds3231_min == al_min
 8000918:	4b77      	ldr	r3, [pc, #476]	@ (8000af8 <fsm+0x224>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	4b77      	ldr	r3, [pc, #476]	@ (8000afc <fsm+0x228>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d10e      	bne.n	8000942 <fsm+0x6e>
 8000924:	4b76      	ldr	r3, [pc, #472]	@ (8000b00 <fsm+0x22c>)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b76      	ldr	r3, [pc, #472]	@ (8000b04 <fsm+0x230>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d108      	bne.n	8000942 <fsm+0x6e>
				&& ds3231_sec == al_sec) {
 8000930:	4b75      	ldr	r3, [pc, #468]	@ (8000b08 <fsm+0x234>)
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	4b75      	ldr	r3, [pc, #468]	@ (8000b0c <fsm+0x238>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	429a      	cmp	r2, r3
 800093a:	d102      	bne.n	8000942 <fsm+0x6e>
			flag=1;
 800093c:	4b74      	ldr	r3, [pc, #464]	@ (8000b10 <fsm+0x23c>)
 800093e:	2201      	movs	r2, #1
 8000940:	601a      	str	r2, [r3, #0]
		if(flag){
 8000942:	4b73      	ldr	r3, [pc, #460]	@ (8000b10 <fsm+0x23c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00d      	beq.n	8000966 <fsm+0x92>
			lcd_StrCenter(10, 60, "ALARM", RED, YELLOW, 16, 0);
 800094a:	2300      	movs	r3, #0
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	2310      	movs	r3, #16
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800095c:	4a6d      	ldr	r2, [pc, #436]	@ (8000b14 <fsm+0x240>)
 800095e:	213c      	movs	r1, #60	@ 0x3c
 8000960:	200a      	movs	r0, #10
 8000962:	f001 f847 	bl	80019f4 <lcd_StrCenter>
		if(button_count[0] || button_count[14]){
 8000966:	4b6c      	ldr	r3, [pc, #432]	@ (8000b18 <fsm+0x244>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d104      	bne.n	8000978 <fsm+0xa4>
 800096e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b18 <fsm+0x244>)
 8000970:	8b9b      	ldrh	r3, [r3, #28]
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 80b8 	beq.w	8000ae8 <fsm+0x214>
			flag=0;
 8000978:	4b65      	ldr	r3, [pc, #404]	@ (8000b10 <fsm+0x23c>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
		break;
 800097e:	e0b3      	b.n	8000ae8 <fsm+0x214>
		char title[50] ="Updating ";
 8000980:	4a66      	ldr	r2, [pc, #408]	@ (8000b1c <fsm+0x248>)
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	6810      	ldr	r0, [r2, #0]
 8000988:	6851      	ldr	r1, [r2, #4]
 800098a:	c303      	stmia	r3!, {r0, r1}
 800098c:	8912      	ldrh	r2, [r2, #8]
 800098e:	801a      	strh	r2, [r3, #0]
 8000990:	f107 0316 	add.w	r3, r7, #22
 8000994:	2228      	movs	r2, #40	@ 0x28
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f005 fcbf 	bl	800631c <memset>
		strcat(title, update_value[counter]);
 800099e:	4b60      	ldr	r3, [pc, #384]	@ (8000b20 <fsm+0x24c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a60      	ldr	r2, [pc, #384]	@ (8000b24 <fsm+0x250>)
 80009a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f005 fcbc 	bl	800632c <strcat>
		strcat(title,"...");
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fc05 	bl	80001c8 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4413      	add	r3, r2
 80009c8:	4a57      	ldr	r2, [pc, #348]	@ (8000b28 <fsm+0x254>)
 80009ca:	6810      	ldr	r0, [r2, #0]
 80009cc:	6018      	str	r0, [r3, #0]
		if (button_count[3] == 1) {
 80009ce:	4b52      	ldr	r3, [pc, #328]	@ (8000b18 <fsm+0x244>)
 80009d0:	88db      	ldrh	r3, [r3, #6]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d104      	bne.n	80009e0 <fsm+0x10c>
			ChangeValue(counter);
 80009d6:	4b52      	ldr	r3, [pc, #328]	@ (8000b20 <fsm+0x24c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe2c 	bl	8000638 <ChangeValue>
		if (button_count[3] == 40) {
 80009e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000b18 <fsm+0x244>)
 80009e2:	88db      	ldrh	r3, [r3, #6]
 80009e4:	2b28      	cmp	r3, #40	@ 0x28
 80009e6:	d107      	bne.n	80009f8 <fsm+0x124>
			setTimer3(200);
 80009e8:	20c8      	movs	r0, #200	@ 0xc8
 80009ea:	f001 fe25 	bl	8002638 <setTimer3>
			ChangeValue(counter);
 80009ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000b20 <fsm+0x24c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe20 	bl	8000638 <ChangeValue>
		if (flag_timer3 && button_count[3] > 40) {
 80009f8:	4b4c      	ldr	r3, [pc, #304]	@ (8000b2c <fsm+0x258>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00b      	beq.n	8000a18 <fsm+0x144>
 8000a00:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <fsm+0x244>)
 8000a02:	88db      	ldrh	r3, [r3, #6]
 8000a04:	2b28      	cmp	r3, #40	@ 0x28
 8000a06:	d907      	bls.n	8000a18 <fsm+0x144>
			setTimer3(200);
 8000a08:	20c8      	movs	r0, #200	@ 0xc8
 8000a0a:	f001 fe15 	bl	8002638 <setTimer3>
			ChangeValue(counter);
 8000a0e:	4b44      	ldr	r3, [pc, #272]	@ (8000b20 <fsm+0x24c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fe10 	bl	8000638 <ChangeValue>
		if(button_count[12] == 1){
 8000a18:	4b3f      	ldr	r3, [pc, #252]	@ (8000b18 <fsm+0x244>)
 8000a1a:	8b1b      	ldrh	r3, [r3, #24]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d10f      	bne.n	8000a40 <fsm+0x16c>
			ApplyChange();
 8000a20:	f7ff fed0 	bl	80007c4 <ApplyChange>
			counter++;
 8000a24:	4b3e      	ldr	r3, [pc, #248]	@ (8000b20 <fsm+0x24c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b20 <fsm+0x24c>)
 8000a2c:	6013      	str	r3, [r2, #0]
			ds3231_ReadTime();
 8000a2e:	f000 f8e7 	bl	8000c00 <ds3231_ReadTime>
			if(counter>5) counter =0;
 8000a32:	4b3b      	ldr	r3, [pc, #236]	@ (8000b20 <fsm+0x24c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b05      	cmp	r3, #5
 8000a38:	dd02      	ble.n	8000a40 <fsm+0x16c>
 8000a3a:	4b39      	ldr	r3, [pc, #228]	@ (8000b20 <fsm+0x24c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
		lcd_StrCenter(10, 20, title, BLUE, YELLOW, 16, 0);
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	2300      	movs	r3, #0
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	2310      	movs	r3, #16
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	231f      	movs	r3, #31
 8000a54:	2114      	movs	r1, #20
 8000a56:	200a      	movs	r0, #10
 8000a58:	f000 ffcc 	bl	80019f4 <lcd_StrCenter>
		break;
 8000a5c:	e045      	b.n	8000aea <fsm+0x216>
		if (button_count[3] == 1) {
 8000a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b18 <fsm+0x244>)
 8000a60:	88db      	ldrh	r3, [r3, #6]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d104      	bne.n	8000a70 <fsm+0x19c>
			ChangeAlarm(counter);
 8000a66:	4b2e      	ldr	r3, [pc, #184]	@ (8000b20 <fsm+0x24c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fee6 	bl	800083c <ChangeAlarm>
		if (button_count[3] == 40) {
 8000a70:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <fsm+0x244>)
 8000a72:	88db      	ldrh	r3, [r3, #6]
 8000a74:	2b28      	cmp	r3, #40	@ 0x28
 8000a76:	d107      	bne.n	8000a88 <fsm+0x1b4>
			setTimer3(200);
 8000a78:	20c8      	movs	r0, #200	@ 0xc8
 8000a7a:	f001 fddd 	bl	8002638 <setTimer3>
			ChangeAlarm(counter);
 8000a7e:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <fsm+0x24c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff feda 	bl	800083c <ChangeAlarm>
		if (flag_timer3 && button_count[3] > 40) {
 8000a88:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <fsm+0x258>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00b      	beq.n	8000aa8 <fsm+0x1d4>
 8000a90:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <fsm+0x244>)
 8000a92:	88db      	ldrh	r3, [r3, #6]
 8000a94:	2b28      	cmp	r3, #40	@ 0x28
 8000a96:	d907      	bls.n	8000aa8 <fsm+0x1d4>
			setTimer3(200);
 8000a98:	20c8      	movs	r0, #200	@ 0xc8
 8000a9a:	f001 fdcd 	bl	8002638 <setTimer3>
			ChangeAlarm(counter);
 8000a9e:	4b20      	ldr	r3, [pc, #128]	@ (8000b20 <fsm+0x24c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff feca 	bl	800083c <ChangeAlarm>
		if(button_count[12] == 1){
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <fsm+0x244>)
 8000aaa:	8b1b      	ldrh	r3, [r3, #24]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d10b      	bne.n	8000ac8 <fsm+0x1f4>
			counter++;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <fsm+0x24c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b20 <fsm+0x24c>)
 8000ab8:	6013      	str	r3, [r2, #0]
			if(counter>2) counter =0;
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <fsm+0x24c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	dd02      	ble.n	8000ac8 <fsm+0x1f4>
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <fsm+0x24c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
		lcd_StrCenter(10, 20, "SET ALARM", BLUE, YELLOW, 16, 0);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	2310      	movs	r3, #16
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	231f      	movs	r3, #31
 8000ad8:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <fsm+0x25c>)
 8000ada:	2114      	movs	r1, #20
 8000adc:	200a      	movs	r0, #10
 8000ade:	f000 ff89 	bl	80019f4 <lcd_StrCenter>
		break;
 8000ae2:	e002      	b.n	8000aea <fsm+0x216>
		break;
 8000ae4:	bf00      	nop
 8000ae6:	e000      	b.n	8000aea <fsm+0x216>
		break;
 8000ae8:	bf00      	nop
	}
}
 8000aea:	bf00      	nop
 8000aec:	3740      	adds	r7, #64	@ 0x40
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	080063dc 	.word	0x080063dc
 8000af8:	20000087 	.word	0x20000087
 8000afc:	2000007b 	.word	0x2000007b
 8000b00:	20000088 	.word	0x20000088
 8000b04:	2000007c 	.word	0x2000007c
 8000b08:	20000089 	.word	0x20000089
 8000b0c:	2000007d 	.word	0x2000007d
 8000b10:	20000070 	.word	0x20000070
 8000b14:	080063e4 	.word	0x080063e4
 8000b18:	20000048 	.word	0x20000048
 8000b1c:	080063fc 	.word	0x080063fc
 8000b20:	2000006c 	.word	0x2000006c
 8000b24:	20000000 	.word	0x20000000
 8000b28:	080063ec 	.word	0x080063ec
 8000b2c:	2000014a 	.word	0x2000014a
 8000b30:	080063f0 	.word	0x080063f0

08000b34 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000b38:	201e      	movs	r0, #30
 8000b3a:	f001 ff93 	bl	8002a64 <DEC2BCD>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <ds3231_init+0x80>)
 8000b44:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000b46:	2016      	movs	r0, #22
 8000b48:	f001 ff8c 	bl	8002a64 <DEC2BCD>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <ds3231_init+0x80>)
 8000b52:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000b54:	2015      	movs	r0, #21
 8000b56:	f001 ff85 	bl	8002a64 <DEC2BCD>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <ds3231_init+0x80>)
 8000b60:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000b62:	2006      	movs	r0, #6
 8000b64:	f001 ff7e 	bl	8002a64 <DEC2BCD>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <ds3231_init+0x80>)
 8000b6e:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000b70:	200f      	movs	r0, #15
 8000b72:	f001 ff77 	bl	8002a64 <DEC2BCD>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <ds3231_init+0x80>)
 8000b7c:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000b7e:	2009      	movs	r0, #9
 8000b80:	f001 ff70 	bl	8002a64 <DEC2BCD>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <ds3231_init+0x80>)
 8000b8a:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000b8c:	2017      	movs	r0, #23
 8000b8e:	f001 ff69 	bl	8002a64 <DEC2BCD>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <ds3231_init+0x80>)
 8000b98:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000b9a:	2332      	movs	r3, #50	@ 0x32
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	21d0      	movs	r1, #208	@ 0xd0
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <ds3231_init+0x84>)
 8000ba2:	f002 ff6f 	bl	8003a84 <HAL_I2C_IsDeviceReady>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <ds3231_init+0x7c>
		while(1);
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <ds3231_init+0x78>
	};
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000080 	.word	0x20000080
 8000bb8:	200000e4 	.word	0x200000e4

08000bbc <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af04      	add	r7, sp, #16
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 ff48 	bl	8002a64 <DEC2BCD>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	230a      	movs	r3, #10
 8000bde:	9302      	str	r3, [sp, #8]
 8000be0:	2301      	movs	r3, #1
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	f107 030f 	add.w	r3, r7, #15
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	2301      	movs	r3, #1
 8000bec:	21d0      	movs	r1, #208	@ 0xd0
 8000bee:	4803      	ldr	r0, [pc, #12]	@ (8000bfc <ds3231_Write+0x40>)
 8000bf0:	f002 fc28 	bl	8003444 <HAL_I2C_Mem_Write>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000e4 	.word	0x200000e4

08000c00 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000c06:	230a      	movs	r3, #10
 8000c08:	9302      	str	r3, [sp, #8]
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <ds3231_ReadTime+0xa4>)
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	2200      	movs	r2, #0
 8000c16:	21d0      	movs	r1, #208	@ 0xd0
 8000c18:	4823      	ldr	r0, [pc, #140]	@ (8000ca8 <ds3231_ReadTime+0xa8>)
 8000c1a:	f002 fd0d 	bl	8003638 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <ds3231_ReadTime+0xa4>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 ff04 	bl	8002a30 <BCD2DEC>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <ds3231_ReadTime+0xac>)
 8000c2e:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000c30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <ds3231_ReadTime+0xa4>)
 8000c32:	785b      	ldrb	r3, [r3, #1]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fefb 	bl	8002a30 <BCD2DEC>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <ds3231_ReadTime+0xb0>)
 8000c40:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <ds3231_ReadTime+0xa4>)
 8000c44:	789b      	ldrb	r3, [r3, #2]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fef2 	bl	8002a30 <BCD2DEC>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <ds3231_ReadTime+0xb4>)
 8000c52:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <ds3231_ReadTime+0xa4>)
 8000c56:	78db      	ldrb	r3, [r3, #3]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 fee9 	bl	8002a30 <BCD2DEC>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <ds3231_ReadTime+0xb8>)
 8000c64:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <ds3231_ReadTime+0xa4>)
 8000c68:	791b      	ldrb	r3, [r3, #4]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fee0 	bl	8002a30 <BCD2DEC>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <ds3231_ReadTime+0xbc>)
 8000c76:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <ds3231_ReadTime+0xa4>)
 8000c7a:	795b      	ldrb	r3, [r3, #5]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fed7 	bl	8002a30 <BCD2DEC>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <ds3231_ReadTime+0xc0>)
 8000c88:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <ds3231_ReadTime+0xa4>)
 8000c8c:	799b      	ldrb	r3, [r3, #6]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fece 	bl	8002a30 <BCD2DEC>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <ds3231_ReadTime+0xc4>)
 8000c9a:	701a      	strb	r2, [r3, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000080 	.word	0x20000080
 8000ca8:	200000e4 	.word	0x200000e4
 8000cac:	20000089 	.word	0x20000089
 8000cb0:	20000088 	.word	0x20000088
 8000cb4:	20000087 	.word	0x20000087
 8000cb8:	2000008b 	.word	0x2000008b
 8000cbc:	2000008a 	.word	0x2000008a
 8000cc0:	2000008c 	.word	0x2000008c
 8000cc4:	2000008d 	.word	0x2000008d

08000cc8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	@ 0x38
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000cf6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000cfa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000cfe:	4a2e      	ldr	r2, [pc, #184]	@ (8000db8 <MX_FSMC_Init+0xf0>)
 8000d00:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000d02:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000d0e:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d16:	2210      	movs	r2, #16
 8000d18:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d20:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d26:	4b23      	ldr	r3, [pc, #140]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000d2c:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000d32:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d38:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d46:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000d54:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000d5e:	230f      	movs	r3, #15
 8000d60:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000d62:	233c      	movs	r3, #60	@ 0x3c
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000d6e:	2311      	movs	r3, #17
 8000d70:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d72:	2300      	movs	r3, #0
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000d76:	2308      	movs	r3, #8
 8000d78:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000d7e:	2309      	movs	r3, #9
 8000d80:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000d86:	2310      	movs	r3, #16
 8000d88:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000d8a:	2311      	movs	r3, #17
 8000d8c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000d92:	463a      	mov	r2, r7
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <MX_FSMC_Init+0xec>)
 8000d9c:	f004 fd28 	bl	80057f0 <HAL_SRAM_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000da6:	f001 fc1b 	bl	80025e0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000daa:	bf00      	nop
 8000dac:	3738      	adds	r7, #56	@ 0x38
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000090 	.word	0x20000090
 8000db8:	a0000104 	.word	0xa0000104

08000dbc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <HAL_FSMC_MspInit+0x88>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d131      	bne.n	8000e3c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <HAL_FSMC_MspInit+0x88>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <HAL_FSMC_MspInit+0x8c>)
 8000de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000de6:	4a18      	ldr	r2, [pc, #96]	@ (8000e48 <HAL_FSMC_MspInit+0x8c>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6393      	str	r3, [r2, #56]	@ 0x38
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_FSMC_MspInit+0x8c>)
 8000df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000dfa:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000dfe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <HAL_FSMC_MspInit+0x90>)
 8000e16:	f002 f81b 	bl	8002e50 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e1a:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000e1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <HAL_FSMC_MspInit+0x94>)
 8000e36:	f002 f80b 	bl	8002e50 <HAL_GPIO_Init>
 8000e3a:	e000      	b.n	8000e3e <HAL_FSMC_MspInit+0x82>
    return;
 8000e3c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200000e0 	.word	0x200000e0
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40020c00 	.word	0x40020c00

08000e54 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000e5c:	f7ff ffae 	bl	8000dbc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	@ 0x30
 8000e6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	4b6f      	ldr	r3, [pc, #444]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a6e      	ldr	r2, [pc, #440]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	4b68      	ldr	r3, [pc, #416]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a67      	ldr	r2, [pc, #412]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b65      	ldr	r3, [pc, #404]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b61      	ldr	r3, [pc, #388]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a60      	ldr	r2, [pc, #384]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a59      	ldr	r2, [pc, #356]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b57      	ldr	r3, [pc, #348]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b53      	ldr	r3, [pc, #332]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a52      	ldr	r2, [pc, #328]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b50      	ldr	r3, [pc, #320]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a4b      	ldr	r2, [pc, #300]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b49      	ldr	r3, [pc, #292]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	4b45      	ldr	r3, [pc, #276]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a44      	ldr	r2, [pc, #272]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b42      	ldr	r3, [pc, #264]	@ (8001040 <MX_GPIO_Init+0x1d8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2170      	movs	r1, #112	@ 0x70
 8000f46:	483f      	ldr	r0, [pc, #252]	@ (8001044 <MX_GPIO_Init+0x1dc>)
 8000f48:	f002 f91e 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f52:	483d      	ldr	r0, [pc, #244]	@ (8001048 <MX_GPIO_Init+0x1e0>)
 8000f54:	f002 f918 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	@ 0x40
 8000f5c:	483b      	ldr	r0, [pc, #236]	@ (800104c <MX_GPIO_Init+0x1e4>)
 8000f5e:	f002 f913 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f68:	4839      	ldr	r0, [pc, #228]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000f6a:	f002 f90d 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2108      	movs	r1, #8
 8000f72:	4838      	ldr	r0, [pc, #224]	@ (8001054 <MX_GPIO_Init+0x1ec>)
 8000f74:	f002 f908 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000f78:	2370      	movs	r3, #112	@ 0x70
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	482d      	ldr	r0, [pc, #180]	@ (8001044 <MX_GPIO_Init+0x1dc>)
 8000f90:	f001 ff5e 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000f94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4826      	ldr	r0, [pc, #152]	@ (8001048 <MX_GPIO_Init+0x1e0>)
 8000fae:	f001 ff4f 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000fb2:	23c0      	movs	r3, #192	@ 0xc0
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4822      	ldr	r0, [pc, #136]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000fc6:	f001 ff43 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000fca:	2330      	movs	r3, #48	@ 0x30
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481a      	ldr	r0, [pc, #104]	@ (8001048 <MX_GPIO_Init+0x1e0>)
 8000fde:	f001 ff37 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000fe2:	2340      	movs	r3, #64	@ 0x40
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4814      	ldr	r0, [pc, #80]	@ (800104c <MX_GPIO_Init+0x1e4>)
 8000ffa:	f001 ff29 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000ffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	480e      	ldr	r0, [pc, #56]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8001018:	f001 ff1a 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800101c:	2308      	movs	r3, #8
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4808      	ldr	r0, [pc, #32]	@ (8001054 <MX_GPIO_Init+0x1ec>)
 8001034:	f001 ff0c 	bl	8002e50 <HAL_GPIO_Init>

}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	@ 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40021000 	.word	0x40021000
 8001048:	40020800 	.word	0x40020800
 800104c:	40021800 	.word	0x40021800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020c00 	.word	0x40020c00

08001058 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_I2C1_Init+0x50>)
 800105e:	4a13      	ldr	r2, [pc, #76]	@ (80010ac <MX_I2C1_Init+0x54>)
 8001060:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_I2C1_Init+0x50>)
 8001064:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <MX_I2C1_Init+0x58>)
 8001066:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <MX_I2C1_Init+0x50>)
 8001076:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <MX_I2C1_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_I2C1_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <MX_I2C1_Init+0x50>)
 8001096:	f002 f891 	bl	80031bc <HAL_I2C_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a0:	f001 fa9e 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000e4 	.word	0x200000e4
 80010ac:	40005400 	.word	0x40005400
 80010b0:	000186a0 	.word	0x000186a0

080010b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	@ (8001138 <HAL_I2C_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12b      	bne.n	800112e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <HAL_I2C_MspInit+0x88>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a17      	ldr	r2, [pc, #92]	@ (800113c <HAL_I2C_MspInit+0x88>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_I2C_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f2:	23c0      	movs	r3, #192	@ 0xc0
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f6:	2312      	movs	r3, #18
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001102:	2304      	movs	r3, #4
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <HAL_I2C_MspInit+0x8c>)
 800110e:	f001 fe9f 	bl	8002e50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_I2C_MspInit+0x88>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	4a08      	ldr	r2, [pc, #32]	@ (800113c <HAL_I2C_MspInit+0x88>)
 800111c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001120:	6413      	str	r3, [r2, #64]	@ 0x40
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_I2C_MspInit+0x88>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	@ 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40005400 	.word	0x40005400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400

08001144 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800114e:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <LCD_WR_REG+0x1c>)
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	8013      	strh	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	600ffffe 	.word	0x600ffffe

08001164 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <LCD_WR_DATA+0x1c>)
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	8053      	strh	r3, [r2, #2]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	600ffffe 	.word	0x600ffffe

08001184 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <LCD_RD_DATA+0x20>)
 800118c:	885b      	ldrh	r3, [r3, #2]
 800118e:	b29b      	uxth	r3, r3
 8001190:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	b29b      	uxth	r3, r3
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	600ffffe 	.word	0x600ffffe

080011a8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4604      	mov	r4, r0
 80011b0:	4608      	mov	r0, r1
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	80fb      	strh	r3, [r7, #6]
 80011ba:	4603      	mov	r3, r0
 80011bc:	80bb      	strh	r3, [r7, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	807b      	strh	r3, [r7, #2]
 80011c2:	4613      	mov	r3, r2
 80011c4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80011c6:	202a      	movs	r0, #42	@ 0x2a
 80011c8:	f7ff ffbc 	bl	8001144 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ffc6 	bl	8001164 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ffc0 	bl	8001164 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	0a1b      	lsrs	r3, r3, #8
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffba 	bl	8001164 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ffb4 	bl	8001164 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80011fc:	202b      	movs	r0, #43	@ 0x2b
 80011fe:	f7ff ffa1 	bl	8001144 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001202:	88bb      	ldrh	r3, [r7, #4]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	b29b      	uxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ffab 	bl	8001164 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ffa5 	bl	8001164 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800121a:	883b      	ldrh	r3, [r7, #0]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	b29b      	uxth	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff9f 	bl	8001164 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001226:	883b      	ldrh	r3, [r7, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	b29b      	uxth	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff99 	bl	8001164 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001232:	202c      	movs	r0, #44	@ 0x2c
 8001234:	f7ff ff86 	bl	8001144 <LCD_WR_REG>
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}

08001240 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	b29b      	uxth	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <lcd_Clear+0x70>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	3b01      	subs	r3, #1
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <lcd_Clear+0x70>)
 8001264:	885b      	ldrh	r3, [r3, #2]
 8001266:	3b01      	subs	r3, #1
 8001268:	b29b      	uxth	r3, r3
 800126a:	2100      	movs	r1, #0
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ff9b 	bl	80011a8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001272:	2300      	movs	r3, #0
 8001274:	81fb      	strh	r3, [r7, #14]
 8001276:	e011      	b.n	800129c <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001278:	2300      	movs	r3, #0
 800127a:	81bb      	strh	r3, [r7, #12]
 800127c:	e006      	b.n	800128c <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff6f 	bl	8001164 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001286:	89bb      	ldrh	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	81bb      	strh	r3, [r7, #12]
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <lcd_Clear+0x70>)
 800128e:	885b      	ldrh	r3, [r3, #2]
 8001290:	89ba      	ldrh	r2, [r7, #12]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3f3      	bcc.n	800127e <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	3301      	adds	r3, #1
 800129a:	81fb      	strh	r3, [r7, #14]
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <lcd_Clear+0x70>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	89fa      	ldrh	r2, [r7, #14]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d3e8      	bcc.n	8001278 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000138 	.word	0x20000138

080012b4 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4604      	mov	r4, r0
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4623      	mov	r3, r4
 80012c4:	80fb      	strh	r3, [r7, #6]
 80012c6:	4603      	mov	r3, r0
 80012c8:	80bb      	strh	r3, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]
 80012ce:	4613      	mov	r3, r2
 80012d0:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	883b      	ldrh	r3, [r7, #0]
 80012da:	3b01      	subs	r3, #1
 80012dc:	b29b      	uxth	r3, r3
 80012de:	88b9      	ldrh	r1, [r7, #4]
 80012e0:	88f8      	ldrh	r0, [r7, #6]
 80012e2:	f7ff ff61 	bl	80011a8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80012e6:	88bb      	ldrh	r3, [r7, #4]
 80012e8:	81fb      	strh	r3, [r7, #14]
 80012ea:	e010      	b.n	800130e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	81bb      	strh	r3, [r7, #12]
 80012f0:	e006      	b.n	8001300 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80012f2:	8c3b      	ldrh	r3, [r7, #32]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff35 	bl	8001164 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80012fa:	89bb      	ldrh	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	81bb      	strh	r3, [r7, #12]
 8001300:	89ba      	ldrh	r2, [r7, #12]
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	429a      	cmp	r2, r3
 8001306:	d3f4      	bcc.n	80012f2 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001308:	89fb      	ldrh	r3, [r7, #14]
 800130a:	3301      	adds	r3, #1
 800130c:	81fb      	strh	r3, [r7, #14]
 800130e:	89fa      	ldrh	r2, [r7, #14]
 8001310:	883b      	ldrh	r3, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3ea      	bcc.n	80012ec <lcd_Fill+0x38>
		}
	}
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}

08001320 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	460b      	mov	r3, r1
 800132c:	80bb      	strh	r3, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	88fa      	ldrh	r2, [r7, #6]
 8001336:	88b9      	ldrh	r1, [r7, #4]
 8001338:	88f8      	ldrh	r0, [r7, #6]
 800133a:	f7ff ff35 	bl	80011a8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff0f 	bl	8001164 <LCD_WR_DATA>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4623      	mov	r3, r4
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	4603      	mov	r3, r0
 8001364:	80bb      	strh	r3, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	70fb      	strb	r3, [r7, #3]
 800136a:	4613      	mov	r3, r2
 800136c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800136e:	2300      	movs	r3, #0
 8001370:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001376:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	bf14      	ite	ne
 8001392:	2301      	movne	r3, #1
 8001394:	2300      	moveq	r3, #0
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4413      	add	r3, r2
 800139a:	b29a      	uxth	r2, r3
 800139c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	fb12 f303 	smulbb	r3, r2, r3
 80013a6:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	3b20      	subs	r3, #32
 80013ac:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	4413      	add	r3, r2
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	3b01      	subs	r3, #1
 80013ba:	b29c      	uxth	r4, r3
 80013bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	88bb      	ldrh	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	88b9      	ldrh	r1, [r7, #4]
 80013ce:	88f8      	ldrh	r0, [r7, #6]
 80013d0:	4622      	mov	r2, r4
 80013d2:	f7ff fee9 	bl	80011a8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	827b      	strh	r3, [r7, #18]
 80013da:	e07a      	b.n	80014d2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80013dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013e0:	2b0c      	cmp	r3, #12
 80013e2:	d028      	beq.n	8001436 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 80013e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013e8:	2b10      	cmp	r3, #16
 80013ea:	d108      	bne.n	80013fe <lcd_ShowChar+0xae>
 80013ec:	78fa      	ldrb	r2, [r7, #3]
 80013ee:	8a7b      	ldrh	r3, [r7, #18]
 80013f0:	493c      	ldr	r1, [pc, #240]	@ (80014e4 <lcd_ShowChar+0x194>)
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	440a      	add	r2, r1
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	75fb      	strb	r3, [r7, #23]
 80013fc:	e01b      	b.n	8001436 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 80013fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001402:	2b18      	cmp	r3, #24
 8001404:	d10b      	bne.n	800141e <lcd_ShowChar+0xce>
 8001406:	78fa      	ldrb	r2, [r7, #3]
 8001408:	8a79      	ldrh	r1, [r7, #18]
 800140a:	4837      	ldr	r0, [pc, #220]	@ (80014e8 <lcd_ShowChar+0x198>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4403      	add	r3, r0
 8001416:	440b      	add	r3, r1
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	75fb      	strb	r3, [r7, #23]
 800141c:	e00b      	b.n	8001436 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 800141e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001422:	2b20      	cmp	r3, #32
 8001424:	d15a      	bne.n	80014dc <lcd_ShowChar+0x18c>
 8001426:	78fa      	ldrb	r2, [r7, #3]
 8001428:	8a7b      	ldrh	r3, [r7, #18]
 800142a:	4930      	ldr	r1, [pc, #192]	@ (80014ec <lcd_ShowChar+0x19c>)
 800142c:	0192      	lsls	r2, r2, #6
 800142e:	440a      	add	r2, r1
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001436:	2300      	movs	r3, #0
 8001438:	75bb      	strb	r3, [r7, #22]
 800143a:	e044      	b.n	80014c6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 800143c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001440:	2b00      	cmp	r3, #0
 8001442:	d120      	bne.n	8001486 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001444:	7dfa      	ldrb	r2, [r7, #23]
 8001446:	7dbb      	ldrb	r3, [r7, #22]
 8001448:	fa42 f303 	asr.w	r3, r2, r3
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <lcd_ShowChar+0x10e>
 8001454:	883b      	ldrh	r3, [r7, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fe84 	bl	8001164 <LCD_WR_DATA>
 800145c:	e003      	b.n	8001466 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800145e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fe7f 	bl	8001164 <LCD_WR_DATA>
				m++;
 8001466:	7d7b      	ldrb	r3, [r7, #21]
 8001468:	3301      	adds	r3, #1
 800146a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	fbb3 f1f2 	udiv	r1, r3, r2
 8001474:	fb01 f202 	mul.w	r2, r1, r2
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11f      	bne.n	80014c0 <lcd_ShowChar+0x170>
				{
					m=0;
 8001480:	2300      	movs	r3, #0
 8001482:	757b      	strb	r3, [r7, #21]
					break;
 8001484:	e022      	b.n	80014cc <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001486:	7dfa      	ldrb	r2, [r7, #23]
 8001488:	7dbb      	ldrb	r3, [r7, #22]
 800148a:	fa42 f303 	asr.w	r3, r2, r3
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <lcd_ShowChar+0x152>
 8001496:	883a      	ldrh	r2, [r7, #0]
 8001498:	88b9      	ldrh	r1, [r7, #4]
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff3f 	bl	8001320 <lcd_DrawPoint>
				x++;
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	3301      	adds	r3, #1
 80014a6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	8a3b      	ldrh	r3, [r7, #16]
 80014ac:	1ad2      	subs	r2, r2, r3
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d105      	bne.n	80014c0 <lcd_ShowChar+0x170>
				{
					x=x0;
 80014b4:	8a3b      	ldrh	r3, [r7, #16]
 80014b6:	80fb      	strh	r3, [r7, #6]
					y++;
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	3301      	adds	r3, #1
 80014bc:	80bb      	strh	r3, [r7, #4]
					break;
 80014be:	e005      	b.n	80014cc <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80014c0:	7dbb      	ldrb	r3, [r7, #22]
 80014c2:	3301      	adds	r3, #1
 80014c4:	75bb      	strb	r3, [r7, #22]
 80014c6:	7dbb      	ldrb	r3, [r7, #22]
 80014c8:	2b07      	cmp	r3, #7
 80014ca:	d9b7      	bls.n	800143c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80014cc:	8a7b      	ldrh	r3, [r7, #18]
 80014ce:	3301      	adds	r3, #1
 80014d0:	827b      	strh	r3, [r7, #18]
 80014d2:	8a7a      	ldrh	r2, [r7, #18]
 80014d4:	89bb      	ldrh	r3, [r7, #12]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d380      	bcc.n	80013dc <lcd_ShowChar+0x8c>
 80014da:	e000      	b.n	80014de <lcd_ShowChar+0x18e>
		else return;
 80014dc:	bf00      	nop
				}
			}
		}
	}
}
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	08006408 	.word	0x08006408
 80014e8:	080069f8 	.word	0x080069f8
 80014ec:	08007bc8 	.word	0x08007bc8

080014f0 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	460a      	mov	r2, r1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001500:	2301      	movs	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001504:	e004      	b.n	8001510 <mypow+0x20>
 8001506:	79fa      	ldrb	r2, [r7, #7]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	1e5a      	subs	r2, r3, #1
 8001514:	71ba      	strb	r2, [r7, #6]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f5      	bne.n	8001506 <mypow+0x16>
	return result;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b089      	sub	sp, #36	@ 0x24
 800152c:	af04      	add	r7, sp, #16
 800152e:	4604      	mov	r4, r0
 8001530:	4608      	mov	r0, r1
 8001532:	4611      	mov	r1, r2
 8001534:	461a      	mov	r2, r3
 8001536:	4623      	mov	r3, r4
 8001538:	80fb      	strh	r3, [r7, #6]
 800153a:	4603      	mov	r3, r0
 800153c:	80bb      	strh	r3, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
 8001542:	4613      	mov	r3, r2
 8001544:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001546:	2300      	movs	r3, #0
 8001548:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800154a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e059      	b.n	800160c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001558:	887c      	ldrh	r4, [r7, #2]
 800155a:	787a      	ldrb	r2, [r7, #1]
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3b01      	subs	r3, #1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	200a      	movs	r0, #10
 800156a:	f7ff ffc1 	bl	80014f0 <mypow>
 800156e:	4603      	mov	r3, r0
 8001570:	fbb4 f1f3 	udiv	r1, r4, r3
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <lcd_ShowIntNum+0xf8>)
 8001576:	fba3 2301 	umull	r2, r3, r3, r1
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	1aca      	subs	r2, r1, r3
 8001586:	4613      	mov	r3, r2
 8001588:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d121      	bne.n	80015d4 <lcd_ShowIntNum+0xac>
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	787b      	ldrb	r3, [r7, #1]
 8001594:	3b01      	subs	r3, #1
 8001596:	429a      	cmp	r2, r3
 8001598:	da1c      	bge.n	80015d4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800159a:	7b3b      	ldrb	r3, [r7, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d117      	bne.n	80015d0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	7b7b      	ldrb	r3, [r7, #13]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	fb12 f303 	smulbb	r3, r2, r3
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	4413      	add	r3, r2
 80015b2:	b298      	uxth	r0, r3
 80015b4:	8c3a      	ldrh	r2, [r7, #32]
 80015b6:	88b9      	ldrh	r1, [r7, #4]
 80015b8:	2300      	movs	r3, #0
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	4613      	mov	r3, r2
 80015c8:	2220      	movs	r2, #32
 80015ca:	f7ff fec1 	bl	8001350 <lcd_ShowChar>
				continue;
 80015ce:	e01a      	b.n	8001606 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	fb12 f303 	smulbb	r3, r2, r3
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	4413      	add	r3, r2
 80015e6:	b298      	uxth	r0, r3
 80015e8:	7b3b      	ldrb	r3, [r7, #12]
 80015ea:	3330      	adds	r3, #48	@ 0x30
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	8c3c      	ldrh	r4, [r7, #32]
 80015f0:	88b9      	ldrh	r1, [r7, #4]
 80015f2:	2300      	movs	r3, #0
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	4623      	mov	r3, r4
 8001602:	f7ff fea5 	bl	8001350 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	3301      	adds	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	787b      	ldrb	r3, [r7, #1]
 8001610:	429a      	cmp	r2, r3
 8001612:	d3a1      	bcc.n	8001558 <lcd_ShowIntNum+0x30>
	}
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	cccccccd 	.word	0xcccccccd

08001624 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <lcd_SetDir+0x44>)
 8001640:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001644:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <lcd_SetDir+0x44>)
 8001648:	22f0      	movs	r2, #240	@ 0xf0
 800164a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800164c:	e006      	b.n	800165c <lcd_SetDir+0x38>
		lcddev.width=240;
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <lcd_SetDir+0x44>)
 8001650:	22f0      	movs	r2, #240	@ 0xf0
 8001652:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <lcd_SetDir+0x44>)
 8001656:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800165a:	805a      	strh	r2, [r3, #2]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	20000138 	.word	0x20000138

0800166c <lcd_init>:


void lcd_init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001676:	48aa      	ldr	r0, [pc, #680]	@ (8001920 <lcd_init+0x2b4>)
 8001678:	f001 fd86 	bl	8003188 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800167c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001680:	f001 fab0 	bl	8002be4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800168a:	48a5      	ldr	r0, [pc, #660]	@ (8001920 <lcd_init+0x2b4>)
 800168c:	f001 fd7c 	bl	8003188 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001690:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001694:	f001 faa6 	bl	8002be4 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff ffc3 	bl	8001624 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800169e:	20d3      	movs	r0, #211	@ 0xd3
 80016a0:	f7ff fd50 	bl	8001144 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80016a4:	f7ff fd6e 	bl	8001184 <LCD_RD_DATA>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001924 <lcd_init+0x2b8>)
 80016ae:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80016b0:	f7ff fd68 	bl	8001184 <LCD_RD_DATA>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b9a      	ldr	r3, [pc, #616]	@ (8001924 <lcd_init+0x2b8>)
 80016ba:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80016bc:	f7ff fd62 	bl	8001184 <LCD_RD_DATA>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b97      	ldr	r3, [pc, #604]	@ (8001924 <lcd_init+0x2b8>)
 80016c6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80016c8:	4b96      	ldr	r3, [pc, #600]	@ (8001924 <lcd_init+0x2b8>)
 80016ca:	889b      	ldrh	r3, [r3, #4]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b94      	ldr	r3, [pc, #592]	@ (8001924 <lcd_init+0x2b8>)
 80016d2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80016d4:	f7ff fd56 	bl	8001184 <LCD_RD_DATA>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	4b91      	ldr	r3, [pc, #580]	@ (8001924 <lcd_init+0x2b8>)
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001924 <lcd_init+0x2b8>)
 80016e6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80016e8:	20cf      	movs	r0, #207	@ 0xcf
 80016ea:	f7ff fd2b 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fd38 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80016f4:	20c1      	movs	r0, #193	@ 0xc1
 80016f6:	f7ff fd35 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80016fa:	2030      	movs	r0, #48	@ 0x30
 80016fc:	f7ff fd32 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001700:	20ed      	movs	r0, #237	@ 0xed
 8001702:	f7ff fd1f 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001706:	2064      	movs	r0, #100	@ 0x64
 8001708:	f7ff fd2c 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800170c:	2003      	movs	r0, #3
 800170e:	f7ff fd29 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001712:	2012      	movs	r0, #18
 8001714:	f7ff fd26 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001718:	2081      	movs	r0, #129	@ 0x81
 800171a:	f7ff fd23 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800171e:	20e8      	movs	r0, #232	@ 0xe8
 8001720:	f7ff fd10 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001724:	2085      	movs	r0, #133	@ 0x85
 8001726:	f7ff fd1d 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800172a:	2010      	movs	r0, #16
 800172c:	f7ff fd1a 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001730:	207a      	movs	r0, #122	@ 0x7a
 8001732:	f7ff fd17 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001736:	20cb      	movs	r0, #203	@ 0xcb
 8001738:	f7ff fd04 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800173c:	2039      	movs	r0, #57	@ 0x39
 800173e:	f7ff fd11 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001742:	202c      	movs	r0, #44	@ 0x2c
 8001744:	f7ff fd0e 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff fd0b 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800174e:	2034      	movs	r0, #52	@ 0x34
 8001750:	f7ff fd08 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001754:	2002      	movs	r0, #2
 8001756:	f7ff fd05 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800175a:	20f7      	movs	r0, #247	@ 0xf7
 800175c:	f7ff fcf2 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001760:	2020      	movs	r0, #32
 8001762:	f7ff fcff 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001766:	20ea      	movs	r0, #234	@ 0xea
 8001768:	f7ff fcec 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff fcf9 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fcf6 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001778:	20c0      	movs	r0, #192	@ 0xc0
 800177a:	f7ff fce3 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800177e:	201b      	movs	r0, #27
 8001780:	f7ff fcf0 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001784:	20c1      	movs	r0, #193	@ 0xc1
 8001786:	f7ff fcdd 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff fcea 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001790:	20c5      	movs	r0, #197	@ 0xc5
 8001792:	f7ff fcd7 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001796:	2030      	movs	r0, #48	@ 0x30
 8001798:	f7ff fce4 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800179c:	2030      	movs	r0, #48	@ 0x30
 800179e:	f7ff fce1 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80017a2:	20c7      	movs	r0, #199	@ 0xc7
 80017a4:	f7ff fcce 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80017a8:	20b7      	movs	r0, #183	@ 0xb7
 80017aa:	f7ff fcdb 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80017ae:	2036      	movs	r0, #54	@ 0x36
 80017b0:	f7ff fcc8 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80017b4:	2008      	movs	r0, #8
 80017b6:	f7ff fcd5 	bl	8001164 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80017ba:	203a      	movs	r0, #58	@ 0x3a
 80017bc:	f7ff fcc2 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80017c0:	2055      	movs	r0, #85	@ 0x55
 80017c2:	f7ff fccf 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80017c6:	20b1      	movs	r0, #177	@ 0xb1
 80017c8:	f7ff fcbc 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff fcc9 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80017d2:	201a      	movs	r0, #26
 80017d4:	f7ff fcc6 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80017d8:	20b6      	movs	r0, #182	@ 0xb6
 80017da:	f7ff fcb3 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80017de:	200a      	movs	r0, #10
 80017e0:	f7ff fcc0 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80017e4:	20a2      	movs	r0, #162	@ 0xa2
 80017e6:	f7ff fcbd 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80017ea:	20f2      	movs	r0, #242	@ 0xf2
 80017ec:	f7ff fcaa 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff fcb7 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80017f6:	2026      	movs	r0, #38	@ 0x26
 80017f8:	f7ff fca4 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f7ff fcb1 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001802:	20e0      	movs	r0, #224	@ 0xe0
 8001804:	f7ff fc9e 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001808:	200f      	movs	r0, #15
 800180a:	f7ff fcab 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800180e:	202a      	movs	r0, #42	@ 0x2a
 8001810:	f7ff fca8 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001814:	2028      	movs	r0, #40	@ 0x28
 8001816:	f7ff fca5 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800181a:	2008      	movs	r0, #8
 800181c:	f7ff fca2 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001820:	200e      	movs	r0, #14
 8001822:	f7ff fc9f 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001826:	2008      	movs	r0, #8
 8001828:	f7ff fc9c 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800182c:	2054      	movs	r0, #84	@ 0x54
 800182e:	f7ff fc99 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001832:	20a9      	movs	r0, #169	@ 0xa9
 8001834:	f7ff fc96 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001838:	2043      	movs	r0, #67	@ 0x43
 800183a:	f7ff fc93 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800183e:	200a      	movs	r0, #10
 8001840:	f7ff fc90 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001844:	200f      	movs	r0, #15
 8001846:	f7ff fc8d 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fc8a 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff fc87 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fc84 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff fc81 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001862:	20e1      	movs	r0, #225	@ 0xe1
 8001864:	f7ff fc6e 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff fc7b 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800186e:	2015      	movs	r0, #21
 8001870:	f7ff fc78 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001874:	2017      	movs	r0, #23
 8001876:	f7ff fc75 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800187a:	2007      	movs	r0, #7
 800187c:	f7ff fc72 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001880:	2011      	movs	r0, #17
 8001882:	f7ff fc6f 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001886:	2006      	movs	r0, #6
 8001888:	f7ff fc6c 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800188c:	202b      	movs	r0, #43	@ 0x2b
 800188e:	f7ff fc69 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001892:	2056      	movs	r0, #86	@ 0x56
 8001894:	f7ff fc66 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001898:	203c      	movs	r0, #60	@ 0x3c
 800189a:	f7ff fc63 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800189e:	2005      	movs	r0, #5
 80018a0:	f7ff fc60 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80018a4:	2010      	movs	r0, #16
 80018a6:	f7ff fc5d 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80018aa:	200f      	movs	r0, #15
 80018ac:	f7ff fc5a 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80018b0:	203f      	movs	r0, #63	@ 0x3f
 80018b2:	f7ff fc57 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80018b6:	203f      	movs	r0, #63	@ 0x3f
 80018b8:	f7ff fc54 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80018bc:	200f      	movs	r0, #15
 80018be:	f7ff fc51 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80018c2:	202b      	movs	r0, #43	@ 0x2b
 80018c4:	f7ff fc3e 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff fc4b 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff fc48 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff fc45 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80018da:	203f      	movs	r0, #63	@ 0x3f
 80018dc:	f7ff fc42 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80018e0:	202a      	movs	r0, #42	@ 0x2a
 80018e2:	f7ff fc2f 	bl	8001144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff fc3c 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7ff fc39 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fc36 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80018f8:	20ef      	movs	r0, #239	@ 0xef
 80018fa:	f7ff fc33 	bl	8001164 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80018fe:	2011      	movs	r0, #17
 8001900:	f7ff fc20 	bl	8001144 <LCD_WR_REG>
	HAL_Delay(120);
 8001904:	2078      	movs	r0, #120	@ 0x78
 8001906:	f001 f96d 	bl	8002be4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800190a:	2029      	movs	r0, #41	@ 0x29
 800190c:	f7ff fc1a 	bl	8001144 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001916:	4804      	ldr	r0, [pc, #16]	@ (8001928 <lcd_init+0x2bc>)
 8001918:	f001 fc36 	bl	8003188 <HAL_GPIO_WritePin>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020800 	.word	0x40020800
 8001924:	20000138 	.word	0x20000138
 8001928:	40020000 	.word	0x40020000

0800192c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b08b      	sub	sp, #44	@ 0x2c
 8001930:	af04      	add	r7, sp, #16
 8001932:	60ba      	str	r2, [r7, #8]
 8001934:	461a      	mov	r2, r3
 8001936:	4603      	mov	r3, r0
 8001938:	81fb      	strh	r3, [r7, #14]
 800193a:	460b      	mov	r3, r1
 800193c:	81bb      	strh	r3, [r7, #12]
 800193e:	4613      	mov	r3, r2
 8001940:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001946:	2300      	movs	r3, #0
 8001948:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800194a:	e048      	b.n	80019de <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d145      	bne.n	80019de <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001952:	89fa      	ldrh	r2, [r7, #14]
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <lcd_ShowStr+0xc4>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	1acb      	subs	r3, r1, r3
 8001964:	429a      	cmp	r2, r3
 8001966:	dc3f      	bgt.n	80019e8 <lcd_ShowStr+0xbc>
 8001968:	89ba      	ldrh	r2, [r7, #12]
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <lcd_ShowStr+0xc4>)
 800196c:	885b      	ldrh	r3, [r3, #2]
 800196e:	4619      	mov	r1, r3
 8001970:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001974:	1acb      	subs	r3, r1, r3
 8001976:	429a      	cmp	r2, r3
 8001978:	dc36      	bgt.n	80019e8 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b80      	cmp	r3, #128	@ 0x80
 8001980:	d902      	bls.n	8001988 <lcd_ShowStr+0x5c>
 8001982:	2301      	movs	r3, #1
 8001984:	75fb      	strb	r3, [r7, #23]
 8001986:	e02a      	b.n	80019de <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b0d      	cmp	r3, #13
 800198e:	d10b      	bne.n	80019a8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001990:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001994:	b29a      	uxth	r2, r3
 8001996:	89bb      	ldrh	r3, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800199c:	8abb      	ldrh	r3, [r7, #20]
 800199e:	81fb      	strh	r3, [r7, #14]
					str++;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	e017      	b.n	80019d8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	88fc      	ldrh	r4, [r7, #6]
 80019ae:	89b9      	ldrh	r1, [r7, #12]
 80019b0:	89f8      	ldrh	r0, [r7, #14]
 80019b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80019b6:	9302      	str	r3, [sp, #8]
 80019b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	4623      	mov	r3, r4
 80019c4:	f7ff fcc4 	bl	8001350 <lcd_ShowChar>
					x+=sizey/2;
 80019c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	89fb      	ldrh	r3, [r7, #14]
 80019d4:	4413      	add	r3, r2
 80019d6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	3301      	adds	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1b2      	bne.n	800194c <lcd_ShowStr+0x20>
 80019e6:	e000      	b.n	80019ea <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80019e8:	bf00      	nop
			}
		}
	}
}
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd90      	pop	{r4, r7, pc}
 80019f0:	20000138 	.word	0x20000138

080019f4 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af04      	add	r7, sp, #16
 80019fa:	60ba      	str	r2, [r7, #8]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4603      	mov	r3, r0
 8001a00:	81fb      	strh	r3, [r7, #14]
 8001a02:	460b      	mov	r3, r1
 8001a04:	81bb      	strh	r3, [r7, #12]
 8001a06:	4613      	mov	r3, r2
 8001a08:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001a0a:	68b8      	ldr	r0, [r7, #8]
 8001a0c:	f7fe fbdc 	bl	80001c8 <strlen>
 8001a10:	4603      	mov	r3, r0
 8001a12:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <lcd_StrCenter+0x60>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	8afb      	ldrh	r3, [r7, #22]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	0fda      	lsrs	r2, r3, #31
 8001a22:	4413      	add	r3, r2
 8001a24:	105b      	asrs	r3, r3, #1
 8001a26:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001a28:	89fa      	ldrh	r2, [r7, #14]
 8001a2a:	8abb      	ldrh	r3, [r7, #20]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b298      	uxth	r0, r3
 8001a30:	88fa      	ldrh	r2, [r7, #6]
 8001a32:	89b9      	ldrh	r1, [r7, #12]
 8001a34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	8c3b      	ldrh	r3, [r7, #32]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f7ff ff70 	bl	800192c <lcd_ShowStr>
}
 8001a4c:	bf00      	nop
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000138 	.word	0x20000138

08001a58 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2140      	movs	r1, #64	@ 0x40
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <led7_init+0x14>)
 8001a62:	f001 fb91 	bl	8003188 <HAL_GPIO_WritePin>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40021800 	.word	0x40021800

08001a70 <led7_Scan>:

void led7_Scan(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001a74:	4b3f      	ldr	r3, [pc, #252]	@ (8001b74 <led7_Scan+0x104>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <led7_Scan+0x104>)
 8001a7e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001a80:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <led7_Scan+0x108>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a3d      	ldr	r2, [pc, #244]	@ (8001b7c <led7_Scan+0x10c>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <led7_Scan+0x104>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b36      	ldr	r3, [pc, #216]	@ (8001b74 <led7_Scan+0x104>)
 8001a9a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001a9c:	4b36      	ldr	r3, [pc, #216]	@ (8001b78 <led7_Scan+0x108>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d847      	bhi.n	8001b34 <led7_Scan+0xc4>
 8001aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8001aac <led7_Scan+0x3c>)
 8001aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aaa:	bf00      	nop
 8001aac:	08001abd 	.word	0x08001abd
 8001ab0:	08001adb 	.word	0x08001adb
 8001ab4:	08001af9 	.word	0x08001af9
 8001ab8:	08001b17 	.word	0x08001b17
	case 0:
		spi_buffer |= 0x00b0;
 8001abc:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <led7_Scan+0x104>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b74 <led7_Scan+0x104>)
 8001ac8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001aca:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <led7_Scan+0x104>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <led7_Scan+0x104>)
 8001ad6:	801a      	strh	r2, [r3, #0]
		break;
 8001ad8:	e02d      	b.n	8001b36 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <led7_Scan+0x104>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <led7_Scan+0x104>)
 8001ae6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001ae8:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <led7_Scan+0x104>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	f023 0320 	bic.w	r3, r3, #32
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <led7_Scan+0x104>)
 8001af4:	801a      	strh	r2, [r3, #0]
		break;
 8001af6:	e01e      	b.n	8001b36 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001af8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <led7_Scan+0x104>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <led7_Scan+0x104>)
 8001b04:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <led7_Scan+0x104>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	f023 0310 	bic.w	r3, r3, #16
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <led7_Scan+0x104>)
 8001b12:	801a      	strh	r2, [r3, #0]
		break;
 8001b14:	e00f      	b.n	8001b36 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <led7_Scan+0x104>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <led7_Scan+0x104>)
 8001b22:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <led7_Scan+0x104>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <led7_Scan+0x104>)
 8001b30:	801a      	strh	r2, [r3, #0]
		break;
 8001b32:	e000      	b.n	8001b36 <led7_Scan+0xc6>
	default:
		break;
 8001b34:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <led7_Scan+0x108>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	425a      	negs	r2, r3
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	f002 0203 	and.w	r2, r2, #3
 8001b46:	bf58      	it	pl
 8001b48:	4253      	negpl	r3, r2
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b78 <led7_Scan+0x108>)
 8001b4c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2140      	movs	r1, #64	@ 0x40
 8001b52:	480b      	ldr	r0, [pc, #44]	@ (8001b80 <led7_Scan+0x110>)
 8001b54:	f001 fb18 	bl	8003188 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001b58:	2301      	movs	r3, #1
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4905      	ldr	r1, [pc, #20]	@ (8001b74 <led7_Scan+0x104>)
 8001b5e:	4809      	ldr	r0, [pc, #36]	@ (8001b84 <led7_Scan+0x114>)
 8001b60:	f003 f927 	bl	8004db2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2140      	movs	r1, #64	@ 0x40
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <led7_Scan+0x110>)
 8001b6a:	f001 fb0d 	bl	8003188 <HAL_GPIO_WritePin>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000001c 	.word	0x2000001c
 8001b78:	20000140 	.word	0x20000140
 8001b7c:	20000018 	.word	0x20000018
 8001b80:	40021800 	.word	0x40021800
 8001b84:	20000158 	.word	0x20000158

08001b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  int sta=1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	607b      	str	r3, [r7, #4]
	  	int status=0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b96:	f000 ffb3 	bl	8002b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b9a:	f000 f861 	bl	8001c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b9e:	f7ff f963 	bl	8000e68 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001ba2:	f000 fed3 	bl	800294c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001ba6:	f000 fddf 	bl	8002768 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001baa:	f7ff f88d 	bl	8000cc8 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001bae:	f7ff fa53 	bl	8001058 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001bb2:	f000 f8bf 	bl	8001d34 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff fb42 	bl	8001240 <lcd_Clear>
 updateTime();
 8001bbc:	f000 f8dc 	bl	8001d78 <updateTime>
  while (1)
  {
	  if(!flag_timer2){
 8001bc0:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <main+0xc8>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <main+0x54>
		  setTimer2(50);
 8001bc8:	2032      	movs	r0, #50	@ 0x32
 8001bca:	f000 fd19 	bl	8002600 <setTimer2>
		  button_Scan();
 8001bce:	f7fe fc87 	bl	80004e0 <button_Scan>
		  fsm(status);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fe7c 	bl	80008d4 <fsm>
	  }
	  if(status ==1){
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d102      	bne.n	8001be8 <main+0x60>
		  Flashing_cal(sta);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f966 	bl	8001eb4 <Flashing_cal>
	  }
	  if(status==2){
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d102      	bne.n	8001bf4 <main+0x6c>
		  Flashing_alarm(sta);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fc3c 	bl	800246c <Flashing_alarm>
	  }
	  if(button_count[0]==1){
 8001bf4:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <main+0xcc>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d11a      	bne.n	8001c32 <main+0xaa>
		  status++;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	603b      	str	r3, [r7, #0]
		  if(status >2) status =0;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	dd01      	ble.n	8001c0c <main+0x84>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	603b      	str	r3, [r7, #0]
		  if(status != 0){
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00c      	beq.n	8001c2c <main+0xa4>
			  if (status ==1) CalibrateInit();
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <main+0x94>
 8001c18:	f7fe fcce 	bl	80005b8 <CalibrateInit>
			  counter=0;
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <main+0xd0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
			  setTimer4(250);
 8001c22:	20fa      	movs	r0, #250	@ 0xfa
 8001c24:	f000 fd24 	bl	8002670 <setTimer4>
			  sta=1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
		  }
		  lcd_Clear(BLACK);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff fb07 	bl	8001240 <lcd_Clear>
	  }
	  if(flag_timer4){
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <main+0xd4>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0c2      	beq.n	8001bc0 <main+0x38>
		  setTimer4(250);
 8001c3a:	20fa      	movs	r0, #250	@ 0xfa
 8001c3c:	f000 fd18 	bl	8002670 <setTimer4>
		  sta=!sta;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf0c      	ite	eq
 8001c46:	2301      	moveq	r3, #1
 8001c48:	2300      	movne	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	607b      	str	r3, [r7, #4]
	  if(!flag_timer2){
 8001c4e:	e7b7      	b.n	8001bc0 <main+0x38>
 8001c50:	20000144 	.word	0x20000144
 8001c54:	20000048 	.word	0x20000048
 8001c58:	2000006c 	.word	0x2000006c
 8001c5c:	20000150 	.word	0x20000150

08001c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b094      	sub	sp, #80	@ 0x50
 8001c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	2230      	movs	r2, #48	@ 0x30
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fb54 	bl	800631c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <SystemClock_Config+0xcc>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	4a27      	ldr	r2, [pc, #156]	@ (8001d2c <SystemClock_Config+0xcc>)
 8001c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <SystemClock_Config+0xcc>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <SystemClock_Config+0xd0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a21      	ldr	r2, [pc, #132]	@ (8001d30 <SystemClock_Config+0xd0>)
 8001caa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <SystemClock_Config+0xd0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001cd4:	23a8      	movs	r3, #168	@ 0xa8
 8001cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fb57 	bl	8004398 <HAL_RCC_OscConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cf0:	f000 fc76 	bl	80025e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001d06:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2105      	movs	r1, #5
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 fdb8 	bl	8004888 <HAL_RCC_ClockConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d1e:	f000 fc5f 	bl	80025e0 <Error_Handler>
  }
}
 8001d22:	bf00      	nop
 8001d24:	3750      	adds	r7, #80	@ 0x50
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000

08001d34 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2120      	movs	r1, #32
 8001d3c:	480d      	ldr	r0, [pc, #52]	@ (8001d74 <system_init+0x40>)
 8001d3e:	f001 fa23 	bl	8003188 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2140      	movs	r1, #64	@ 0x40
 8001d46:	480b      	ldr	r0, [pc, #44]	@ (8001d74 <system_init+0x40>)
 8001d48:	f001 fa1e 	bl	8003188 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2110      	movs	r1, #16
 8001d50:	4808      	ldr	r0, [pc, #32]	@ (8001d74 <system_init+0x40>)
 8001d52:	f001 fa19 	bl	8003188 <HAL_GPIO_WritePin>
	  timer_init();
 8001d56:	f000 fc49 	bl	80025ec <timer_init>
	  led7_init();
 8001d5a:	f7ff fe7d 	bl	8001a58 <led7_init>
	  button_init();
 8001d5e:	f7fe fbb3 	bl	80004c8 <button_init>
	  lcd_init();
 8001d62:	f7ff fc83 	bl	800166c <lcd_init>
	  ds3231_init();
 8001d66:	f7fe fee5 	bl	8000b34 <ds3231_init>
	  setTimer2(50);
 8001d6a:	2032      	movs	r0, #50	@ 0x32
 8001d6c:	f000 fc48 	bl	8002600 <setTimer2>

}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000

08001d78 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 8001d7c:	2117      	movs	r1, #23
 8001d7e:	2006      	movs	r0, #6
 8001d80:	f7fe ff1c 	bl	8000bbc <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 8001d84:	210a      	movs	r1, #10
 8001d86:	2005      	movs	r0, #5
 8001d88:	f7fe ff18 	bl	8000bbc <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 8001d8c:	2114      	movs	r1, #20
 8001d8e:	2004      	movs	r0, #4
 8001d90:	f7fe ff14 	bl	8000bbc <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8001d94:	2106      	movs	r1, #6
 8001d96:	2003      	movs	r0, #3
 8001d98:	f7fe ff10 	bl	8000bbc <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 8001d9c:	2114      	movs	r1, #20
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f7fe ff0c 	bl	8000bbc <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 8001da4:	210b      	movs	r1, #11
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7fe ff08 	bl	8000bbc <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 8001dac:	2117      	movs	r1, #23
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7fe ff04 	bl	8000bbc <ds3231_Write>
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <displayTime>:
    if (button_count[7] == 1)
        return 1;
    else
        return 0;
}
void displayTime(){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001dbe:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <displayTime+0xe0>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2318      	movs	r3, #24
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	2164      	movs	r1, #100	@ 0x64
 8001dd6:	2046      	movs	r0, #70	@ 0x46
 8001dd8:	f7ff fba6 	bl	8001528 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <displayTime+0xe4>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	2318      	movs	r3, #24
 8001de4:	9302      	str	r3, [sp, #8]
 8001de6:	2300      	movs	r3, #0
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2302      	movs	r3, #2
 8001df2:	2164      	movs	r1, #100	@ 0x64
 8001df4:	206e      	movs	r0, #110	@ 0x6e
 8001df6:	f7ff fb97 	bl	8001528 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001dfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <displayTime+0xe8>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2318      	movs	r3, #24
 8001e02:	9302      	str	r3, [sp, #8]
 8001e04:	2300      	movs	r3, #0
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2302      	movs	r3, #2
 8001e10:	2164      	movs	r1, #100	@ 0x64
 8001e12:	2096      	movs	r0, #150	@ 0x96
 8001e14:	f7ff fb88 	bl	8001528 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001e18:	4b22      	ldr	r3, [pc, #136]	@ (8001ea4 <displayTime+0xec>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2318      	movs	r3, #24
 8001e20:	9302      	str	r3, [sp, #8]
 8001e22:	2300      	movs	r3, #0
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	2182      	movs	r1, #130	@ 0x82
 8001e30:	2014      	movs	r0, #20
 8001e32:	f7ff fb79 	bl	8001528 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001e36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <displayTime+0xf0>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2318      	movs	r3, #24
 8001e3e:	9302      	str	r3, [sp, #8]
 8001e40:	2300      	movs	r3, #0
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	2182      	movs	r1, #130	@ 0x82
 8001e4e:	2046      	movs	r0, #70	@ 0x46
 8001e50:	f7ff fb6a 	bl	8001528 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001e54:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <displayTime+0xf4>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2318      	movs	r3, #24
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2302      	movs	r3, #2
 8001e6a:	2182      	movs	r1, #130	@ 0x82
 8001e6c:	206e      	movs	r0, #110	@ 0x6e
 8001e6e:	f7ff fb5b 	bl	8001528 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001e72:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <displayTime+0xf8>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	2318      	movs	r3, #24
 8001e7a:	9302      	str	r3, [sp, #8]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2302      	movs	r3, #2
 8001e88:	2182      	movs	r1, #130	@ 0x82
 8001e8a:	2096      	movs	r0, #150	@ 0x96
 8001e8c:	f7ff fb4c 	bl	8001528 <lcd_ShowIntNum>
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000087 	.word	0x20000087
 8001e9c:	20000088 	.word	0x20000088
 8001ea0:	20000089 	.word	0x20000089
 8001ea4:	2000008b 	.word	0x2000008b
 8001ea8:	2000008a 	.word	0x2000008a
 8001eac:	2000008c 	.word	0x2000008c
 8001eb0:	2000008d 	.word	0x2000008d

08001eb4 <Flashing_cal>:
void Flashing_cal(int sta){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af04      	add	r7, sp, #16
 8001eba:	6078      	str	r0, [r7, #4]
	lcd_Fill(0, 50, 200, 160, BLACK);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	23a0      	movs	r3, #160	@ 0xa0
 8001ec2:	22c8      	movs	r2, #200	@ 0xc8
 8001ec4:	2132      	movs	r1, #50	@ 0x32
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff f9f4 	bl	80012b4 <lcd_Fill>
	switch (counter) {
 8001ecc:	4bad      	ldr	r3, [pc, #692]	@ (8002184 <Flashing_cal+0x2d0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	f200 82b2 	bhi.w	800243a <Flashing_cal+0x586>
 8001ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8001edc <Flashing_cal+0x28>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001ef5 	.word	0x08001ef5
 8001ee0:	08001fcf 	.word	0x08001fcf
 8001ee4:	080020a9 	.word	0x080020a9
 8001ee8:	080021ad 	.word	0x080021ad
 8001eec:	08002287 	.word	0x08002287
 8001ef0:	08002361 	.word	0x08002361
	case 0:
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001ef4:	4ba4      	ldr	r3, [pc, #656]	@ (8002188 <Flashing_cal+0x2d4>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2318      	movs	r3, #24
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	2300      	movs	r3, #0
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2302      	movs	r3, #2
 8001f0a:	2164      	movs	r1, #100	@ 0x64
 8001f0c:	2046      	movs	r0, #70	@ 0x46
 8001f0e:	f7ff fb0b 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001f12:	4b9e      	ldr	r3, [pc, #632]	@ (800218c <Flashing_cal+0x2d8>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	2318      	movs	r3, #24
 8001f1a:	9302      	str	r3, [sp, #8]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2302      	movs	r3, #2
 8001f28:	2164      	movs	r1, #100	@ 0x64
 8001f2a:	206e      	movs	r0, #110	@ 0x6e
 8001f2c:	f7ff fafc 	bl	8001528 <lcd_ShowIntNum>
		if (sta)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00e      	beq.n	8001f54 <Flashing_cal+0xa0>
			lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 8001f36:	4b96      	ldr	r3, [pc, #600]	@ (8002190 <Flashing_cal+0x2dc>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2318      	movs	r3, #24
 8001f3e:	9302      	str	r3, [sp, #8]
 8001f40:	2300      	movs	r3, #0
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	2164      	movs	r1, #100	@ 0x64
 8001f4e:	2096      	movs	r0, #150	@ 0x96
 8001f50:	f7ff faea 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001f54:	4b8f      	ldr	r3, [pc, #572]	@ (8002194 <Flashing_cal+0x2e0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2318      	movs	r3, #24
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2302      	movs	r3, #2
 8001f6a:	2182      	movs	r1, #130	@ 0x82
 8001f6c:	2014      	movs	r0, #20
 8001f6e:	f7ff fadb 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001f72:	4b89      	ldr	r3, [pc, #548]	@ (8002198 <Flashing_cal+0x2e4>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	2318      	movs	r3, #24
 8001f7a:	9302      	str	r3, [sp, #8]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2302      	movs	r3, #2
 8001f88:	2182      	movs	r1, #130	@ 0x82
 8001f8a:	2046      	movs	r0, #70	@ 0x46
 8001f8c:	f7ff facc 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001f90:	4b82      	ldr	r3, [pc, #520]	@ (800219c <Flashing_cal+0x2e8>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	2318      	movs	r3, #24
 8001f98:	9302      	str	r3, [sp, #8]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	2182      	movs	r1, #130	@ 0x82
 8001fa8:	206e      	movs	r0, #110	@ 0x6e
 8001faa:	f7ff fabd 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001fae:	4b7c      	ldr	r3, [pc, #496]	@ (80021a0 <Flashing_cal+0x2ec>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2318      	movs	r3, #24
 8001fb6:	9302      	str	r3, [sp, #8]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	2182      	movs	r1, #130	@ 0x82
 8001fc6:	2096      	movs	r0, #150	@ 0x96
 8001fc8:	f7ff faae 	bl	8001528 <lcd_ShowIntNum>
		break;
 8001fcc:	e238      	b.n	8002440 <Flashing_cal+0x58c>
	case 1:
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001fce:	4b6e      	ldr	r3, [pc, #440]	@ (8002188 <Flashing_cal+0x2d4>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2318      	movs	r3, #24
 8001fd6:	9302      	str	r3, [sp, #8]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	2164      	movs	r1, #100	@ 0x64
 8001fe6:	2046      	movs	r0, #70	@ 0x46
 8001fe8:	f7ff fa9e 	bl	8001528 <lcd_ShowIntNum>
		if (sta)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00e      	beq.n	8002010 <Flashing_cal+0x15c>
			lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80021a4 <Flashing_cal+0x2f0>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2318      	movs	r3, #24
 8001ffa:	9302      	str	r3, [sp, #8]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2302      	movs	r3, #2
 8002008:	2164      	movs	r1, #100	@ 0x64
 800200a:	206e      	movs	r0, #110	@ 0x6e
 800200c:	f7ff fa8c 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 8002010:	4b5f      	ldr	r3, [pc, #380]	@ (8002190 <Flashing_cal+0x2dc>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	2318      	movs	r3, #24
 8002018:	9302      	str	r3, [sp, #8]
 800201a:	2300      	movs	r3, #0
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2302      	movs	r3, #2
 8002026:	2164      	movs	r1, #100	@ 0x64
 8002028:	2096      	movs	r0, #150	@ 0x96
 800202a:	f7ff fa7d 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 800202e:	4b59      	ldr	r3, [pc, #356]	@ (8002194 <Flashing_cal+0x2e0>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	2318      	movs	r3, #24
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2302      	movs	r3, #2
 8002044:	2182      	movs	r1, #130	@ 0x82
 8002046:	2014      	movs	r0, #20
 8002048:	f7ff fa6e 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 800204c:	4b52      	ldr	r3, [pc, #328]	@ (8002198 <Flashing_cal+0x2e4>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	2318      	movs	r3, #24
 8002054:	9302      	str	r3, [sp, #8]
 8002056:	2300      	movs	r3, #0
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2302      	movs	r3, #2
 8002062:	2182      	movs	r1, #130	@ 0x82
 8002064:	2046      	movs	r0, #70	@ 0x46
 8002066:	f7ff fa5f 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 800206a:	4b4c      	ldr	r3, [pc, #304]	@ (800219c <Flashing_cal+0x2e8>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	2318      	movs	r3, #24
 8002072:	9302      	str	r3, [sp, #8]
 8002074:	2300      	movs	r3, #0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2302      	movs	r3, #2
 8002080:	2182      	movs	r1, #130	@ 0x82
 8002082:	206e      	movs	r0, #110	@ 0x6e
 8002084:	f7ff fa50 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8002088:	4b45      	ldr	r3, [pc, #276]	@ (80021a0 <Flashing_cal+0x2ec>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	2318      	movs	r3, #24
 8002090:	9302      	str	r3, [sp, #8]
 8002092:	2300      	movs	r3, #0
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2302      	movs	r3, #2
 800209e:	2182      	movs	r1, #130	@ 0x82
 80020a0:	2096      	movs	r0, #150	@ 0x96
 80020a2:	f7ff fa41 	bl	8001528 <lcd_ShowIntNum>
		break;
 80020a6:	e1cb      	b.n	8002440 <Flashing_cal+0x58c>
	case 2:
		if (sta)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00e      	beq.n	80020cc <Flashing_cal+0x218>
			lcd_ShowIntNum(70, 100, cal_hour, 2, GREEN, BLACK, 24);
 80020ae:	4b3e      	ldr	r3, [pc, #248]	@ (80021a8 <Flashing_cal+0x2f4>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	2318      	movs	r3, #24
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	2300      	movs	r3, #0
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2302      	movs	r3, #2
 80020c4:	2164      	movs	r1, #100	@ 0x64
 80020c6:	2046      	movs	r0, #70	@ 0x46
 80020c8:	f7ff fa2e 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 80020cc:	4b35      	ldr	r3, [pc, #212]	@ (80021a4 <Flashing_cal+0x2f0>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	2318      	movs	r3, #24
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	2300      	movs	r3, #0
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2302      	movs	r3, #2
 80020e2:	2164      	movs	r1, #100	@ 0x64
 80020e4:	206e      	movs	r0, #110	@ 0x6e
 80020e6:	f7ff fa1f 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 80020ea:	4b29      	ldr	r3, [pc, #164]	@ (8002190 <Flashing_cal+0x2dc>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	2318      	movs	r3, #24
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	2300      	movs	r3, #0
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2302      	movs	r3, #2
 8002100:	2164      	movs	r1, #100	@ 0x64
 8002102:	2096      	movs	r0, #150	@ 0x96
 8002104:	f7ff fa10 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8002108:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <Flashing_cal+0x2e0>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	2318      	movs	r3, #24
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2302      	movs	r3, #2
 800211e:	2182      	movs	r1, #130	@ 0x82
 8002120:	2014      	movs	r0, #20
 8002122:	f7ff fa01 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8002126:	4b1c      	ldr	r3, [pc, #112]	@ (8002198 <Flashing_cal+0x2e4>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	2318      	movs	r3, #24
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	2300      	movs	r3, #0
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2302      	movs	r3, #2
 800213c:	2182      	movs	r1, #130	@ 0x82
 800213e:	2046      	movs	r0, #70	@ 0x46
 8002140:	f7ff f9f2 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002144:	4b15      	ldr	r3, [pc, #84]	@ (800219c <Flashing_cal+0x2e8>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	2318      	movs	r3, #24
 800214c:	9302      	str	r3, [sp, #8]
 800214e:	2300      	movs	r3, #0
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2302      	movs	r3, #2
 800215a:	2182      	movs	r1, #130	@ 0x82
 800215c:	206e      	movs	r0, #110	@ 0x6e
 800215e:	f7ff f9e3 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8002162:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <Flashing_cal+0x2ec>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	2318      	movs	r3, #24
 800216a:	9302      	str	r3, [sp, #8]
 800216c:	2300      	movs	r3, #0
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2302      	movs	r3, #2
 8002178:	2182      	movs	r1, #130	@ 0x82
 800217a:	2096      	movs	r0, #150	@ 0x96
 800217c:	f7ff f9d4 	bl	8001528 <lcd_ShowIntNum>
		break;
 8002180:	e15e      	b.n	8002440 <Flashing_cal+0x58c>
 8002182:	bf00      	nop
 8002184:	2000006c 	.word	0x2000006c
 8002188:	20000087 	.word	0x20000087
 800218c:	20000088 	.word	0x20000088
 8002190:	20000076 	.word	0x20000076
 8002194:	2000008b 	.word	0x2000008b
 8002198:	2000008a 	.word	0x2000008a
 800219c:	2000008c 	.word	0x2000008c
 80021a0:	2000008d 	.word	0x2000008d
 80021a4:	20000075 	.word	0x20000075
 80021a8:	20000074 	.word	0x20000074
	case 3:
		lcd_ShowIntNum(70, 100, cal_hour, 2, GREEN, BLACK, 24);
 80021ac:	4ba6      	ldr	r3, [pc, #664]	@ (8002448 <Flashing_cal+0x594>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	2318      	movs	r3, #24
 80021b4:	9302      	str	r3, [sp, #8]
 80021b6:	2300      	movs	r3, #0
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2302      	movs	r3, #2
 80021c2:	2164      	movs	r1, #100	@ 0x64
 80021c4:	2046      	movs	r0, #70	@ 0x46
 80021c6:	f7ff f9af 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 80021ca:	4ba0      	ldr	r3, [pc, #640]	@ (800244c <Flashing_cal+0x598>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	2318      	movs	r3, #24
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	2300      	movs	r3, #0
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	2302      	movs	r3, #2
 80021e0:	2164      	movs	r1, #100	@ 0x64
 80021e2:	206e      	movs	r0, #110	@ 0x6e
 80021e4:	f7ff f9a0 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 80021e8:	4b99      	ldr	r3, [pc, #612]	@ (8002450 <Flashing_cal+0x59c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	2318      	movs	r3, #24
 80021f0:	9302      	str	r3, [sp, #8]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2302      	movs	r3, #2
 80021fe:	2164      	movs	r1, #100	@ 0x64
 8002200:	2096      	movs	r0, #150	@ 0x96
 8002202:	f7ff f991 	bl	8001528 <lcd_ShowIntNum>
		if (sta) {
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01d      	beq.n	8002248 <Flashing_cal+0x394>
			lcd_ShowIntNum(20, 130, cal_day, 2, YELLOW, BLACK, 24);
 800220c:	4b91      	ldr	r3, [pc, #580]	@ (8002454 <Flashing_cal+0x5a0>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	2318      	movs	r3, #24
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	2300      	movs	r3, #0
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2302      	movs	r3, #2
 8002222:	2182      	movs	r1, #130	@ 0x82
 8002224:	2014      	movs	r0, #20
 8002226:	f7ff f97f 	bl	8001528 <lcd_ShowIntNum>
			lcd_ShowIntNum(70, 130, cal_date, 2, YELLOW, BLACK, 24);
 800222a:	4b8b      	ldr	r3, [pc, #556]	@ (8002458 <Flashing_cal+0x5a4>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	2318      	movs	r3, #24
 8002232:	9302      	str	r3, [sp, #8]
 8002234:	2300      	movs	r3, #0
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2302      	movs	r3, #2
 8002240:	2182      	movs	r1, #130	@ 0x82
 8002242:	2046      	movs	r0, #70	@ 0x46
 8002244:	f7ff f970 	bl	8001528 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002248:	4b84      	ldr	r3, [pc, #528]	@ (800245c <Flashing_cal+0x5a8>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	2318      	movs	r3, #24
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	2300      	movs	r3, #0
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2302      	movs	r3, #2
 800225e:	2182      	movs	r1, #130	@ 0x82
 8002260:	206e      	movs	r0, #110	@ 0x6e
 8002262:	f7ff f961 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8002266:	4b7e      	ldr	r3, [pc, #504]	@ (8002460 <Flashing_cal+0x5ac>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	2318      	movs	r3, #24
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2302      	movs	r3, #2
 800227c:	2182      	movs	r1, #130	@ 0x82
 800227e:	2096      	movs	r0, #150	@ 0x96
 8002280:	f7ff f952 	bl	8001528 <lcd_ShowIntNum>
		break;
 8002284:	e0dc      	b.n	8002440 <Flashing_cal+0x58c>
	case 4:
		lcd_ShowIntNum(70, 100, cal_hour, 2, GREEN, BLACK, 24);
 8002286:	4b70      	ldr	r3, [pc, #448]	@ (8002448 <Flashing_cal+0x594>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	2318      	movs	r3, #24
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	2300      	movs	r3, #0
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2302      	movs	r3, #2
 800229c:	2164      	movs	r1, #100	@ 0x64
 800229e:	2046      	movs	r0, #70	@ 0x46
 80022a0:	f7ff f942 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 80022a4:	4b69      	ldr	r3, [pc, #420]	@ (800244c <Flashing_cal+0x598>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	2318      	movs	r3, #24
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	2300      	movs	r3, #0
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2302      	movs	r3, #2
 80022ba:	2164      	movs	r1, #100	@ 0x64
 80022bc:	206e      	movs	r0, #110	@ 0x6e
 80022be:	f7ff f933 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 80022c2:	4b63      	ldr	r3, [pc, #396]	@ (8002450 <Flashing_cal+0x59c>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	2318      	movs	r3, #24
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	2300      	movs	r3, #0
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2302      	movs	r3, #2
 80022d8:	2164      	movs	r1, #100	@ 0x64
 80022da:	2096      	movs	r0, #150	@ 0x96
 80022dc:	f7ff f924 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, cal_day, 2, YELLOW, BLACK, 24);
 80022e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002454 <Flashing_cal+0x5a0>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	2318      	movs	r3, #24
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	2300      	movs	r3, #0
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2302      	movs	r3, #2
 80022f6:	2182      	movs	r1, #130	@ 0x82
 80022f8:	2014      	movs	r0, #20
 80022fa:	f7ff f915 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, cal_date, 2, YELLOW, BLACK, 24);
 80022fe:	4b56      	ldr	r3, [pc, #344]	@ (8002458 <Flashing_cal+0x5a4>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	2318      	movs	r3, #24
 8002306:	9302      	str	r3, [sp, #8]
 8002308:	2300      	movs	r3, #0
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2302      	movs	r3, #2
 8002314:	2182      	movs	r1, #130	@ 0x82
 8002316:	2046      	movs	r0, #70	@ 0x46
 8002318:	f7ff f906 	bl	8001528 <lcd_ShowIntNum>
		if (sta)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00e      	beq.n	8002340 <Flashing_cal+0x48c>
			lcd_ShowIntNum(110, 130, cal_month, 2, YELLOW, BLACK, 24);
 8002322:	4b50      	ldr	r3, [pc, #320]	@ (8002464 <Flashing_cal+0x5b0>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	2318      	movs	r3, #24
 800232a:	9302      	str	r3, [sp, #8]
 800232c:	2300      	movs	r3, #0
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2302      	movs	r3, #2
 8002338:	2182      	movs	r1, #130	@ 0x82
 800233a:	206e      	movs	r0, #110	@ 0x6e
 800233c:	f7ff f8f4 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8002340:	4b47      	ldr	r3, [pc, #284]	@ (8002460 <Flashing_cal+0x5ac>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	2318      	movs	r3, #24
 8002348:	9302      	str	r3, [sp, #8]
 800234a:	2300      	movs	r3, #0
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2302      	movs	r3, #2
 8002356:	2182      	movs	r1, #130	@ 0x82
 8002358:	2096      	movs	r0, #150	@ 0x96
 800235a:	f7ff f8e5 	bl	8001528 <lcd_ShowIntNum>
		break;
 800235e:	e06f      	b.n	8002440 <Flashing_cal+0x58c>
	case 5:
		lcd_ShowIntNum(70, 100, cal_hour, 2, GREEN, BLACK, 24);
 8002360:	4b39      	ldr	r3, [pc, #228]	@ (8002448 <Flashing_cal+0x594>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	2318      	movs	r3, #24
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	2300      	movs	r3, #0
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2302      	movs	r3, #2
 8002376:	2164      	movs	r1, #100	@ 0x64
 8002378:	2046      	movs	r0, #70	@ 0x46
 800237a:	f7ff f8d5 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 800237e:	4b33      	ldr	r3, [pc, #204]	@ (800244c <Flashing_cal+0x598>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	2318      	movs	r3, #24
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	2300      	movs	r3, #0
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2302      	movs	r3, #2
 8002394:	2164      	movs	r1, #100	@ 0x64
 8002396:	206e      	movs	r0, #110	@ 0x6e
 8002398:	f7ff f8c6 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 800239c:	4b2c      	ldr	r3, [pc, #176]	@ (8002450 <Flashing_cal+0x59c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	2318      	movs	r3, #24
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2300      	movs	r3, #0
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2302      	movs	r3, #2
 80023b2:	2164      	movs	r1, #100	@ 0x64
 80023b4:	2096      	movs	r0, #150	@ 0x96
 80023b6:	f7ff f8b7 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, cal_day, 2, YELLOW, BLACK, 24);
 80023ba:	4b26      	ldr	r3, [pc, #152]	@ (8002454 <Flashing_cal+0x5a0>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	2318      	movs	r3, #24
 80023c2:	9302      	str	r3, [sp, #8]
 80023c4:	2300      	movs	r3, #0
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2302      	movs	r3, #2
 80023d0:	2182      	movs	r1, #130	@ 0x82
 80023d2:	2014      	movs	r0, #20
 80023d4:	f7ff f8a8 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, cal_date, 2, YELLOW, BLACK, 24);
 80023d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <Flashing_cal+0x5a4>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	2318      	movs	r3, #24
 80023e0:	9302      	str	r3, [sp, #8]
 80023e2:	2300      	movs	r3, #0
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2302      	movs	r3, #2
 80023ee:	2182      	movs	r1, #130	@ 0x82
 80023f0:	2046      	movs	r0, #70	@ 0x46
 80023f2:	f7ff f899 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, cal_month, 2, YELLOW, BLACK, 24);
 80023f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <Flashing_cal+0x5b0>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	2318      	movs	r3, #24
 80023fe:	9302      	str	r3, [sp, #8]
 8002400:	2300      	movs	r3, #0
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2302      	movs	r3, #2
 800240c:	2182      	movs	r1, #130	@ 0x82
 800240e:	206e      	movs	r0, #110	@ 0x6e
 8002410:	f7ff f88a 	bl	8001528 <lcd_ShowIntNum>
		if (sta)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d011      	beq.n	800243e <Flashing_cal+0x58a>
			lcd_ShowIntNum(150, 130, cal_year, 2, YELLOW, BLACK, 24);
 800241a:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <Flashing_cal+0x5b4>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	2318      	movs	r3, #24
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	2300      	movs	r3, #0
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2302      	movs	r3, #2
 8002430:	2182      	movs	r1, #130	@ 0x82
 8002432:	2096      	movs	r0, #150	@ 0x96
 8002434:	f7ff f878 	bl	8001528 <lcd_ShowIntNum>
		break;
 8002438:	e001      	b.n	800243e <Flashing_cal+0x58a>
	default:
		break;
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <Flashing_cal+0x58c>
		break;
 800243e:	bf00      	nop
	}
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000074 	.word	0x20000074
 800244c:	20000075 	.word	0x20000075
 8002450:	20000076 	.word	0x20000076
 8002454:	20000078 	.word	0x20000078
 8002458:	20000077 	.word	0x20000077
 800245c:	2000008c 	.word	0x2000008c
 8002460:	2000008d 	.word	0x2000008d
 8002464:	20000079 	.word	0x20000079
 8002468:	2000007a 	.word	0x2000007a

0800246c <Flashing_alarm>:
void Flashing_alarm(int sta){
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af04      	add	r7, sp, #16
 8002472:	6078      	str	r0, [r7, #4]
	lcd_Fill(0, 50, 200, 160, BLACK);
 8002474:	2300      	movs	r3, #0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	23a0      	movs	r3, #160	@ 0xa0
 800247a:	22c8      	movs	r2, #200	@ 0xc8
 800247c:	2132      	movs	r1, #50	@ 0x32
 800247e:	2000      	movs	r0, #0
 8002480:	f7fe ff18 	bl	80012b4 <lcd_Fill>
	switch (counter) {
 8002484:	4b52      	ldr	r3, [pc, #328]	@ (80025d0 <Flashing_alarm+0x164>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d069      	beq.n	8002560 <Flashing_alarm+0xf4>
 800248c:	2b02      	cmp	r3, #2
 800248e:	f300 8098 	bgt.w	80025c2 <Flashing_alarm+0x156>
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <Flashing_alarm+0x30>
 8002496:	2b01      	cmp	r3, #1
 8002498:	d031      	beq.n	80024fe <Flashing_alarm+0x92>
			lcd_ShowIntNum(70, 100, al_hours, 2, GREEN, BLACK, 24);
		lcd_ShowIntNum(110, 100, al_min, 2, GREEN, BLACK, 24);
		lcd_ShowIntNum(150, 100, al_sec, 2, GREEN, BLACK, 24);
		break;
	default:
		break;
 800249a:	e092      	b.n	80025c2 <Flashing_alarm+0x156>
		lcd_ShowIntNum(70, 100, al_hours, 2, GREEN, BLACK, 24);
 800249c:	4b4d      	ldr	r3, [pc, #308]	@ (80025d4 <Flashing_alarm+0x168>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	2318      	movs	r3, #24
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	2300      	movs	r3, #0
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2302      	movs	r3, #2
 80024b2:	2164      	movs	r1, #100	@ 0x64
 80024b4:	2046      	movs	r0, #70	@ 0x46
 80024b6:	f7ff f837 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, al_min, 2, GREEN, BLACK, 24);
 80024ba:	4b47      	ldr	r3, [pc, #284]	@ (80025d8 <Flashing_alarm+0x16c>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	2318      	movs	r3, #24
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2302      	movs	r3, #2
 80024d0:	2164      	movs	r1, #100	@ 0x64
 80024d2:	206e      	movs	r0, #110	@ 0x6e
 80024d4:	f7ff f828 	bl	8001528 <lcd_ShowIntNum>
		if (sta)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d073      	beq.n	80025c6 <Flashing_alarm+0x15a>
			lcd_ShowIntNum(150, 100, al_sec, 2, GREEN, BLACK, 24);
 80024de:	4b3f      	ldr	r3, [pc, #252]	@ (80025dc <Flashing_alarm+0x170>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	2318      	movs	r3, #24
 80024e6:	9302      	str	r3, [sp, #8]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2302      	movs	r3, #2
 80024f4:	2164      	movs	r1, #100	@ 0x64
 80024f6:	2096      	movs	r0, #150	@ 0x96
 80024f8:	f7ff f816 	bl	8001528 <lcd_ShowIntNum>
		break;
 80024fc:	e063      	b.n	80025c6 <Flashing_alarm+0x15a>
		lcd_ShowIntNum(70, 100, al_hours, 2, GREEN, BLACK, 24);
 80024fe:	4b35      	ldr	r3, [pc, #212]	@ (80025d4 <Flashing_alarm+0x168>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	2318      	movs	r3, #24
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	2300      	movs	r3, #0
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2302      	movs	r3, #2
 8002514:	2164      	movs	r1, #100	@ 0x64
 8002516:	2046      	movs	r0, #70	@ 0x46
 8002518:	f7ff f806 	bl	8001528 <lcd_ShowIntNum>
		if (sta)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00e      	beq.n	8002540 <Flashing_alarm+0xd4>
			lcd_ShowIntNum(110, 100, al_min, 2, GREEN, BLACK, 24);
 8002522:	4b2d      	ldr	r3, [pc, #180]	@ (80025d8 <Flashing_alarm+0x16c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	2318      	movs	r3, #24
 800252a:	9302      	str	r3, [sp, #8]
 800252c:	2300      	movs	r3, #0
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2302      	movs	r3, #2
 8002538:	2164      	movs	r1, #100	@ 0x64
 800253a:	206e      	movs	r0, #110	@ 0x6e
 800253c:	f7fe fff4 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, al_sec, 2, GREEN, BLACK, 24);
 8002540:	4b26      	ldr	r3, [pc, #152]	@ (80025dc <Flashing_alarm+0x170>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	2318      	movs	r3, #24
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	2300      	movs	r3, #0
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2302      	movs	r3, #2
 8002556:	2164      	movs	r1, #100	@ 0x64
 8002558:	2096      	movs	r0, #150	@ 0x96
 800255a:	f7fe ffe5 	bl	8001528 <lcd_ShowIntNum>
		break;
 800255e:	e033      	b.n	80025c8 <Flashing_alarm+0x15c>
		if (sta)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00e      	beq.n	8002584 <Flashing_alarm+0x118>
			lcd_ShowIntNum(70, 100, al_hours, 2, GREEN, BLACK, 24);
 8002566:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <Flashing_alarm+0x168>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	2318      	movs	r3, #24
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	2300      	movs	r3, #0
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2302      	movs	r3, #2
 800257c:	2164      	movs	r1, #100	@ 0x64
 800257e:	2046      	movs	r0, #70	@ 0x46
 8002580:	f7fe ffd2 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, al_min, 2, GREEN, BLACK, 24);
 8002584:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <Flashing_alarm+0x16c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	2318      	movs	r3, #24
 800258c:	9302      	str	r3, [sp, #8]
 800258e:	2300      	movs	r3, #0
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2302      	movs	r3, #2
 800259a:	2164      	movs	r1, #100	@ 0x64
 800259c:	206e      	movs	r0, #110	@ 0x6e
 800259e:	f7fe ffc3 	bl	8001528 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, al_sec, 2, GREEN, BLACK, 24);
 80025a2:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <Flashing_alarm+0x170>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	2318      	movs	r3, #24
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	2300      	movs	r3, #0
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2302      	movs	r3, #2
 80025b8:	2164      	movs	r1, #100	@ 0x64
 80025ba:	2096      	movs	r0, #150	@ 0x96
 80025bc:	f7fe ffb4 	bl	8001528 <lcd_ShowIntNum>
		break;
 80025c0:	e002      	b.n	80025c8 <Flashing_alarm+0x15c>
		break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <Flashing_alarm+0x15c>
		break;
 80025c6:	bf00      	nop
	}
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000006c 	.word	0x2000006c
 80025d4:	2000007b 	.word	0x2000007b
 80025d8:	2000007c 	.word	0x2000007c
 80025dc:	2000007d 	.word	0x2000007d

080025e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <Error_Handler+0x8>

080025ec <timer_init>:
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;
uint16_t flag_timer4 = 0;
uint16_t timer4_counter = 0;
uint16_t timer4_MUL = 0;
void timer_init(){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80025f0:	4802      	ldr	r0, [pc, #8]	@ (80025fc <timer_init+0x10>)
 80025f2:	f003 f991 	bl	8005918 <HAL_TIM_Base_Start_IT>
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200001b0 	.word	0x200001b0

08002600 <setTimer2>:

void setTimer2(uint16_t duration){
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800260a:	4a08      	ldr	r2, [pc, #32]	@ (800262c <setTimer2+0x2c>)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <setTimer2+0x2c>)
 8002612:	881a      	ldrh	r2, [r3, #0]
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <setTimer2+0x30>)
 8002616:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <setTimer2+0x34>)
 800261a:	2200      	movs	r2, #0
 800261c:	801a      	strh	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000148 	.word	0x20000148
 8002630:	20000146 	.word	0x20000146
 8002634:	20000144 	.word	0x20000144

08002638 <setTimer3>:
void setTimer3(uint16_t duration){
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8002642:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <setTimer3+0x2c>)
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <setTimer3+0x2c>)
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <setTimer3+0x30>)
 800264e:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <setTimer3+0x34>)
 8002652:	2200      	movs	r2, #0
 8002654:	801a      	strh	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	2000014e 	.word	0x2000014e
 8002668:	2000014c 	.word	0x2000014c
 800266c:	2000014a 	.word	0x2000014a

08002670 <setTimer4>:
void setTimer4(uint16_t duration){
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 800267a:	4a08      	ldr	r2, [pc, #32]	@ (800269c <setTimer4+0x2c>)
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <setTimer4+0x2c>)
 8002682:	881a      	ldrh	r2, [r3, #0]
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <setTimer4+0x30>)
 8002686:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <setTimer4+0x34>)
 800268a:	2200      	movs	r2, #0
 800268c:	801a      	strh	r2, [r3, #0]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000154 	.word	0x20000154
 80026a0:	20000152 	.word	0x20000152
 80026a4:	20000150 	.word	0x20000150

080026a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b8:	d140      	bne.n	800273c <HAL_TIM_PeriodElapsedCallback+0x94>
		if (timer2_counter > 0) {
 80026ba:	4b22      	ldr	r3, [pc, #136]	@ (8002744 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d010      	beq.n	80026e4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80026c2:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002744 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80026cc:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 80026ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80026d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80026d8:	2201      	movs	r2, #1
 80026da:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80026de:	881a      	ldrh	r2, [r3, #0]
 80026e0:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80026e2:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer3_counter > 0) {
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d010      	beq.n	800270e <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 80026ec:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80026f6:	801a      	strh	r2, [r3, #0]
			if (timer3_counter == 0) {
 80026f8:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8002700:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002702:	2201      	movs	r2, #1
 8002704:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8002706:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800270c:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer4_counter > 0) {
 800270e:	4b13      	ldr	r3, [pc, #76]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d010      	beq.n	8002738 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8002716:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b0f      	ldr	r3, [pc, #60]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002720:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 8002722:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800272c:	2201      	movs	r2, #1
 800272e:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002732:	881a      	ldrh	r2, [r3, #0]
 8002734:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002736:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002738:	f7ff f99a 	bl	8001a70 <led7_Scan>
	}
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000146 	.word	0x20000146
 8002748:	20000144 	.word	0x20000144
 800274c:	20000148 	.word	0x20000148
 8002750:	2000014c 	.word	0x2000014c
 8002754:	2000014a 	.word	0x2000014a
 8002758:	2000014e 	.word	0x2000014e
 800275c:	20000152 	.word	0x20000152
 8002760:	20000150 	.word	0x20000150
 8002764:	20000154 	.word	0x20000154

08002768 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800276c:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <MX_SPI1_Init+0x64>)
 800276e:	4a18      	ldr	r2, [pc, #96]	@ (80027d0 <MX_SPI1_Init+0x68>)
 8002770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002772:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <MX_SPI1_Init+0x64>)
 8002774:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <MX_SPI1_Init+0x64>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <MX_SPI1_Init+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <MX_SPI1_Init+0x64>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <MX_SPI1_Init+0x64>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <MX_SPI1_Init+0x64>)
 8002794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002798:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <MX_SPI1_Init+0x64>)
 800279c:	2200      	movs	r2, #0
 800279e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027a0:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <MX_SPI1_Init+0x64>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <MX_SPI1_Init+0x64>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <MX_SPI1_Init+0x64>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <MX_SPI1_Init+0x64>)
 80027b4:	220a      	movs	r2, #10
 80027b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027b8:	4804      	ldr	r0, [pc, #16]	@ (80027cc <MX_SPI1_Init+0x64>)
 80027ba:	f002 fa71 	bl	8004ca0 <HAL_SPI_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027c4:	f7ff ff0c 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000158 	.word	0x20000158
 80027d0:	40013000 	.word	0x40013000

080027d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	@ 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	@ (8002858 <HAL_SPI_MspInit+0x84>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d12b      	bne.n	800284e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b18      	ldr	r3, [pc, #96]	@ (800285c <HAL_SPI_MspInit+0x88>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	4a17      	ldr	r2, [pc, #92]	@ (800285c <HAL_SPI_MspInit+0x88>)
 8002800:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002804:	6453      	str	r3, [r2, #68]	@ 0x44
 8002806:	4b15      	ldr	r3, [pc, #84]	@ (800285c <HAL_SPI_MspInit+0x88>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_SPI_MspInit+0x88>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a10      	ldr	r2, [pc, #64]	@ (800285c <HAL_SPI_MspInit+0x88>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <HAL_SPI_MspInit+0x88>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800282e:	2338      	movs	r3, #56	@ 0x38
 8002830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800283e:	2305      	movs	r3, #5
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	4805      	ldr	r0, [pc, #20]	@ (8002860 <HAL_SPI_MspInit+0x8c>)
 800284a:	f000 fb01 	bl	8002e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800284e:	bf00      	nop
 8002850:	3728      	adds	r7, #40	@ 0x28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40013000 	.word	0x40013000
 800285c:	40023800 	.word	0x40023800
 8002860:	40020400 	.word	0x40020400

08002864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_MspInit+0x4c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	4a0f      	ldr	r2, [pc, #60]	@ (80028b0 <HAL_MspInit+0x4c>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002878:	6453      	str	r3, [r2, #68]	@ 0x44
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <HAL_MspInit+0x4c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <HAL_MspInit+0x4c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	4a08      	ldr	r2, [pc, #32]	@ (80028b0 <HAL_MspInit+0x4c>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002894:	6413      	str	r3, [r2, #64]	@ 0x40
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_MspInit+0x4c>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800

080028b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <NMI_Handler+0x4>

080028bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <HardFault_Handler+0x4>

080028c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <MemManage_Handler+0x4>

080028cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <UsageFault_Handler+0x4>

080028dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800290a:	f000 f94b 	bl	8002ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002918:	4802      	ldr	r0, [pc, #8]	@ (8002924 <TIM2_IRQHandler+0x10>)
 800291a:	f003 f86d 	bl	80059f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200001b0 	.word	0x200001b0

08002928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <SystemInit+0x20>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	4a05      	ldr	r2, [pc, #20]	@ (8002948 <SystemInit+0x20>)
 8002934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002960:	463b      	mov	r3, r7
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002968:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <MX_TIM2_Init+0x94>)
 800296a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800296e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <MX_TIM2_Init+0x94>)
 8002972:	f240 3247 	movw	r2, #839	@ 0x347
 8002976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002978:	4b19      	ldr	r3, [pc, #100]	@ (80029e0 <MX_TIM2_Init+0x94>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800297e:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <MX_TIM2_Init+0x94>)
 8002980:	2263      	movs	r2, #99	@ 0x63
 8002982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002984:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <MX_TIM2_Init+0x94>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <MX_TIM2_Init+0x94>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002990:	4813      	ldr	r0, [pc, #76]	@ (80029e0 <MX_TIM2_Init+0x94>)
 8002992:	f002 ff71 	bl	8005878 <HAL_TIM_Base_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800299c:	f7ff fe20 	bl	80025e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029a6:	f107 0308 	add.w	r3, r7, #8
 80029aa:	4619      	mov	r1, r3
 80029ac:	480c      	ldr	r0, [pc, #48]	@ (80029e0 <MX_TIM2_Init+0x94>)
 80029ae:	f003 f92b 	bl	8005c08 <HAL_TIM_ConfigClockSource>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029b8:	f7ff fe12 	bl	80025e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029bc:	2300      	movs	r3, #0
 80029be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c4:	463b      	mov	r3, r7
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <MX_TIM2_Init+0x94>)
 80029ca:	f003 fb47 	bl	800605c <HAL_TIMEx_MasterConfigSynchronization>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029d4:	f7ff fe04 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200001b0 	.word	0x200001b0

080029e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f4:	d115      	bne.n	8002a22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <HAL_TIM_Base_MspInit+0x48>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	4a0b      	ldr	r2, [pc, #44]	@ (8002a2c <HAL_TIM_Base_MspInit+0x48>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a06:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <HAL_TIM_Base_MspInit+0x48>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	201c      	movs	r0, #28
 8002a18:	f000 f9e3 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a1c:	201c      	movs	r0, #28
 8002a1e:	f000 f9fc 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800

08002a30 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	b2db      	uxtb	r3, r3
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <DEC2BCD+0x44>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	08db      	lsrs	r3, r3, #3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	b258      	sxtb	r0, r3
 8002a7e:	79fa      	ldrb	r2, [r7, #7]
 8002a80:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <DEC2BCD+0x44>)
 8002a82:	fba3 1302 	umull	r1, r3, r3, r2
 8002a86:	08d9      	lsrs	r1, r3, #3
 8002a88:	460b      	mov	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	4303      	orrs	r3, r0
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	cccccccd 	.word	0xcccccccd

08002aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ab0:	480d      	ldr	r0, [pc, #52]	@ (8002ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ab2:	490e      	ldr	r1, [pc, #56]	@ (8002aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8002af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab8:	e002      	b.n	8002ac0 <LoopCopyDataInit>

08002aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002abe:	3304      	adds	r3, #4

08002ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac4:	d3f9      	bcc.n	8002aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8002af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ac8:	4c0b      	ldr	r4, [pc, #44]	@ (8002af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002acc:	e001      	b.n	8002ad2 <LoopFillZerobss>

08002ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad0:	3204      	adds	r2, #4

08002ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad4:	d3fb      	bcc.n	8002ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ad6:	f7ff ff27 	bl	8002928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ada:	f003 fc37 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ade:	f7ff f853 	bl	8001b88 <main>
  bx  lr    
 8002ae2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aec:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002af0:	080093b0 	.word	0x080093b0
  ldr r2, =_sbss
 8002af4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8002af8:	200001fc 	.word	0x200001fc

08002afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002afc:	e7fe      	b.n	8002afc <ADC_IRQHandler>
	...

08002b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b04:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	@ (8002b40 <HAL_Init+0x40>)
 8002b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_Init+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <HAL_Init+0x40>)
 8002b16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b1c:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <HAL_Init+0x40>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b28:	2003      	movs	r0, #3
 8002b2a:	f000 f94f 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b2e:	200f      	movs	r0, #15
 8002b30:	f000 f808 	bl	8002b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b34:	f7ff fe96 	bl	8002864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00

08002b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b4c:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_InitTick+0x54>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_InitTick+0x58>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f967 	bl	8002e36 <HAL_SYSTICK_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00e      	b.n	8002b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	d80a      	bhi.n	8002b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	f000 f92f 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b84:	4a06      	ldr	r2, [pc, #24]	@ (8002ba0 <HAL_InitTick+0x5c>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000020 	.word	0x20000020
 8002b9c:	20000028 	.word	0x20000028
 8002ba0:	20000024 	.word	0x20000024

08002ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <HAL_IncTick+0x20>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_IncTick+0x24>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <HAL_IncTick+0x24>)
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000028 	.word	0x20000028
 8002bc8:	200001f8 	.word	0x200001f8

08002bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	@ (8002be0 <HAL_GetTick+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	200001f8 	.word	0x200001f8

08002be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff ffee 	bl	8002bcc <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d005      	beq.n	8002c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <HAL_Delay+0x44>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c0a:	bf00      	nop
 8002c0c:	f7ff ffde 	bl	8002bcc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d8f7      	bhi.n	8002c0c <HAL_Delay+0x28>
  {
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000028 	.word	0x20000028

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	@ (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	@ (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	@ (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	@ 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff3e 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff8e 	bl	8002d20 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5d 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff31 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffa2 	bl	8002d88 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	@ 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e16b      	b.n	8003144 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 815a 	bne.w	800313e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d005      	beq.n	8002ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d130      	bne.n	8002f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 0201 	and.w	r2, r3, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d017      	beq.n	8002f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d123      	bne.n	8002f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	08da      	lsrs	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0203 	and.w	r2, r3, #3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80b4 	beq.w	800313e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b60      	ldr	r3, [pc, #384]	@ (800315c <HAL_GPIO_Init+0x30c>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	4a5f      	ldr	r2, [pc, #380]	@ (800315c <HAL_GPIO_Init+0x30c>)
 8002fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	@ (800315c <HAL_GPIO_Init+0x30c>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff2:	4a5b      	ldr	r2, [pc, #364]	@ (8003160 <HAL_GPIO_Init+0x310>)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a52      	ldr	r2, [pc, #328]	@ (8003164 <HAL_GPIO_Init+0x314>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d02b      	beq.n	8003076 <HAL_GPIO_Init+0x226>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a51      	ldr	r2, [pc, #324]	@ (8003168 <HAL_GPIO_Init+0x318>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d025      	beq.n	8003072 <HAL_GPIO_Init+0x222>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a50      	ldr	r2, [pc, #320]	@ (800316c <HAL_GPIO_Init+0x31c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01f      	beq.n	800306e <HAL_GPIO_Init+0x21e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4f      	ldr	r2, [pc, #316]	@ (8003170 <HAL_GPIO_Init+0x320>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d019      	beq.n	800306a <HAL_GPIO_Init+0x21a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4e      	ldr	r2, [pc, #312]	@ (8003174 <HAL_GPIO_Init+0x324>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_GPIO_Init+0x216>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4d      	ldr	r2, [pc, #308]	@ (8003178 <HAL_GPIO_Init+0x328>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00d      	beq.n	8003062 <HAL_GPIO_Init+0x212>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4c      	ldr	r2, [pc, #304]	@ (800317c <HAL_GPIO_Init+0x32c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <HAL_GPIO_Init+0x20e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4b      	ldr	r2, [pc, #300]	@ (8003180 <HAL_GPIO_Init+0x330>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_GPIO_Init+0x20a>
 8003056:	2307      	movs	r3, #7
 8003058:	e00e      	b.n	8003078 <HAL_GPIO_Init+0x228>
 800305a:	2308      	movs	r3, #8
 800305c:	e00c      	b.n	8003078 <HAL_GPIO_Init+0x228>
 800305e:	2306      	movs	r3, #6
 8003060:	e00a      	b.n	8003078 <HAL_GPIO_Init+0x228>
 8003062:	2305      	movs	r3, #5
 8003064:	e008      	b.n	8003078 <HAL_GPIO_Init+0x228>
 8003066:	2304      	movs	r3, #4
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x228>
 800306a:	2303      	movs	r3, #3
 800306c:	e004      	b.n	8003078 <HAL_GPIO_Init+0x228>
 800306e:	2302      	movs	r3, #2
 8003070:	e002      	b.n	8003078 <HAL_GPIO_Init+0x228>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x228>
 8003076:	2300      	movs	r3, #0
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f002 0203 	and.w	r2, r2, #3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4093      	lsls	r3, r2
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003088:	4935      	ldr	r1, [pc, #212]	@ (8003160 <HAL_GPIO_Init+0x310>)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003096:	4b3b      	ldr	r3, [pc, #236]	@ (8003184 <HAL_GPIO_Init+0x334>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ba:	4a32      	ldr	r2, [pc, #200]	@ (8003184 <HAL_GPIO_Init+0x334>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030c0:	4b30      	ldr	r3, [pc, #192]	@ (8003184 <HAL_GPIO_Init+0x334>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030e4:	4a27      	ldr	r2, [pc, #156]	@ (8003184 <HAL_GPIO_Init+0x334>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ea:	4b26      	ldr	r3, [pc, #152]	@ (8003184 <HAL_GPIO_Init+0x334>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800310e:	4a1d      	ldr	r2, [pc, #116]	@ (8003184 <HAL_GPIO_Init+0x334>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003114:	4b1b      	ldr	r3, [pc, #108]	@ (8003184 <HAL_GPIO_Init+0x334>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003138:	4a12      	ldr	r2, [pc, #72]	@ (8003184 <HAL_GPIO_Init+0x334>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b0f      	cmp	r3, #15
 8003148:	f67f ae90 	bls.w	8002e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3724      	adds	r7, #36	@ 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	40013800 	.word	0x40013800
 8003164:	40020000 	.word	0x40020000
 8003168:	40020400 	.word	0x40020400
 800316c:	40020800 	.word	0x40020800
 8003170:	40020c00 	.word	0x40020c00
 8003174:	40021000 	.word	0x40021000
 8003178:	40021400 	.word	0x40021400
 800317c:	40021800 	.word	0x40021800
 8003180:	40021c00 	.word	0x40021c00
 8003184:	40013c00 	.word	0x40013c00

08003188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
 8003194:	4613      	mov	r3, r2
 8003196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003198:	787b      	ldrb	r3, [r7, #1]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031a4:	e003      	b.n	80031ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	041a      	lsls	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	619a      	str	r2, [r3, #24]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e12b      	b.n	8003426 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fd ff66 	bl	80010b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2224      	movs	r2, #36	@ 0x24
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800320e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800321e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003220:	f001 fd2a 	bl	8004c78 <HAL_RCC_GetPCLK1Freq>
 8003224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4a81      	ldr	r2, [pc, #516]	@ (8003430 <HAL_I2C_Init+0x274>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d807      	bhi.n	8003240 <HAL_I2C_Init+0x84>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4a80      	ldr	r2, [pc, #512]	@ (8003434 <HAL_I2C_Init+0x278>)
 8003234:	4293      	cmp	r3, r2
 8003236:	bf94      	ite	ls
 8003238:	2301      	movls	r3, #1
 800323a:	2300      	movhi	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	e006      	b.n	800324e <HAL_I2C_Init+0x92>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a7d      	ldr	r2, [pc, #500]	@ (8003438 <HAL_I2C_Init+0x27c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	bf94      	ite	ls
 8003248:	2301      	movls	r3, #1
 800324a:	2300      	movhi	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0e7      	b.n	8003426 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a78      	ldr	r2, [pc, #480]	@ (800343c <HAL_I2C_Init+0x280>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0c9b      	lsrs	r3, r3, #18
 8003260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a6a      	ldr	r2, [pc, #424]	@ (8003430 <HAL_I2C_Init+0x274>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d802      	bhi.n	8003290 <HAL_I2C_Init+0xd4>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3301      	adds	r3, #1
 800328e:	e009      	b.n	80032a4 <HAL_I2C_Init+0xe8>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	4a69      	ldr	r2, [pc, #420]	@ (8003440 <HAL_I2C_Init+0x284>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	099b      	lsrs	r3, r3, #6
 80032a2:	3301      	adds	r3, #1
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	495c      	ldr	r1, [pc, #368]	@ (8003430 <HAL_I2C_Init+0x274>)
 80032c0:	428b      	cmp	r3, r1
 80032c2:	d819      	bhi.n	80032f8 <HAL_I2C_Init+0x13c>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e59      	subs	r1, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d2:	1c59      	adds	r1, r3, #1
 80032d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032d8:	400b      	ands	r3, r1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_I2C_Init+0x138>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1e59      	subs	r1, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f2:	e051      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 80032f4:	2304      	movs	r3, #4
 80032f6:	e04f      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d111      	bne.n	8003324 <HAL_I2C_Init+0x168>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1e58      	subs	r0, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	440b      	add	r3, r1
 800330e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e012      	b.n	800334a <HAL_I2C_Init+0x18e>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1e58      	subs	r0, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	0099      	lsls	r1, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	fbb0 f3f3 	udiv	r3, r0, r3
 800333a:	3301      	adds	r3, #1
 800333c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Init+0x196>
 800334e:	2301      	movs	r3, #1
 8003350:	e022      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10e      	bne.n	8003378 <HAL_I2C_Init+0x1bc>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1e58      	subs	r0, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	440b      	add	r3, r1
 8003368:	fbb0 f3f3 	udiv	r3, r0, r3
 800336c:	3301      	adds	r3, #1
 800336e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003376:	e00f      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1e58      	subs	r0, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	0099      	lsls	r1, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	fbb0 f3f3 	udiv	r3, r0, r3
 800338e:	3301      	adds	r3, #1
 8003390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003394:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	6809      	ldr	r1, [r1, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6911      	ldr	r1, [r2, #16]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	4311      	orrs	r1, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	430b      	orrs	r3, r1
 80033da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	000186a0 	.word	0x000186a0
 8003434:	001e847f 	.word	0x001e847f
 8003438:	003d08ff 	.word	0x003d08ff
 800343c:	431bde83 	.word	0x431bde83
 8003440:	10624dd3 	.word	0x10624dd3

08003444 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	4603      	mov	r3, r0
 8003454:	817b      	strh	r3, [r7, #10]
 8003456:	460b      	mov	r3, r1
 8003458:	813b      	strh	r3, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800345e:	f7ff fbb5 	bl	8002bcc <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b20      	cmp	r3, #32
 800346e:	f040 80d9 	bne.w	8003624 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	2319      	movs	r3, #25
 8003478:	2201      	movs	r2, #1
 800347a:	496d      	ldr	r1, [pc, #436]	@ (8003630 <HAL_I2C_Mem_Write+0x1ec>)
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fdad 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
 800348a:	e0cc      	b.n	8003626 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_I2C_Mem_Write+0x56>
 8003496:	2302      	movs	r3, #2
 8003498:	e0c5      	b.n	8003626 <HAL_I2C_Mem_Write+0x1e2>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d007      	beq.n	80034c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2221      	movs	r2, #33	@ 0x21
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2240      	movs	r2, #64	@ 0x40
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a4d      	ldr	r2, [pc, #308]	@ (8003634 <HAL_I2C_Mem_Write+0x1f0>)
 8003500:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003502:	88f8      	ldrh	r0, [r7, #6]
 8003504:	893a      	ldrh	r2, [r7, #8]
 8003506:	8979      	ldrh	r1, [r7, #10]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	4603      	mov	r3, r0
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fbe4 	bl	8003ce0 <I2C_RequestMemoryWrite>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d052      	beq.n	80035c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e081      	b.n	8003626 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fe2e 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	2b04      	cmp	r3, #4
 8003538:	d107      	bne.n	800354a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e06b      	b.n	8003626 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d11b      	bne.n	80035c4 <HAL_I2C_Mem_Write+0x180>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d017      	beq.n	80035c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1aa      	bne.n	8003522 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fe1a 	bl	800420a <I2C_WaitOnBTFFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00d      	beq.n	80035f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d107      	bne.n	80035f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e016      	b.n	8003626 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	00100002 	.word	0x00100002
 8003634:	ffff0000 	.word	0xffff0000

08003638 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08c      	sub	sp, #48	@ 0x30
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	4608      	mov	r0, r1
 8003642:	4611      	mov	r1, r2
 8003644:	461a      	mov	r2, r3
 8003646:	4603      	mov	r3, r0
 8003648:	817b      	strh	r3, [r7, #10]
 800364a:	460b      	mov	r3, r1
 800364c:	813b      	strh	r3, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003652:	f7ff fabb 	bl	8002bcc <HAL_GetTick>
 8003656:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b20      	cmp	r3, #32
 8003662:	f040 8208 	bne.w	8003a76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2319      	movs	r3, #25
 800366c:	2201      	movs	r2, #1
 800366e:	497b      	ldr	r1, [pc, #492]	@ (800385c <HAL_I2C_Mem_Read+0x224>)
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fcb3 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
 800367e:	e1fb      	b.n	8003a78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_I2C_Mem_Read+0x56>
 800368a:	2302      	movs	r3, #2
 800368c:	e1f4      	b.n	8003a78 <HAL_I2C_Mem_Read+0x440>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d007      	beq.n	80036b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2222      	movs	r2, #34	@ 0x22
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2240      	movs	r2, #64	@ 0x40
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80036e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003860 <HAL_I2C_Mem_Read+0x228>)
 80036f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036f6:	88f8      	ldrh	r0, [r7, #6]
 80036f8:	893a      	ldrh	r2, [r7, #8]
 80036fa:	8979      	ldrh	r1, [r7, #10]
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	4603      	mov	r3, r0
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fb80 	bl	8003e0c <I2C_RequestMemoryRead>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e1b0      	b.n	8003a78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371a:	2b00      	cmp	r3, #0
 800371c:	d113      	bne.n	8003746 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	623b      	str	r3, [r7, #32]
 8003732:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e184      	b.n	8003a50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374a:	2b01      	cmp	r3, #1
 800374c:	d11b      	bne.n	8003786 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800375c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e164      	b.n	8003a50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	2b02      	cmp	r3, #2
 800378c:	d11b      	bne.n	80037c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800379c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	e144      	b.n	8003a50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037dc:	e138      	b.n	8003a50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	f200 80f1 	bhi.w	80039ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d123      	bne.n	8003838 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fd49 	bl	800428c <I2C_WaitOnRXNEFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e139      	b.n	8003a78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003836:	e10b      	b.n	8003a50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383c:	2b02      	cmp	r3, #2
 800383e:	d14e      	bne.n	80038de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003846:	2200      	movs	r2, #0
 8003848:	4906      	ldr	r1, [pc, #24]	@ (8003864 <HAL_I2C_Mem_Read+0x22c>)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fbc6 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e10e      	b.n	8003a78 <HAL_I2C_Mem_Read+0x440>
 800385a:	bf00      	nop
 800385c:	00100002 	.word	0x00100002
 8003860:	ffff0000 	.word	0xffff0000
 8003864:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038dc:	e0b8      	b.n	8003a50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e4:	2200      	movs	r2, #0
 80038e6:	4966      	ldr	r1, [pc, #408]	@ (8003a80 <HAL_I2C_Mem_Read+0x448>)
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fb77 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0bf      	b.n	8003a78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003940:	2200      	movs	r2, #0
 8003942:	494f      	ldr	r1, [pc, #316]	@ (8003a80 <HAL_I2C_Mem_Read+0x448>)
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fb49 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e091      	b.n	8003a78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039c8:	e042      	b.n	8003a50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fc5c 	bl	800428c <I2C_WaitOnRXNEFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e04c      	b.n	8003a78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d118      	bne.n	8003a50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f47f aec2 	bne.w	80037de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e000      	b.n	8003a78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3728      	adds	r7, #40	@ 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	00010004 	.word	0x00010004

08003a84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	@ 0x28
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	460b      	mov	r3, r1
 8003a92:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a94:	f7ff f89a 	bl	8002bcc <HAL_GetTick>
 8003a98:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	f040 8111 	bne.w	8003cce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2319      	movs	r3, #25
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4988      	ldr	r1, [pc, #544]	@ (8003cd8 <HAL_I2C_IsDeviceReady+0x254>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa90 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e104      	b.n	8003cd0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_I2C_IsDeviceReady+0x50>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e0fd      	b.n	8003cd0 <HAL_I2C_IsDeviceReady+0x24c>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d007      	beq.n	8003afa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2224      	movs	r2, #36	@ 0x24
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a70      	ldr	r2, [pc, #448]	@ (8003cdc <HAL_I2C_IsDeviceReady+0x258>)
 8003b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fa4e 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b54:	d103      	bne.n	8003b5e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b5c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e0b6      	b.n	8003cd0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b70:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b72:	f7ff f82b 	bl	8002bcc <HAL_GetTick>
 8003b76:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	bf0c      	ite	eq
 8003b86:	2301      	moveq	r3, #1
 8003b88:	2300      	movne	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ba6:	e025      	b.n	8003bf4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ba8:	f7ff f810 	bl	8002bcc <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d302      	bcc.n	8003bbe <HAL_I2C_IsDeviceReady+0x13a>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	22a0      	movs	r2, #160	@ 0xa0
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bfe:	d005      	beq.n	8003c0c <HAL_I2C_IsDeviceReady+0x188>
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <HAL_I2C_IsDeviceReady+0x188>
 8003c06:	7dbb      	ldrb	r3, [r7, #22]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0cd      	beq.n	8003ba8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d129      	bne.n	8003c76 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c30:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2319      	movs	r3, #25
 8003c4e:	2201      	movs	r2, #1
 8003c50:	4921      	ldr	r1, [pc, #132]	@ (8003cd8 <HAL_I2C_IsDeviceReady+0x254>)
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f9c2 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e036      	b.n	8003cd0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e02c      	b.n	8003cd0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c84:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c8e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2319      	movs	r3, #25
 8003c96:	2201      	movs	r2, #1
 8003c98:	490f      	ldr	r1, [pc, #60]	@ (8003cd8 <HAL_I2C_IsDeviceReady+0x254>)
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f99e 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e012      	b.n	8003cd0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3301      	adds	r3, #1
 8003cae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	f4ff af32 	bcc.w	8003b1e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
  }
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	00100002 	.word	0x00100002
 8003cdc:	ffff0000 	.word	0xffff0000

08003ce0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	461a      	mov	r2, r3
 8003cee:	4603      	mov	r3, r0
 8003cf0:	817b      	strh	r3, [r7, #10]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	813b      	strh	r3, [r7, #8]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f960 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d30:	d103      	bne.n	8003d3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e05f      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d3e:	897b      	ldrh	r3, [r7, #10]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	6a3a      	ldr	r2, [r7, #32]
 8003d52:	492d      	ldr	r1, [pc, #180]	@ (8003e08 <I2C_RequestMemoryWrite+0x128>)
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f998 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e04c      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7c:	6a39      	ldr	r1, [r7, #32]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fa02 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d107      	bne.n	8003da2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e02b      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	611a      	str	r2, [r3, #16]
 8003db6:	e021      	b.n	8003dfc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003db8:	893b      	ldrh	r3, [r7, #8]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc8:	6a39      	ldr	r1, [r7, #32]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f9dc 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e005      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df2:	893b      	ldrh	r3, [r7, #8]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	00010002 	.word	0x00010002

08003e0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	817b      	strh	r3, [r7, #10]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	813b      	strh	r3, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f8c2 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6c:	d103      	bne.n	8003e76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e0aa      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e7a:	897b      	ldrh	r3, [r7, #10]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	4952      	ldr	r1, [pc, #328]	@ (8003fd8 <I2C_RequestMemoryRead+0x1cc>)
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f8fa 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e097      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb8:	6a39      	ldr	r1, [r7, #32]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f964 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d107      	bne.n	8003ede <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e076      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee8:	893b      	ldrh	r3, [r7, #8]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]
 8003ef2:	e021      	b.n	8003f38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef4:	893b      	ldrh	r3, [r7, #8]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f93e 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e050      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2e:	893b      	ldrh	r3, [r7, #8]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f3a:	6a39      	ldr	r1, [r7, #32]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f923 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00d      	beq.n	8003f64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d107      	bne.n	8003f60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e035      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f82b 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f9a:	d103      	bne.n	8003fa4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fa2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e013      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fa8:	897b      	ldrh	r3, [r7, #10]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	6a3a      	ldr	r2, [r7, #32]
 8003fbc:	4906      	ldr	r1, [pc, #24]	@ (8003fd8 <I2C_RequestMemoryRead+0x1cc>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f863 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	00010002 	.word	0x00010002

08003fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fec:	e025      	b.n	800403a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d021      	beq.n	800403a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7fe fde9 	bl	8002bcc <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d302      	bcc.n	800400c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d116      	bne.n	800403a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	f043 0220 	orr.w	r2, r3, #32
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e023      	b.n	8004082 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d10d      	bne.n	8004060 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	43da      	mvns	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	e00c      	b.n	800407a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d0b6      	beq.n	8003fee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004098:	e051      	b.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a8:	d123      	bne.n	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	f043 0204 	orr.w	r2, r3, #4
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e046      	b.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d021      	beq.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fe fd67 	bl	8002bcc <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d116      	bne.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e020      	b.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d10c      	bne.n	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	43da      	mvns	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e00b      	b.n	800417a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	43da      	mvns	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4013      	ands	r3, r2
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d18d      	bne.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004194:	e02d      	b.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f8ce 	bl	8004338 <I2C_IsAcknowledgeFailed>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e02d      	b.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d021      	beq.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fe fd0d 	bl	8002bcc <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d116      	bne.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e007      	b.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fc:	2b80      	cmp	r3, #128	@ 0x80
 80041fe:	d1ca      	bne.n	8004196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004216:	e02d      	b.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f88d 	bl	8004338 <I2C_IsAcknowledgeFailed>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e02d      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d021      	beq.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004230:	f7fe fccc 	bl	8002bcc <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d116      	bne.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e007      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d1ca      	bne.n	8004218 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004298:	e042      	b.n	8004320 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d119      	bne.n	80042dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0210 	mvn.w	r2, #16
 80042b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e029      	b.n	8004330 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042dc:	f7fe fc76 	bl	8002bcc <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d116      	bne.n	8004320 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430c:	f043 0220 	orr.w	r2, r3, #32
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e007      	b.n	8004330 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432a:	2b40      	cmp	r3, #64	@ 0x40
 800432c:	d1b5      	bne.n	800429a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434e:	d11b      	bne.n	8004388 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004358:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	f043 0204 	orr.w	r2, r3, #4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e267      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d075      	beq.n	80044a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b6:	4b88      	ldr	r3, [pc, #544]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d00c      	beq.n	80043dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c2:	4b85      	ldr	r3, [pc, #532]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d112      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ce:	4b82      	ldr	r3, [pc, #520]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043da:	d10b      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	4b7e      	ldr	r3, [pc, #504]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d05b      	beq.n	80044a0 <HAL_RCC_OscConfig+0x108>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d157      	bne.n	80044a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e242      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043fc:	d106      	bne.n	800440c <HAL_RCC_OscConfig+0x74>
 80043fe:	4b76      	ldr	r3, [pc, #472]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a75      	ldr	r2, [pc, #468]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e01d      	b.n	8004448 <HAL_RCC_OscConfig+0xb0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0x98>
 8004416:	4b70      	ldr	r3, [pc, #448]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a6f      	ldr	r2, [pc, #444]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 800441c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b6d      	ldr	r3, [pc, #436]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6c      	ldr	r2, [pc, #432]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e00b      	b.n	8004448 <HAL_RCC_OscConfig+0xb0>
 8004430:	4b69      	ldr	r3, [pc, #420]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a68      	ldr	r2, [pc, #416]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b66      	ldr	r3, [pc, #408]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a65      	ldr	r2, [pc, #404]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fe fbbc 	bl	8002bcc <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fe fbb8 	bl	8002bcc <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	@ 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e207      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b5b      	ldr	r3, [pc, #364]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0xc0>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fe fba8 	bl	8002bcc <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004480:	f7fe fba4 	bl	8002bcc <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	@ 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e1f3      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	4b51      	ldr	r3, [pc, #324]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0xe8>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d063      	beq.n	8004576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ae:	4b4a      	ldr	r3, [pc, #296]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ba:	4b47      	ldr	r3, [pc, #284]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d11c      	bne.n	8004500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b44      	ldr	r3, [pc, #272]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	4b41      	ldr	r3, [pc, #260]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCC_OscConfig+0x152>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e1c7      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	4b3b      	ldr	r3, [pc, #236]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4937      	ldr	r1, [pc, #220]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	e03a      	b.n	8004576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004508:	4b34      	ldr	r3, [pc, #208]	@ (80045dc <HAL_RCC_OscConfig+0x244>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fe fb5d 	bl	8002bcc <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004516:	f7fe fb59 	bl	8002bcc <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e1a8      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004528:	4b2b      	ldr	r3, [pc, #172]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b28      	ldr	r3, [pc, #160]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4925      	ldr	r1, [pc, #148]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
 8004548:	e015      	b.n	8004576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454a:	4b24      	ldr	r3, [pc, #144]	@ (80045dc <HAL_RCC_OscConfig+0x244>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fe fb3c 	bl	8002bcc <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004558:	f7fe fb38 	bl	8002bcc <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e187      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	4b1b      	ldr	r3, [pc, #108]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d036      	beq.n	80045f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458a:	4b15      	ldr	r3, [pc, #84]	@ (80045e0 <HAL_RCC_OscConfig+0x248>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fe fb1c 	bl	8002bcc <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004598:	f7fe fb18 	bl	8002bcc <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e167      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045aa:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <HAL_RCC_OscConfig+0x240>)
 80045ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x200>
 80045b6:	e01b      	b.n	80045f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b8:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <HAL_RCC_OscConfig+0x248>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045be:	f7fe fb05 	bl	8002bcc <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	e00e      	b.n	80045e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c6:	f7fe fb01 	bl	8002bcc <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d907      	bls.n	80045e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e150      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
 80045d8:	40023800 	.word	0x40023800
 80045dc:	42470000 	.word	0x42470000
 80045e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	4b88      	ldr	r3, [pc, #544]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 80045e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ea      	bne.n	80045c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8097 	beq.w	800472c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004602:	4b81      	ldr	r3, [pc, #516]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	4b7d      	ldr	r3, [pc, #500]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	4a7c      	ldr	r2, [pc, #496]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	@ 0x40
 800461e:	4b7a      	ldr	r3, [pc, #488]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462e:	4b77      	ldr	r3, [pc, #476]	@ (800480c <HAL_RCC_OscConfig+0x474>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d118      	bne.n	800466c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463a:	4b74      	ldr	r3, [pc, #464]	@ (800480c <HAL_RCC_OscConfig+0x474>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a73      	ldr	r2, [pc, #460]	@ (800480c <HAL_RCC_OscConfig+0x474>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004646:	f7fe fac1 	bl	8002bcc <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fe fabd 	bl	8002bcc <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e10c      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	4b6a      	ldr	r3, [pc, #424]	@ (800480c <HAL_RCC_OscConfig+0x474>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x2ea>
 8004674:	4b64      	ldr	r3, [pc, #400]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004678:	4a63      	ldr	r2, [pc, #396]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004680:	e01c      	b.n	80046bc <HAL_RCC_OscConfig+0x324>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b05      	cmp	r3, #5
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x30c>
 800468a:	4b5f      	ldr	r3, [pc, #380]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468e:	4a5e      	ldr	r2, [pc, #376]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004690:	f043 0304 	orr.w	r3, r3, #4
 8004694:	6713      	str	r3, [r2, #112]	@ 0x70
 8004696:	4b5c      	ldr	r3, [pc, #368]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469a:	4a5b      	ldr	r2, [pc, #364]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0x324>
 80046a4:	4b58      	ldr	r3, [pc, #352]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a8:	4a57      	ldr	r2, [pc, #348]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b0:	4b55      	ldr	r3, [pc, #340]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b4:	4a54      	ldr	r2, [pc, #336]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 80046b6:	f023 0304 	bic.w	r3, r3, #4
 80046ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fe fa82 	bl	8002bcc <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fe fa7e 	bl	8002bcc <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0cb      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	4b49      	ldr	r3, [pc, #292]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ee      	beq.n	80046cc <HAL_RCC_OscConfig+0x334>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f0:	f7fe fa6c 	bl	8002bcc <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f6:	e00a      	b.n	800470e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f8:	f7fe fa68 	bl	8002bcc <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0b5      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470e:	4b3e      	ldr	r3, [pc, #248]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ee      	bne.n	80046f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004720:	4b39      	ldr	r3, [pc, #228]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	4a38      	ldr	r2, [pc, #224]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800472a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80a1 	beq.w	8004878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004736:	4b34      	ldr	r3, [pc, #208]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b08      	cmp	r3, #8
 8004740:	d05c      	beq.n	80047fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d141      	bne.n	80047ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b31      	ldr	r3, [pc, #196]	@ (8004810 <HAL_RCC_OscConfig+0x478>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fe fa3c 	bl	8002bcc <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004758:	f7fe fa38 	bl	8002bcc <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e087      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	4b27      	ldr	r3, [pc, #156]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	3b01      	subs	r3, #1
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	491b      	ldr	r1, [pc, #108]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <HAL_RCC_OscConfig+0x478>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a6:	f7fe fa11 	bl	8002bcc <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ae:	f7fe fa0d 	bl	8002bcc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e05c      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c0:	4b11      	ldr	r3, [pc, #68]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x416>
 80047cc:	e054      	b.n	8004878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <HAL_RCC_OscConfig+0x478>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fe f9fa 	bl	8002bcc <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fe f9f6 	bl	8002bcc <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e045      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_RCC_OscConfig+0x470>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x444>
 80047fa:	e03d      	b.n	8004878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e038      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
 8004808:	40023800 	.word	0x40023800
 800480c:	40007000 	.word	0x40007000
 8004810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004814:	4b1b      	ldr	r3, [pc, #108]	@ (8004884 <HAL_RCC_OscConfig+0x4ec>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d028      	beq.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d121      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d11a      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800484a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800484c:	4293      	cmp	r3, r2
 800484e:	d111      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	3b01      	subs	r3, #1
 800485e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d107      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800

08004888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0cc      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b68      	ldr	r3, [pc, #416]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d90c      	bls.n	80048c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b65      	ldr	r3, [pc, #404]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b63      	ldr	r3, [pc, #396]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0b8      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d020      	beq.n	8004912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048dc:	4b59      	ldr	r3, [pc, #356]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4a58      	ldr	r2, [pc, #352]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f4:	4b53      	ldr	r3, [pc, #332]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a52      	ldr	r2, [pc, #328]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004900:	4b50      	ldr	r3, [pc, #320]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	494d      	ldr	r1, [pc, #308]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d044      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	4b47      	ldr	r3, [pc, #284]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d119      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e07f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d003      	beq.n	8004946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004942:	2b03      	cmp	r3, #3
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004946:	4b3f      	ldr	r3, [pc, #252]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e06f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004956:	4b3b      	ldr	r3, [pc, #236]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e067      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004966:	4b37      	ldr	r3, [pc, #220]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f023 0203 	bic.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4934      	ldr	r1, [pc, #208]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004978:	f7fe f928 	bl	8002bcc <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	e00a      	b.n	8004996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004980:	f7fe f924 	bl	8002bcc <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e04f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	4b2b      	ldr	r3, [pc, #172]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 020c 	and.w	r2, r3, #12
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d1eb      	bne.n	8004980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a8:	4b25      	ldr	r3, [pc, #148]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d20c      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b22      	ldr	r3, [pc, #136]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b20      	ldr	r3, [pc, #128]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e032      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049dc:	4b19      	ldr	r3, [pc, #100]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4916      	ldr	r1, [pc, #88]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fa:	4b12      	ldr	r3, [pc, #72]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	490e      	ldr	r1, [pc, #56]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a0e:	f000 f821 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4b0b      	ldr	r3, [pc, #44]	@ (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	490a      	ldr	r1, [pc, #40]	@ (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	5ccb      	ldrb	r3, [r1, r3]
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	4a09      	ldr	r2, [pc, #36]	@ (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a2a:	4b09      	ldr	r3, [pc, #36]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe f888 	bl	8002b44 <HAL_InitTick>

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023c00 	.word	0x40023c00
 8004a44:	40023800 	.word	0x40023800
 8004a48:	08009388 	.word	0x08009388
 8004a4c:	20000020 	.word	0x20000020
 8004a50:	20000024 	.word	0x20000024

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a58:	b094      	sub	sp, #80	@ 0x50
 8004a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a60:	2300      	movs	r3, #0
 8004a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a64:	2300      	movs	r3, #0
 8004a66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a6c:	4b79      	ldr	r3, [pc, #484]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d00d      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x40>
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	f200 80e1 	bhi.w	8004c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x34>
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d003      	beq.n	8004a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a86:	e0db      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a88:	4b73      	ldr	r3, [pc, #460]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004a8c:	e0db      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a8e:	4b73      	ldr	r3, [pc, #460]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a92:	e0d8      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a94:	4b6f      	ldr	r3, [pc, #444]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d063      	beq.n	8004b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	099b      	lsrs	r3, r3, #6
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ab4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004abe:	2300      	movs	r3, #0
 8004ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	462b      	mov	r3, r5
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	0159      	lsls	r1, r3, #5
 8004ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad8:	0150      	lsls	r0, r2, #5
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4621      	mov	r1, r4
 8004ae0:	1a51      	subs	r1, r2, r1
 8004ae2:	6139      	str	r1, [r7, #16]
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af8:	4659      	mov	r1, fp
 8004afa:	018b      	lsls	r3, r1, #6
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b02:	4651      	mov	r1, sl
 8004b04:	018a      	lsls	r2, r1, #6
 8004b06:	4651      	mov	r1, sl
 8004b08:	ebb2 0801 	subs.w	r8, r2, r1
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b26:	4690      	mov	r8, r2
 8004b28:	4699      	mov	r9, r3
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	eb18 0303 	adds.w	r3, r8, r3
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	462b      	mov	r3, r5
 8004b34:	eb49 0303 	adc.w	r3, r9, r3
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b46:	4629      	mov	r1, r5
 8004b48:	024b      	lsls	r3, r1, #9
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b50:	4621      	mov	r1, r4
 8004b52:	024a      	lsls	r2, r1, #9
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b64:	f7fb fb38 	bl	80001d8 <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b70:	e058      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b72:	4b38      	ldr	r3, [pc, #224]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	2200      	movs	r2, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b82:	623b      	str	r3, [r7, #32]
 8004b84:	2300      	movs	r3, #0
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	f04f 0000 	mov.w	r0, #0
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	0159      	lsls	r1, r3, #5
 8004b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b9e:	0150      	lsls	r0, r2, #5
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004baa:	4649      	mov	r1, r9
 8004bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8004bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	00eb      	lsls	r3, r5, #3
 8004bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bda:	00e2      	lsls	r2, r4, #3
 8004bdc:	4614      	mov	r4, r2
 8004bde:	461d      	mov	r5, r3
 8004be0:	4643      	mov	r3, r8
 8004be2:	18e3      	adds	r3, r4, r3
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	464b      	mov	r3, r9
 8004be8:	eb45 0303 	adc.w	r3, r5, r3
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	028b      	lsls	r3, r1, #10
 8004bfe:	4621      	mov	r1, r4
 8004c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c04:	4621      	mov	r1, r4
 8004c06:	028a      	lsls	r2, r1, #10
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c0e:	2200      	movs	r2, #0
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	61fa      	str	r2, [r7, #28]
 8004c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c18:	f7fb fade 	bl	80001d8 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4613      	mov	r3, r2
 8004c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c24:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	0c1b      	lsrs	r3, r3, #16
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004c34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3750      	adds	r7, #80	@ 0x50
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
 8004c58:	00f42400 	.word	0x00f42400
 8004c5c:	007a1200 	.word	0x007a1200

08004c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c64:	4b03      	ldr	r3, [pc, #12]	@ (8004c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000020 	.word	0x20000020

08004c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c7c:	f7ff fff0 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	0a9b      	lsrs	r3, r3, #10
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	4903      	ldr	r1, [pc, #12]	@ (8004c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c8e:	5ccb      	ldrb	r3, [r1, r3]
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	08009398 	.word	0x08009398

08004ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e07b      	b.n	8004daa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d108      	bne.n	8004ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cc2:	d009      	beq.n	8004cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	61da      	str	r2, [r3, #28]
 8004cca:	e005      	b.n	8004cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd fd6e 	bl	80027d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5c:	ea42 0103 	orr.w	r1, r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f003 0104 	and.w	r1, r3, #4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	f003 0210 	and.w	r2, r3, #16
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b088      	sub	sp, #32
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	603b      	str	r3, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_SPI_Transmit+0x22>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e126      	b.n	8005022 <HAL_SPI_Transmit+0x270>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ddc:	f7fd fef6 	bl	8002bcc <HAL_GetTick>
 8004de0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
 8004df4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004df6:	e10b      	b.n	8005010 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_SPI_Transmit+0x52>
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e08:	e102      	b.n	8005010 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	88fa      	ldrh	r2, [r7, #6]
 8004e22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	88fa      	ldrh	r2, [r7, #6]
 8004e28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e50:	d10f      	bne.n	8004e72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7c:	2b40      	cmp	r3, #64	@ 0x40
 8004e7e:	d007      	beq.n	8004e90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e98:	d14b      	bne.n	8004f32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_SPI_Transmit+0xf6>
 8004ea2:	8afb      	ldrh	r3, [r7, #22]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d13e      	bne.n	8004f26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ecc:	e02b      	b.n	8004f26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d112      	bne.n	8004f02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee0:	881a      	ldrh	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	1c9a      	adds	r2, r3, #2
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f00:	e011      	b.n	8004f26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f02:	f7fd fe63 	bl	8002bcc <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d803      	bhi.n	8004f1a <HAL_SPI_Transmit+0x168>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d102      	bne.n	8004f20 <HAL_SPI_Transmit+0x16e>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f24:	e074      	b.n	8005010 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1ce      	bne.n	8004ece <HAL_SPI_Transmit+0x11c>
 8004f30:	e04c      	b.n	8004fcc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_SPI_Transmit+0x18e>
 8004f3a:	8afb      	ldrh	r3, [r7, #22]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d140      	bne.n	8004fc2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f66:	e02c      	b.n	8004fc2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d113      	bne.n	8004f9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	7812      	ldrb	r2, [r2, #0]
 8004f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f9c:	e011      	b.n	8004fc2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f9e:	f7fd fe15 	bl	8002bcc <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d803      	bhi.n	8004fb6 <HAL_SPI_Transmit+0x204>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d102      	bne.n	8004fbc <HAL_SPI_Transmit+0x20a>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fc0:	e026      	b.n	8005010 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1cd      	bne.n	8004f68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fbcb 	bl	800576c <SPI_EndRxTxTransaction>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fea:	2300      	movs	r3, #0
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e000      	b.n	8005010 <HAL_SPI_Transmit+0x25e>
  }

error:
 800500e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005020:	7ffb      	ldrb	r3, [r7, #31]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b088      	sub	sp, #32
 800502e:	af02      	add	r7, sp, #8
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	603b      	str	r3, [r7, #0]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005046:	d112      	bne.n	800506e <HAL_SPI_Receive+0x44>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10e      	bne.n	800506e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2204      	movs	r2, #4
 8005054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005058:	88fa      	ldrh	r2, [r7, #6]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	4613      	mov	r3, r2
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f8f1 	bl	800524c <HAL_SPI_TransmitReceive>
 800506a:	4603      	mov	r3, r0
 800506c:	e0ea      	b.n	8005244 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_SPI_Receive+0x52>
 8005078:	2302      	movs	r3, #2
 800507a:	e0e3      	b.n	8005244 <HAL_SPI_Receive+0x21a>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005084:	f7fd fda2 	bl	8002bcc <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b01      	cmp	r3, #1
 8005094:	d002      	beq.n	800509c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005096:	2302      	movs	r3, #2
 8005098:	75fb      	strb	r3, [r7, #23]
    goto error;
 800509a:	e0ca      	b.n	8005232 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_SPI_Receive+0x7e>
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050ac:	e0c1      	b.n	8005232 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2204      	movs	r2, #4
 80050b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	88fa      	ldrh	r2, [r7, #6]
 80050c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050f4:	d10f      	bne.n	8005116 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005104:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005114:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005120:	2b40      	cmp	r3, #64	@ 0x40
 8005122:	d007      	beq.n	8005134 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005132:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d162      	bne.n	8005202 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800513c:	e02e      	b.n	800519c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b01      	cmp	r3, #1
 800514a:	d115      	bne.n	8005178 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f103 020c 	add.w	r2, r3, #12
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005158:	7812      	ldrb	r2, [r2, #0]
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005176:	e011      	b.n	800519c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005178:	f7fd fd28 	bl	8002bcc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d803      	bhi.n	8005190 <HAL_SPI_Receive+0x166>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d102      	bne.n	8005196 <HAL_SPI_Receive+0x16c>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	75fb      	strb	r3, [r7, #23]
          goto error;
 800519a:	e04a      	b.n	8005232 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1cb      	bne.n	800513e <HAL_SPI_Receive+0x114>
 80051a6:	e031      	b.n	800520c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d113      	bne.n	80051de <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c0:	b292      	uxth	r2, r2
 80051c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051dc:	e011      	b.n	8005202 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051de:	f7fd fcf5 	bl	8002bcc <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d803      	bhi.n	80051f6 <HAL_SPI_Receive+0x1cc>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f4:	d102      	bne.n	80051fc <HAL_SPI_Receive+0x1d2>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005200:	e017      	b.n	8005232 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1cd      	bne.n	80051a8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fa45 	bl	80056a0 <SPI_EndRxTransaction>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
 800522e:	e000      	b.n	8005232 <HAL_SPI_Receive+0x208>
  }

error :
 8005230:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005242:	7dfb      	ldrb	r3, [r7, #23]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08c      	sub	sp, #48	@ 0x30
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800525a:	2301      	movs	r3, #1
 800525c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x26>
 800526e:	2302      	movs	r3, #2
 8005270:	e18a      	b.n	8005588 <HAL_SPI_TransmitReceive+0x33c>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800527a:	f7fd fca7 	bl	8002bcc <HAL_GetTick>
 800527e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005290:	887b      	ldrh	r3, [r7, #2]
 8005292:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005294:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005298:	2b01      	cmp	r3, #1
 800529a:	d00f      	beq.n	80052bc <HAL_SPI_TransmitReceive+0x70>
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052a2:	d107      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d103      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x68>
 80052ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d003      	beq.n	80052bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80052ba:	e15b      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_SPI_TransmitReceive+0x82>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_TransmitReceive+0x82>
 80052c8:	887b      	ldrh	r3, [r7, #2]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80052d4:	e14e      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d003      	beq.n	80052ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2205      	movs	r2, #5
 80052e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	887a      	ldrh	r2, [r7, #2]
 80052fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	887a      	ldrh	r2, [r7, #2]
 8005300:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	887a      	ldrh	r2, [r7, #2]
 800530c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	887a      	ldrh	r2, [r7, #2]
 8005312:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532a:	2b40      	cmp	r3, #64	@ 0x40
 800532c:	d007      	beq.n	800533e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800533c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005346:	d178      	bne.n	800543a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_SPI_TransmitReceive+0x10a>
 8005350:	8b7b      	ldrh	r3, [r7, #26]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d166      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535a:	881a      	ldrh	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800537a:	e053      	b.n	8005424 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b02      	cmp	r3, #2
 8005388:	d11b      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x176>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d016      	beq.n	80053c2 <HAL_SPI_TransmitReceive+0x176>
 8005394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d113      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539e:	881a      	ldrh	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053aa:	1c9a      	adds	r2, r3, #2
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d119      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x1b8>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d014      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	b292      	uxth	r2, r2
 80053e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ec:	1c9a      	adds	r2, r3, #2
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005400:	2301      	movs	r3, #1
 8005402:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005404:	f7fd fbe2 	bl	8002bcc <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005410:	429a      	cmp	r2, r3
 8005412:	d807      	bhi.n	8005424 <HAL_SPI_TransmitReceive+0x1d8>
 8005414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d003      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005422:	e0a7      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1a6      	bne.n	800537c <HAL_SPI_TransmitReceive+0x130>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1a1      	bne.n	800537c <HAL_SPI_TransmitReceive+0x130>
 8005438:	e07c      	b.n	8005534 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x1fc>
 8005442:	8b7b      	ldrh	r3, [r7, #26]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d16b      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	7812      	ldrb	r2, [r2, #0]
 8005454:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800546e:	e057      	b.n	8005520 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b02      	cmp	r3, #2
 800547c:	d11c      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x26c>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d017      	beq.n	80054b8 <HAL_SPI_TransmitReceive+0x26c>
 8005488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d114      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	330c      	adds	r3, #12
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d119      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x2ae>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d014      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054f6:	2301      	movs	r3, #1
 80054f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054fa:	f7fd fb67 	bl	8002bcc <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005506:	429a      	cmp	r2, r3
 8005508:	d803      	bhi.n	8005512 <HAL_SPI_TransmitReceive+0x2c6>
 800550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d102      	bne.n	8005518 <HAL_SPI_TransmitReceive+0x2cc>
 8005512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800551e:	e029      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1a2      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x224>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800552e:	b29b      	uxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d19d      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005536:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f917 	bl	800576c <SPI_EndRxTxTransaction>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d006      	beq.n	8005552 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005550:	e010      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	e000      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005572:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005584:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005588:	4618      	mov	r0, r3
 800558a:	3730      	adds	r7, #48	@ 0x30
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055a0:	f7fd fb14 	bl	8002bcc <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055b0:	f7fd fb0c 	bl	8002bcc <HAL_GetTick>
 80055b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055b6:	4b39      	ldr	r3, [pc, #228]	@ (800569c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	015b      	lsls	r3, r3, #5
 80055bc:	0d1b      	lsrs	r3, r3, #20
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055c6:	e054      	b.n	8005672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d050      	beq.n	8005672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055d0:	f7fd fafc 	bl	8002bcc <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d902      	bls.n	80055e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d13d      	bne.n	8005662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055fe:	d111      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005608:	d004      	beq.n	8005614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005612:	d107      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800562c:	d10f      	bne.n	800564e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800564c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e017      	b.n	8005692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3b01      	subs	r3, #1
 8005670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4013      	ands	r3, r2
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	429a      	cmp	r2, r3
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	429a      	cmp	r2, r3
 800568e:	d19b      	bne.n	80055c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000020 	.word	0x20000020

080056a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056b4:	d111      	bne.n	80056da <SPI_EndRxTransaction+0x3a>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056be:	d004      	beq.n	80056ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c8:	d107      	bne.n	80056da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056e2:	d12a      	bne.n	800573a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ec:	d012      	beq.n	8005714 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2180      	movs	r1, #128	@ 0x80
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff ff49 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d02d      	beq.n	8005760 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e026      	b.n	8005762 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2200      	movs	r2, #0
 800571c:	2101      	movs	r1, #1
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7ff ff36 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01a      	beq.n	8005760 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e013      	b.n	8005762 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2200      	movs	r2, #0
 8005742:	2101      	movs	r1, #1
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7ff ff23 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e000      	b.n	8005762 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005778:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <SPI_EndRxTxTransaction+0x7c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1b      	ldr	r2, [pc, #108]	@ (80057ec <SPI_EndRxTxTransaction+0x80>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	0d5b      	lsrs	r3, r3, #21
 8005784:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005796:	d112      	bne.n	80057be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	2180      	movs	r1, #128	@ 0x80
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff fef4 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d016      	beq.n	80057dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e00f      	b.n	80057de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d4:	2b80      	cmp	r3, #128	@ 0x80
 80057d6:	d0f2      	beq.n	80057be <SPI_EndRxTxTransaction+0x52>
 80057d8:	e000      	b.n	80057dc <SPI_EndRxTxTransaction+0x70>
        break;
 80057da:	bf00      	nop
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000020 	.word	0x20000020
 80057ec:	165e9f81 	.word	0x165e9f81

080057f0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e034      	b.n	8005870 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7fb fb1a 	bl	8000e54 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3308      	adds	r3, #8
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f000 fca6 	bl	800617c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	461a      	mov	r2, r3
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	f000 fcf0 	bl	8006220 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6858      	ldr	r0, [r3, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	f000 fd25 	bl	800629c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	6892      	ldr	r2, [r2, #8]
 800585a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	6892      	ldr	r2, [r2, #8]
 8005866:	f041 0101 	orr.w	r1, r1, #1
 800586a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e041      	b.n	800590e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fd f8a0 	bl	80029e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f000 fa96 	bl	8005de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	d001      	beq.n	8005930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e04e      	b.n	80059ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a23      	ldr	r2, [pc, #140]	@ (80059dc <HAL_TIM_Base_Start_IT+0xc4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d022      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x80>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595a:	d01d      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x80>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1f      	ldr	r2, [pc, #124]	@ (80059e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d018      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x80>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1e      	ldr	r2, [pc, #120]	@ (80059e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d013      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x80>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1c      	ldr	r2, [pc, #112]	@ (80059e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00e      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x80>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1b      	ldr	r2, [pc, #108]	@ (80059ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d009      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x80>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a19      	ldr	r2, [pc, #100]	@ (80059f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d004      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x80>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a18      	ldr	r2, [pc, #96]	@ (80059f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d111      	bne.n	80059bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b06      	cmp	r3, #6
 80059a8:	d010      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ba:	e007      	b.n	80059cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40010400 	.word	0x40010400
 80059f0:	40014000 	.word	0x40014000
 80059f4:	40001800 	.word	0x40001800

080059f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d122      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d11b      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0202 	mvn.w	r2, #2
 8005a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f9b5 	bl	8005daa <HAL_TIM_IC_CaptureCallback>
 8005a40:	e005      	b.n	8005a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9a7 	bl	8005d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f9b8 	bl	8005dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d122      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d11b      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0204 	mvn.w	r2, #4
 8005a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f98b 	bl	8005daa <HAL_TIM_IC_CaptureCallback>
 8005a94:	e005      	b.n	8005aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f97d 	bl	8005d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f98e 	bl	8005dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b08      	cmp	r3, #8
 8005ab4:	d122      	bne.n	8005afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d11b      	bne.n	8005afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0208 	mvn.w	r2, #8
 8005acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2204      	movs	r2, #4
 8005ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f961 	bl	8005daa <HAL_TIM_IC_CaptureCallback>
 8005ae8:	e005      	b.n	8005af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f953 	bl	8005d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f964 	bl	8005dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d122      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d11b      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0210 	mvn.w	r2, #16
 8005b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2208      	movs	r2, #8
 8005b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f937 	bl	8005daa <HAL_TIM_IC_CaptureCallback>
 8005b3c:	e005      	b.n	8005b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f929 	bl	8005d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f93a 	bl	8005dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d10e      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d107      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0201 	mvn.w	r2, #1
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fc fd96 	bl	80026a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b86:	2b80      	cmp	r3, #128	@ 0x80
 8005b88:	d10e      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b94:	2b80      	cmp	r3, #128	@ 0x80
 8005b96:	d107      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fae0 	bl	8006168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb2:	2b40      	cmp	r3, #64	@ 0x40
 8005bb4:	d10e      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc0:	2b40      	cmp	r3, #64	@ 0x40
 8005bc2:	d107      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8ff 	bl	8005dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d10e      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d107      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0220 	mvn.w	r2, #32
 8005bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 faaa 	bl	8006154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIM_ConfigClockSource+0x1c>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e0b4      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0x186>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5c:	d03e      	beq.n	8005cdc <HAL_TIM_ConfigClockSource+0xd4>
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c62:	f200 8087 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6a:	f000 8086 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x172>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c72:	d87f      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c74:	2b70      	cmp	r3, #112	@ 0x70
 8005c76:	d01a      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0xa6>
 8005c78:	2b70      	cmp	r3, #112	@ 0x70
 8005c7a:	d87b      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b60      	cmp	r3, #96	@ 0x60
 8005c7e:	d050      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x11a>
 8005c80:	2b60      	cmp	r3, #96	@ 0x60
 8005c82:	d877      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b50      	cmp	r3, #80	@ 0x50
 8005c86:	d03c      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0xfa>
 8005c88:	2b50      	cmp	r3, #80	@ 0x50
 8005c8a:	d873      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b40      	cmp	r3, #64	@ 0x40
 8005c8e:	d058      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x13a>
 8005c90:	2b40      	cmp	r3, #64	@ 0x40
 8005c92:	d86f      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b30      	cmp	r3, #48	@ 0x30
 8005c96:	d064      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15a>
 8005c98:	2b30      	cmp	r3, #48	@ 0x30
 8005c9a:	d86b      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d060      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d867      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d05c      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d05a      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15a>
 8005cac:	e062      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6899      	ldr	r1, [r3, #8]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f000 f9ad 	bl	800601c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	609a      	str	r2, [r3, #8]
      break;
 8005cda:	e04f      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6818      	ldr	r0, [r3, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6899      	ldr	r1, [r3, #8]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f000 f996 	bl	800601c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cfe:	609a      	str	r2, [r3, #8]
      break;
 8005d00:	e03c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 f90a 	bl	8005f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2150      	movs	r1, #80	@ 0x50
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f963 	bl	8005fe6 <TIM_ITRx_SetConfig>
      break;
 8005d20:	e02c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 f929 	bl	8005f86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2160      	movs	r1, #96	@ 0x60
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f953 	bl	8005fe6 <TIM_ITRx_SetConfig>
      break;
 8005d40:	e01c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6859      	ldr	r1, [r3, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f000 f8ea 	bl	8005f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2140      	movs	r1, #64	@ 0x40
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f943 	bl	8005fe6 <TIM_ITRx_SetConfig>
      break;
 8005d60:	e00c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f000 f93a 	bl	8005fe6 <TIM_ITRx_SetConfig>
      break;
 8005d72:	e003      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	73fb      	strb	r3, [r7, #15]
      break;
 8005d78:	e000      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
	...

08005de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a40      	ldr	r2, [pc, #256]	@ (8005efc <TIM_Base_SetConfig+0x114>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d013      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e06:	d00f      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8005f00 <TIM_Base_SetConfig+0x118>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00b      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a3c      	ldr	r2, [pc, #240]	@ (8005f04 <TIM_Base_SetConfig+0x11c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8005f08 <TIM_Base_SetConfig+0x120>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a3a      	ldr	r2, [pc, #232]	@ (8005f0c <TIM_Base_SetConfig+0x124>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d108      	bne.n	8005e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005efc <TIM_Base_SetConfig+0x114>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d02b      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e48:	d027      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005f00 <TIM_Base_SetConfig+0x118>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d023      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2b      	ldr	r2, [pc, #172]	@ (8005f04 <TIM_Base_SetConfig+0x11c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01f      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005f08 <TIM_Base_SetConfig+0x120>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01b      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a29      	ldr	r2, [pc, #164]	@ (8005f0c <TIM_Base_SetConfig+0x124>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d017      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a28      	ldr	r2, [pc, #160]	@ (8005f10 <TIM_Base_SetConfig+0x128>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a27      	ldr	r2, [pc, #156]	@ (8005f14 <TIM_Base_SetConfig+0x12c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a26      	ldr	r2, [pc, #152]	@ (8005f18 <TIM_Base_SetConfig+0x130>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a25      	ldr	r2, [pc, #148]	@ (8005f1c <TIM_Base_SetConfig+0x134>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a24      	ldr	r2, [pc, #144]	@ (8005f20 <TIM_Base_SetConfig+0x138>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a23      	ldr	r2, [pc, #140]	@ (8005f24 <TIM_Base_SetConfig+0x13c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d108      	bne.n	8005eac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8005efc <TIM_Base_SetConfig+0x114>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_Base_SetConfig+0xf8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a0c      	ldr	r2, [pc, #48]	@ (8005f0c <TIM_Base_SetConfig+0x124>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d103      	bne.n	8005ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	615a      	str	r2, [r3, #20]
}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40000800 	.word	0x40000800
 8005f08:	40000c00 	.word	0x40000c00
 8005f0c:	40010400 	.word	0x40010400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400
 8005f18:	40014800 	.word	0x40014800
 8005f1c:	40001800 	.word	0x40001800
 8005f20:	40001c00 	.word	0x40001c00
 8005f24:	40002000 	.word	0x40002000

08005f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0201 	bic.w	r2, r3, #1
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 030a 	bic.w	r3, r3, #10
 8005f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b087      	sub	sp, #28
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	f023 0210 	bic.w	r2, r3, #16
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	f043 0307 	orr.w	r3, r3, #7
 8006008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	609a      	str	r2, [r3, #8]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	021a      	lsls	r2, r3, #8
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	431a      	orrs	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4313      	orrs	r3, r2
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	609a      	str	r2, [r3, #8]
}
 8006050:	bf00      	nop
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006070:	2302      	movs	r3, #2
 8006072:	e05a      	b.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800609a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a21      	ldr	r2, [pc, #132]	@ (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d022      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c0:	d01d      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1d      	ldr	r2, [pc, #116]	@ (800613c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d018      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1a      	ldr	r2, [pc, #104]	@ (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00e      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a18      	ldr	r2, [pc, #96]	@ (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a17      	ldr	r2, [pc, #92]	@ (800614c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a15      	ldr	r2, [pc, #84]	@ (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d10c      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4313      	orrs	r3, r2
 800610e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40000400 	.word	0x40000400
 8006140:	40000800 	.word	0x40000800
 8006144:	40000c00 	.word	0x40000c00
 8006148:	40010400 	.word	0x40010400
 800614c:	40014000 	.word	0x40014000
 8006150:	40001800 	.word	0x40001800

08006154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006194:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4b20      	ldr	r3, [pc, #128]	@ (800621c <FSMC_NORSRAM_Init+0xa0>)
 800619a:	4013      	ands	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80061a6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80061ac:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80061b2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80061b8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80061be:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80061c4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80061ca:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 80061d0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80061d6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 80061dc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 80061e2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 80061e8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d103      	bne.n	8006200 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061fe:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	fff00080 	.word	0xfff00080

08006220 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006242:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800624e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006256:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800625e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	3b01      	subs	r3, #1
 8006266:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006268:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	3b02      	subs	r3, #2
 8006270:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006272:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006278:	4313      	orrs	r3, r2
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6979      	ldr	r1, [r7, #20]
 8006288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062b4:	d122      	bne.n	80062fc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062be:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4b15      	ldr	r3, [pc, #84]	@ (8006318 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80062d2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80062da:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80062e2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80062e8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6979      	ldr	r1, [r7, #20]
 80062f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80062fa:	e005      	b.n	8006308 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	cff00000 	.word	0xcff00000

0800631c <memset>:
 800631c:	4402      	add	r2, r0
 800631e:	4603      	mov	r3, r0
 8006320:	4293      	cmp	r3, r2
 8006322:	d100      	bne.n	8006326 <memset+0xa>
 8006324:	4770      	bx	lr
 8006326:	f803 1b01 	strb.w	r1, [r3], #1
 800632a:	e7f9      	b.n	8006320 <memset+0x4>

0800632c <strcat>:
 800632c:	b510      	push	{r4, lr}
 800632e:	4602      	mov	r2, r0
 8006330:	7814      	ldrb	r4, [r2, #0]
 8006332:	4613      	mov	r3, r2
 8006334:	3201      	adds	r2, #1
 8006336:	2c00      	cmp	r4, #0
 8006338:	d1fa      	bne.n	8006330 <strcat+0x4>
 800633a:	3b01      	subs	r3, #1
 800633c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006340:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006344:	2a00      	cmp	r2, #0
 8006346:	d1f9      	bne.n	800633c <strcat+0x10>
 8006348:	bd10      	pop	{r4, pc}
	...

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4d0d      	ldr	r5, [pc, #52]	@ (8006384 <__libc_init_array+0x38>)
 8006350:	4c0d      	ldr	r4, [pc, #52]	@ (8006388 <__libc_init_array+0x3c>)
 8006352:	1b64      	subs	r4, r4, r5
 8006354:	10a4      	asrs	r4, r4, #2
 8006356:	2600      	movs	r6, #0
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	4d0b      	ldr	r5, [pc, #44]	@ (800638c <__libc_init_array+0x40>)
 800635e:	4c0c      	ldr	r4, [pc, #48]	@ (8006390 <__libc_init_array+0x44>)
 8006360:	f000 f818 	bl	8006394 <_init>
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	2600      	movs	r6, #0
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f855 3b04 	ldr.w	r3, [r5], #4
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f855 3b04 	ldr.w	r3, [r5], #4
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	080093a8 	.word	0x080093a8
 8006388:	080093a8 	.word	0x080093a8
 800638c:	080093a8 	.word	0x080093a8
 8006390:	080093ac 	.word	0x080093ac

08006394 <_init>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	bf00      	nop
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr

080063a0 <_fini>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	bf00      	nop
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr
