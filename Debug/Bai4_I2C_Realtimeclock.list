
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000613c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ff4  080062c4  080062c4  000072c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092b8  080092b8  0000b02c  2**0
                  CONTENTS
  4 .ARM          00000008  080092b8  080092b8  0000a2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092c0  080092c0  0000b02c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c0  080092c0  0000a2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092c4  080092c4  0000a2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080092c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b02c  2**0
                  CONTENTS
 10 .bss          000001d0  2000002c  2000002c  0000b02c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001fc  200001fc  0000b02c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b02c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001288f  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000341c  00000000  00000000  0001d8eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00020d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e20  00000000  00000000  00021f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023567  00000000  00000000  00022d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019926  00000000  00000000  000462d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf977  00000000  00000000  0005fbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f574  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b20  00000000  00000000  0012f5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  001340d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080062ac 	.word	0x080062ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	080062ac 	.word	0x080062ac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2108      	movs	r1, #8
 80004d0:	4802      	ldr	r0, [pc, #8]	@ (80004dc <button_init+0x14>)
 80004d2:	f002 fde5 	bl	80030a0 <HAL_GPIO_WritePin>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40020c00 	.word	0x40020c00

080004e0 <button_Scan>:

void button_Scan(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	482f      	ldr	r0, [pc, #188]	@ (80005a8 <button_Scan+0xc8>)
 80004ec:	f002 fdd8 	bl	80030a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2108      	movs	r1, #8
 80004f4:	482c      	ldr	r0, [pc, #176]	@ (80005a8 <button_Scan+0xc8>)
 80004f6:	f002 fdd3 	bl	80030a0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004fa:	230a      	movs	r3, #10
 80004fc:	2202      	movs	r2, #2
 80004fe:	492b      	ldr	r1, [pc, #172]	@ (80005ac <button_Scan+0xcc>)
 8000500:	482b      	ldr	r0, [pc, #172]	@ (80005b0 <button_Scan+0xd0>)
 8000502:	f004 fd1e 	bl	8004f42 <HAL_SPI_Receive>
	  int button_index = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800050a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800050e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e03f      	b.n	8000596 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	db06      	blt.n	800052a <button_Scan+0x4a>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b03      	cmp	r3, #3
 8000520:	dc03      	bgt.n	800052a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3304      	adds	r3, #4
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e018      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b03      	cmp	r3, #3
 800052e:	dd07      	ble.n	8000540 <button_Scan+0x60>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	dc04      	bgt.n	8000540 <button_Scan+0x60>
			  button_index = 7 - i;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f1c3 0307 	rsb	r3, r3, #7
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00d      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b07      	cmp	r3, #7
 8000544:	dd06      	ble.n	8000554 <button_Scan+0x74>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0b      	cmp	r3, #11
 800054a:	dc03      	bgt.n	8000554 <button_Scan+0x74>
			  button_index = i + 4;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3304      	adds	r3, #4
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e003      	b.n	800055c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f1c3 0317 	rsb	r3, r3, #23
 800055a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <button_Scan+0xcc>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	897b      	ldrh	r3, [r7, #10]
 8000562:	4013      	ands	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <button_Scan+0x96>
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <button_Scan+0xd4>)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2100      	movs	r1, #0
 8000570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000574:	e009      	b.n	800058a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000576:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <button_Scan+0xd4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057e:	3301      	adds	r3, #1
 8000580:	b299      	uxth	r1, r3
 8000582:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <button_Scan+0xd4>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800058a:	897b      	ldrh	r3, [r7, #10]
 800058c:	085b      	lsrs	r3, r3, #1
 800058e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	ddbc      	ble.n	8000516 <button_Scan+0x36>
	  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020c00 	.word	0x40020c00
 80005ac:	20000068 	.word	0x20000068
 80005b0:	20000158 	.word	0x20000158
 80005b4:	20000048 	.word	0x20000048

080005b8 <ChangeValue>:
 uint8_t al_hours;
 uint8_t al_min;
 uint8_t al_sec;
char* update_value[6] = {"seconds", "minutes", "hours", "days", "months", "years"};

void ChangeValue(int val){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	switch(val){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b05      	cmp	r3, #5
 80005c4:	f200 809e 	bhi.w	8000704 <ChangeValue+0x14c>
 80005c8:	a201      	add	r2, pc, #4	@ (adr r2, 80005d0 <ChangeValue+0x18>)
 80005ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ce:	bf00      	nop
 80005d0:	080005e9 	.word	0x080005e9
 80005d4:	08000607 	.word	0x08000607
 80005d8:	08000623 	.word	0x08000623
 80005dc:	0800063f 	.word	0x0800063f
 80005e0:	080006db 	.word	0x080006db
 80005e4:	080006f7 	.word	0x080006f7
	case 0:
		cal_sec++;
 80005e8:	4b4f      	ldr	r3, [pc, #316]	@ (8000728 <ChangeValue+0x170>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b4d      	ldr	r3, [pc, #308]	@ (8000728 <ChangeValue+0x170>)
 80005f2:	701a      	strb	r2, [r3, #0]
		if(cal_sec > 59) cal_sec=0;
 80005f4:	4b4c      	ldr	r3, [pc, #304]	@ (8000728 <ChangeValue+0x170>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80005fa:	f240 8085 	bls.w	8000708 <ChangeValue+0x150>
 80005fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000728 <ChangeValue+0x170>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
		break;
 8000604:	e080      	b.n	8000708 <ChangeValue+0x150>
	case 1:
		cal_min++;
 8000606:	4b49      	ldr	r3, [pc, #292]	@ (800072c <ChangeValue+0x174>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b47      	ldr	r3, [pc, #284]	@ (800072c <ChangeValue+0x174>)
 8000610:	701a      	strb	r2, [r3, #0]
		if(cal_min > 59) cal_min=0;
 8000612:	4b46      	ldr	r3, [pc, #280]	@ (800072c <ChangeValue+0x174>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b3b      	cmp	r3, #59	@ 0x3b
 8000618:	d978      	bls.n	800070c <ChangeValue+0x154>
 800061a:	4b44      	ldr	r3, [pc, #272]	@ (800072c <ChangeValue+0x174>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
		break;
 8000620:	e074      	b.n	800070c <ChangeValue+0x154>
	case 2:
		cal_hour++;
 8000622:	4b43      	ldr	r3, [pc, #268]	@ (8000730 <ChangeValue+0x178>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b41      	ldr	r3, [pc, #260]	@ (8000730 <ChangeValue+0x178>)
 800062c:	701a      	strb	r2, [r3, #0]
		if(cal_hour > 23) cal_hour =0;
 800062e:	4b40      	ldr	r3, [pc, #256]	@ (8000730 <ChangeValue+0x178>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b17      	cmp	r3, #23
 8000634:	d96c      	bls.n	8000710 <ChangeValue+0x158>
 8000636:	4b3e      	ldr	r3, [pc, #248]	@ (8000730 <ChangeValue+0x178>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
		break;
 800063c:	e068      	b.n	8000710 <ChangeValue+0x158>
	case 3:
		cal_day++;
 800063e:	4b3d      	ldr	r3, [pc, #244]	@ (8000734 <ChangeValue+0x17c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b3b      	ldr	r3, [pc, #236]	@ (8000734 <ChangeValue+0x17c>)
 8000648:	701a      	strb	r2, [r3, #0]
		cal_date++;
 800064a:	4b3b      	ldr	r3, [pc, #236]	@ (8000738 <ChangeValue+0x180>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <ChangeValue+0x180>)
 8000654:	701a      	strb	r2, [r3, #0]
		if(cal_day >28){
 8000656:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <ChangeValue+0x17c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b1c      	cmp	r3, #28
 800065c:	d916      	bls.n	800068c <ChangeValue+0xd4>
			if(cal_month ==2){
 800065e:	4b37      	ldr	r3, [pc, #220]	@ (800073c <ChangeValue+0x184>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d131      	bne.n	80006ca <ChangeValue+0x112>
				if(cal_year%4 !=0){
 8000666:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <ChangeValue+0x188>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	f003 0303 	and.w	r3, r3, #3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <ChangeValue+0xc4>
					cal_day=1;
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <ChangeValue+0x17c>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e026      	b.n	80006ca <ChangeValue+0x112>
				}
				else{
					if(cal_day >29) cal_day=0;
 800067c:	4b2d      	ldr	r3, [pc, #180]	@ (8000734 <ChangeValue+0x17c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b1d      	cmp	r3, #29
 8000682:	d922      	bls.n	80006ca <ChangeValue+0x112>
 8000684:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <ChangeValue+0x17c>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e01e      	b.n	80006ca <ChangeValue+0x112>
				}
			}
		}
		else if(cal_month==4 || cal_month==6 || cal_month==9 || cal_month==11){
 800068c:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <ChangeValue+0x184>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d00b      	beq.n	80006ac <ChangeValue+0xf4>
 8000694:	4b29      	ldr	r3, [pc, #164]	@ (800073c <ChangeValue+0x184>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b06      	cmp	r3, #6
 800069a:	d007      	beq.n	80006ac <ChangeValue+0xf4>
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <ChangeValue+0x184>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b09      	cmp	r3, #9
 80006a2:	d003      	beq.n	80006ac <ChangeValue+0xf4>
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <ChangeValue+0x184>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b0b      	cmp	r3, #11
 80006aa:	d107      	bne.n	80006bc <ChangeValue+0x104>
			if(cal_day > 30) cal_day=0;
 80006ac:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <ChangeValue+0x17c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b1e      	cmp	r3, #30
 80006b2:	d90a      	bls.n	80006ca <ChangeValue+0x112>
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <ChangeValue+0x17c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e006      	b.n	80006ca <ChangeValue+0x112>
		}
		else{
			if(cal_day>31) cal_day=0;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <ChangeValue+0x17c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b1f      	cmp	r3, #31
 80006c2:	d902      	bls.n	80006ca <ChangeValue+0x112>
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <ChangeValue+0x17c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
		}
		if(cal_date>8) cal_date=2;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <ChangeValue+0x180>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b08      	cmp	r3, #8
 80006d0:	d920      	bls.n	8000714 <ChangeValue+0x15c>
 80006d2:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <ChangeValue+0x180>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	701a      	strb	r2, [r3, #0]

		break;
 80006d8:	e01c      	b.n	8000714 <ChangeValue+0x15c>
	case 4:
		cal_month++;
 80006da:	4b18      	ldr	r3, [pc, #96]	@ (800073c <ChangeValue+0x184>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <ChangeValue+0x184>)
 80006e4:	701a      	strb	r2, [r3, #0]
		if(cal_month>12) cal_month=1;
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <ChangeValue+0x184>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b0c      	cmp	r3, #12
 80006ec:	d914      	bls.n	8000718 <ChangeValue+0x160>
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <ChangeValue+0x184>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
		break;
 80006f4:	e010      	b.n	8000718 <ChangeValue+0x160>
	case 5:
		cal_year++;
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <ChangeValue+0x188>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <ChangeValue+0x188>)
 8000700:	701a      	strb	r2, [r3, #0]
		break;
 8000702:	e00a      	b.n	800071a <ChangeValue+0x162>
	default:
		break;
 8000704:	bf00      	nop
 8000706:	e008      	b.n	800071a <ChangeValue+0x162>
		break;
 8000708:	bf00      	nop
 800070a:	e006      	b.n	800071a <ChangeValue+0x162>
		break;
 800070c:	bf00      	nop
 800070e:	e004      	b.n	800071a <ChangeValue+0x162>
		break;
 8000710:	bf00      	nop
 8000712:	e002      	b.n	800071a <ChangeValue+0x162>
		break;
 8000714:	bf00      	nop
 8000716:	e000      	b.n	800071a <ChangeValue+0x162>
		break;
 8000718:	bf00      	nop
	}
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000076 	.word	0x20000076
 800072c:	20000075 	.word	0x20000075
 8000730:	20000074 	.word	0x20000074
 8000734:	20000078 	.word	0x20000078
 8000738:	20000077 	.word	0x20000077
 800073c:	20000079 	.word	0x20000079
 8000740:	2000007a 	.word	0x2000007a

08000744 <ApplyChange>:

void ApplyChange(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
		ds3231_Write(ADDRESS_SEC, cal_sec);
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <ApplyChange+0x5c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	2000      	movs	r0, #0
 8000750:	f000 f9d6 	bl	8000b00 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, cal_min);
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <ApplyChange+0x60>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	2001      	movs	r0, #1
 800075c:	f000 f9d0 	bl	8000b00 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, cal_hour);
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <ApplyChange+0x64>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	2002      	movs	r0, #2
 8000768:	f000 f9ca 	bl	8000b00 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, cal_day);
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <ApplyChange+0x68>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	2003      	movs	r0, #3
 8000774:	f000 f9c4 	bl	8000b00 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, cal_date);
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <ApplyChange+0x6c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	2004      	movs	r0, #4
 8000780:	f000 f9be 	bl	8000b00 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, cal_month);
 8000784:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <ApplyChange+0x70>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	2005      	movs	r0, #5
 800078c:	f000 f9b8 	bl	8000b00 <ds3231_Write>
		ds3231_Write(ADDRESS_YEAR, cal_year);
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <ApplyChange+0x74>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	2006      	movs	r0, #6
 8000798:	f000 f9b2 	bl	8000b00 <ds3231_Write>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000076 	.word	0x20000076
 80007a4:	20000075 	.word	0x20000075
 80007a8:	20000074 	.word	0x20000074
 80007ac:	20000078 	.word	0x20000078
 80007b0:	20000077 	.word	0x20000077
 80007b4:	20000079 	.word	0x20000079
 80007b8:	2000007a 	.word	0x2000007a

080007bc <ChangeAlarm>:

void ChangeAlarm(){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	switch (counter) {
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <ChangeAlarm+0x50>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d014      	beq.n	80007f2 <ChangeAlarm+0x36>
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	dc19      	bgt.n	8000800 <ChangeAlarm+0x44>
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <ChangeAlarm+0x1a>
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d007      	beq.n	80007e4 <ChangeAlarm+0x28>
		break;
	case 2:
		al_hours++;
		break;
	default:
		break;
 80007d4:	e014      	b.n	8000800 <ChangeAlarm+0x44>
		al_sec++;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <ChangeAlarm+0x54>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <ChangeAlarm+0x54>)
 80007e0:	701a      	strb	r2, [r3, #0]
		break;
 80007e2:	e00e      	b.n	8000802 <ChangeAlarm+0x46>
		al_min++;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <ChangeAlarm+0x58>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <ChangeAlarm+0x58>)
 80007ee:	701a      	strb	r2, [r3, #0]
		break;
 80007f0:	e007      	b.n	8000802 <ChangeAlarm+0x46>
		al_hours++;
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <ChangeAlarm+0x5c>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <ChangeAlarm+0x5c>)
 80007fc:	701a      	strb	r2, [r3, #0]
		break;
 80007fe:	e000      	b.n	8000802 <ChangeAlarm+0x46>
		break;
 8000800:	bf00      	nop
	}
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	2000006c 	.word	0x2000006c
 8000810:	2000007d 	.word	0x2000007d
 8000814:	2000007c 	.word	0x2000007c
 8000818:	2000007b 	.word	0x2000007b

0800081c <fsm>:

void fsm(uint16_t status){
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af04      	add	r7, sp, #16
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
	switch(status){
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	2b02      	cmp	r3, #2
 800082a:	f000 80ba 	beq.w	80009a2 <fsm+0x186>
 800082e:	2b02      	cmp	r3, #2
 8000830:	f300 80fa 	bgt.w	8000a28 <fsm+0x20c>
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <fsm+0x22>
 8000838:	2b01      	cmp	r3, #1
 800083a:	d045      	beq.n	80008c8 <fsm+0xac>
			if(counter>2) counter =0;
		}
		lcd_StrCenter(110, 20, "SET ALARM", BLUE, YELLOW, 16, 0);
		break;
	default:
		break;
 800083c:	e0f4      	b.n	8000a28 <fsm+0x20c>
		ds3231_ReadTime();
 800083e:	f000 f981 	bl	8000b44 <ds3231_ReadTime>
		displayTime();
 8000842:	f001 fa4f 	bl	8001ce4 <displayTime>
		lcd_StrCenter(110, 20, "NORMAL", BLUE, YELLOW, 16, 0);
 8000846:	2300      	movs	r3, #0
 8000848:	9302      	str	r3, [sp, #8]
 800084a:	2310      	movs	r3, #16
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	231f      	movs	r3, #31
 8000856:	4a78      	ldr	r2, [pc, #480]	@ (8000a38 <fsm+0x21c>)
 8000858:	2114      	movs	r1, #20
 800085a:	206e      	movs	r0, #110	@ 0x6e
 800085c:	f001 f86c 	bl	8001938 <lcd_StrCenter>
		if (ds3231_hours == al_hours && ds3231_min == al_min
 8000860:	4b76      	ldr	r3, [pc, #472]	@ (8000a3c <fsm+0x220>)
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4b76      	ldr	r3, [pc, #472]	@ (8000a40 <fsm+0x224>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	429a      	cmp	r2, r3
 800086a:	d10e      	bne.n	800088a <fsm+0x6e>
 800086c:	4b75      	ldr	r3, [pc, #468]	@ (8000a44 <fsm+0x228>)
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	4b75      	ldr	r3, [pc, #468]	@ (8000a48 <fsm+0x22c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	429a      	cmp	r2, r3
 8000876:	d108      	bne.n	800088a <fsm+0x6e>
				&& ds3231_sec == al_sec) {
 8000878:	4b74      	ldr	r3, [pc, #464]	@ (8000a4c <fsm+0x230>)
 800087a:	781a      	ldrb	r2, [r3, #0]
 800087c:	4b74      	ldr	r3, [pc, #464]	@ (8000a50 <fsm+0x234>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d102      	bne.n	800088a <fsm+0x6e>
			flag=1;
 8000884:	4b73      	ldr	r3, [pc, #460]	@ (8000a54 <fsm+0x238>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
		if(flag){
 800088a:	4b72      	ldr	r3, [pc, #456]	@ (8000a54 <fsm+0x238>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d00d      	beq.n	80008ae <fsm+0x92>
			lcd_StrCenter(110, 20, "ALARM", RED, YELLOW, 16, 0);
 8000892:	2300      	movs	r3, #0
 8000894:	9302      	str	r3, [sp, #8]
 8000896:	2310      	movs	r3, #16
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008a4:	4a6c      	ldr	r2, [pc, #432]	@ (8000a58 <fsm+0x23c>)
 80008a6:	2114      	movs	r1, #20
 80008a8:	206e      	movs	r0, #110	@ 0x6e
 80008aa:	f001 f845 	bl	8001938 <lcd_StrCenter>
		if(button_count[0] || button_count[14]){
 80008ae:	4b6b      	ldr	r3, [pc, #428]	@ (8000a5c <fsm+0x240>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d104      	bne.n	80008c0 <fsm+0xa4>
 80008b6:	4b69      	ldr	r3, [pc, #420]	@ (8000a5c <fsm+0x240>)
 80008b8:	8b9b      	ldrh	r3, [r3, #28]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 80b6 	beq.w	8000a2c <fsm+0x210>
			flag=0;
 80008c0:	4b64      	ldr	r3, [pc, #400]	@ (8000a54 <fsm+0x238>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
		break;
 80008c6:	e0b1      	b.n	8000a2c <fsm+0x210>
		char title[50] ="Updating ";
 80008c8:	4a65      	ldr	r2, [pc, #404]	@ (8000a60 <fsm+0x244>)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	6810      	ldr	r0, [r2, #0]
 80008d0:	6851      	ldr	r1, [r2, #4]
 80008d2:	c303      	stmia	r3!, {r0, r1}
 80008d4:	8912      	ldrh	r2, [r2, #8]
 80008d6:	801a      	strh	r2, [r3, #0]
 80008d8:	f107 0316 	add.w	r3, r7, #22
 80008dc:	2228      	movs	r2, #40	@ 0x28
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f005 fca7 	bl	8006234 <memset>
		strcat(title, update_value[counter]);
 80008e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000a64 <fsm+0x248>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a5f      	ldr	r2, [pc, #380]	@ (8000a68 <fsm+0x24c>)
 80008ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 fca4 	bl	8006244 <strcat>
		strcat(title,"...");
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fc61 	bl	80001c8 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4413      	add	r3, r2
 8000910:	4a56      	ldr	r2, [pc, #344]	@ (8000a6c <fsm+0x250>)
 8000912:	6810      	ldr	r0, [r2, #0]
 8000914:	6018      	str	r0, [r3, #0]
		if (button_count[3] == 1) {
 8000916:	4b51      	ldr	r3, [pc, #324]	@ (8000a5c <fsm+0x240>)
 8000918:	88db      	ldrh	r3, [r3, #6]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d104      	bne.n	8000928 <fsm+0x10c>
			ChangeValue(counter);
 800091e:	4b51      	ldr	r3, [pc, #324]	@ (8000a64 <fsm+0x248>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe48 	bl	80005b8 <ChangeValue>
		if (button_count[3] == 40) {
 8000928:	4b4c      	ldr	r3, [pc, #304]	@ (8000a5c <fsm+0x240>)
 800092a:	88db      	ldrh	r3, [r3, #6]
 800092c:	2b28      	cmp	r3, #40	@ 0x28
 800092e:	d107      	bne.n	8000940 <fsm+0x124>
			setTimer3(200);
 8000930:	20c8      	movs	r0, #200	@ 0xc8
 8000932:	f001 fe0d 	bl	8002550 <setTimer3>
			ChangeValue(counter);
 8000936:	4b4b      	ldr	r3, [pc, #300]	@ (8000a64 <fsm+0x248>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe3c 	bl	80005b8 <ChangeValue>
		if (flag_timer3 && button_count[3] > 40) {
 8000940:	4b4b      	ldr	r3, [pc, #300]	@ (8000a70 <fsm+0x254>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00b      	beq.n	8000960 <fsm+0x144>
 8000948:	4b44      	ldr	r3, [pc, #272]	@ (8000a5c <fsm+0x240>)
 800094a:	88db      	ldrh	r3, [r3, #6]
 800094c:	2b28      	cmp	r3, #40	@ 0x28
 800094e:	d907      	bls.n	8000960 <fsm+0x144>
			setTimer3(200);
 8000950:	20c8      	movs	r0, #200	@ 0xc8
 8000952:	f001 fdfd 	bl	8002550 <setTimer3>
			ChangeValue(counter);
 8000956:	4b43      	ldr	r3, [pc, #268]	@ (8000a64 <fsm+0x248>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe2c 	bl	80005b8 <ChangeValue>
		if(button_count[12] != 0){
 8000960:	4b3e      	ldr	r3, [pc, #248]	@ (8000a5c <fsm+0x240>)
 8000962:	8b1b      	ldrh	r3, [r3, #24]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00d      	beq.n	8000984 <fsm+0x168>
			ApplyChange();
 8000968:	f7ff feec 	bl	8000744 <ApplyChange>
			counter++;
 800096c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a64 <fsm+0x248>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a3c      	ldr	r2, [pc, #240]	@ (8000a64 <fsm+0x248>)
 8000974:	6013      	str	r3, [r2, #0]
			if(counter>5) counter =0;
 8000976:	4b3b      	ldr	r3, [pc, #236]	@ (8000a64 <fsm+0x248>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b05      	cmp	r3, #5
 800097c:	dd02      	ble.n	8000984 <fsm+0x168>
 800097e:	4b39      	ldr	r3, [pc, #228]	@ (8000a64 <fsm+0x248>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
		lcd_StrCenter(110, 20, title, BLUE, YELLOW, 16, 0);
 8000984:	f107 020c 	add.w	r2, r7, #12
 8000988:	2300      	movs	r3, #0
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	2310      	movs	r3, #16
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	231f      	movs	r3, #31
 8000998:	2114      	movs	r1, #20
 800099a:	206e      	movs	r0, #110	@ 0x6e
 800099c:	f000 ffcc 	bl	8001938 <lcd_StrCenter>
		break;
 80009a0:	e045      	b.n	8000a2e <fsm+0x212>
		if (button_count[3] == 1) {
 80009a2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a5c <fsm+0x240>)
 80009a4:	88db      	ldrh	r3, [r3, #6]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d104      	bne.n	80009b4 <fsm+0x198>
			ChangeAlarm(counter);
 80009aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000a64 <fsm+0x248>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff04 	bl	80007bc <ChangeAlarm>
		if (button_count[3] == 40) {
 80009b4:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <fsm+0x240>)
 80009b6:	88db      	ldrh	r3, [r3, #6]
 80009b8:	2b28      	cmp	r3, #40	@ 0x28
 80009ba:	d107      	bne.n	80009cc <fsm+0x1b0>
			setTimer3(200);
 80009bc:	20c8      	movs	r0, #200	@ 0xc8
 80009be:	f001 fdc7 	bl	8002550 <setTimer3>
			ChangeAlarm(counter);
 80009c2:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <fsm+0x248>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fef8 	bl	80007bc <ChangeAlarm>
		if (flag_timer3 && button_count[3] > 40) {
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <fsm+0x254>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d00b      	beq.n	80009ec <fsm+0x1d0>
 80009d4:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <fsm+0x240>)
 80009d6:	88db      	ldrh	r3, [r3, #6]
 80009d8:	2b28      	cmp	r3, #40	@ 0x28
 80009da:	d907      	bls.n	80009ec <fsm+0x1d0>
			setTimer3(200);
 80009dc:	20c8      	movs	r0, #200	@ 0xc8
 80009de:	f001 fdb7 	bl	8002550 <setTimer3>
			ChangeAlarm(counter);
 80009e2:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <fsm+0x248>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fee8 	bl	80007bc <ChangeAlarm>
		if(button_count[12] != 0){
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <fsm+0x240>)
 80009ee:	8b1b      	ldrh	r3, [r3, #24]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00b      	beq.n	8000a0c <fsm+0x1f0>
			counter++;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <fsm+0x248>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000a64 <fsm+0x248>)
 80009fc:	6013      	str	r3, [r2, #0]
			if(counter>2) counter =0;
 80009fe:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <fsm+0x248>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	dd02      	ble.n	8000a0c <fsm+0x1f0>
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <fsm+0x248>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
		lcd_StrCenter(110, 20, "SET ALARM", BLUE, YELLOW, 16, 0);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	9302      	str	r3, [sp, #8]
 8000a10:	2310      	movs	r3, #16
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	231f      	movs	r3, #31
 8000a1c:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <fsm+0x258>)
 8000a1e:	2114      	movs	r1, #20
 8000a20:	206e      	movs	r0, #110	@ 0x6e
 8000a22:	f000 ff89 	bl	8001938 <lcd_StrCenter>
		break;
 8000a26:	e002      	b.n	8000a2e <fsm+0x212>
		break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <fsm+0x212>
		break;
 8000a2c:	bf00      	nop
	}
}
 8000a2e:	bf00      	nop
 8000a30:	3740      	adds	r7, #64	@ 0x40
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	080062f4 	.word	0x080062f4
 8000a3c:	20000087 	.word	0x20000087
 8000a40:	2000007b 	.word	0x2000007b
 8000a44:	20000088 	.word	0x20000088
 8000a48:	2000007c 	.word	0x2000007c
 8000a4c:	20000089 	.word	0x20000089
 8000a50:	2000007d 	.word	0x2000007d
 8000a54:	20000070 	.word	0x20000070
 8000a58:	080062fc 	.word	0x080062fc
 8000a5c:	20000048 	.word	0x20000048
 8000a60:	08006314 	.word	0x08006314
 8000a64:	2000006c 	.word	0x2000006c
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	08006304 	.word	0x08006304
 8000a70:	2000014a 	.word	0x2000014a
 8000a74:	08006308 	.word	0x08006308

08000a78 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000a7c:	201e      	movs	r0, #30
 8000a7e:	f001 ff7d 	bl	800297c <DEC2BCD>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <ds3231_init+0x80>)
 8000a88:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000a8a:	2016      	movs	r0, #22
 8000a8c:	f001 ff76 	bl	800297c <DEC2BCD>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <ds3231_init+0x80>)
 8000a96:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000a98:	2015      	movs	r0, #21
 8000a9a:	f001 ff6f 	bl	800297c <DEC2BCD>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <ds3231_init+0x80>)
 8000aa4:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000aa6:	2006      	movs	r0, #6
 8000aa8:	f001 ff68 	bl	800297c <DEC2BCD>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <ds3231_init+0x80>)
 8000ab2:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000ab4:	200f      	movs	r0, #15
 8000ab6:	f001 ff61 	bl	800297c <DEC2BCD>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <ds3231_init+0x80>)
 8000ac0:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000ac2:	2009      	movs	r0, #9
 8000ac4:	f001 ff5a 	bl	800297c <DEC2BCD>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <ds3231_init+0x80>)
 8000ace:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000ad0:	2017      	movs	r0, #23
 8000ad2:	f001 ff53 	bl	800297c <DEC2BCD>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <ds3231_init+0x80>)
 8000adc:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000ade:	2332      	movs	r3, #50	@ 0x32
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	21d0      	movs	r1, #208	@ 0xd0
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <ds3231_init+0x84>)
 8000ae6:	f002 ff59 	bl	800399c <HAL_I2C_IsDeviceReady>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <ds3231_init+0x7c>
		while(1);
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <ds3231_init+0x78>
	};
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000080 	.word	0x20000080
 8000afc:	200000e4 	.word	0x200000e4

08000b00 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af04      	add	r7, sp, #16
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 ff32 	bl	800297c <DEC2BCD>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	230a      	movs	r3, #10
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	2301      	movs	r3, #1
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	f107 030f 	add.w	r3, r7, #15
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	21d0      	movs	r1, #208	@ 0xd0
 8000b32:	4803      	ldr	r0, [pc, #12]	@ (8000b40 <ds3231_Write+0x40>)
 8000b34:	f002 fc12 	bl	800335c <HAL_I2C_Mem_Write>
}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000e4 	.word	0x200000e4

08000b44 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	2307      	movs	r3, #7
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <ds3231_ReadTime+0xa4>)
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2301      	movs	r3, #1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	21d0      	movs	r1, #208	@ 0xd0
 8000b5c:	4823      	ldr	r0, [pc, #140]	@ (8000bec <ds3231_ReadTime+0xa8>)
 8000b5e:	f002 fcf7 	bl	8003550 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <ds3231_ReadTime+0xa4>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 feee 	bl	8002948 <BCD2DEC>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <ds3231_ReadTime+0xac>)
 8000b72:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <ds3231_ReadTime+0xa4>)
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 fee5 	bl	8002948 <BCD2DEC>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <ds3231_ReadTime+0xb0>)
 8000b84:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <ds3231_ReadTime+0xa4>)
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 fedc 	bl	8002948 <BCD2DEC>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <ds3231_ReadTime+0xb4>)
 8000b96:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000b98:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <ds3231_ReadTime+0xa4>)
 8000b9a:	78db      	ldrb	r3, [r3, #3]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 fed3 	bl	8002948 <BCD2DEC>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <ds3231_ReadTime+0xb8>)
 8000ba8:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <ds3231_ReadTime+0xa4>)
 8000bac:	791b      	ldrb	r3, [r3, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 feca 	bl	8002948 <BCD2DEC>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <ds3231_ReadTime+0xbc>)
 8000bba:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <ds3231_ReadTime+0xa4>)
 8000bbe:	795b      	ldrb	r3, [r3, #5]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fec1 	bl	8002948 <BCD2DEC>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <ds3231_ReadTime+0xc0>)
 8000bcc:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <ds3231_ReadTime+0xa4>)
 8000bd0:	799b      	ldrb	r3, [r3, #6]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 feb8 	bl	8002948 <BCD2DEC>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <ds3231_ReadTime+0xc4>)
 8000bde:	701a      	strb	r2, [r3, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000080 	.word	0x20000080
 8000bec:	200000e4 	.word	0x200000e4
 8000bf0:	20000089 	.word	0x20000089
 8000bf4:	20000088 	.word	0x20000088
 8000bf8:	20000087 	.word	0x20000087
 8000bfc:	2000008b 	.word	0x2000008b
 8000c00:	2000008a 	.word	0x2000008a
 8000c04:	2000008c 	.word	0x2000008c
 8000c08:	2000008d 	.word	0x2000008d

08000c0c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	@ 0x38
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c38:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c3a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000c3e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c40:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c42:	4a2e      	ldr	r2, [pc, #184]	@ (8000cfc <MX_FSMC_Init+0xf0>)
 8000c44:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000c46:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c52:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c58:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c5a:	2210      	movs	r2, #16
 8000c5c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c5e:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c64:	4b24      	ldr	r3, [pc, #144]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000c6a:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c70:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000ca6:	233c      	movs	r3, #60	@ 0x3c
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000cb2:	2311      	movs	r3, #17
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000cba:	2308      	movs	r3, #8
 8000cbc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000cc2:	2309      	movs	r3, #9
 8000cc4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000cce:	2311      	movs	r3, #17
 8000cd0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000cd6:	463a      	mov	r2, r7
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <MX_FSMC_Init+0xec>)
 8000ce0:	f004 fd12 	bl	8005708 <HAL_SRAM_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000cea:	f001 fc05 	bl	80024f8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000cee:	bf00      	nop
 8000cf0:	3738      	adds	r7, #56	@ 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000090 	.word	0x20000090
 8000cfc:	a0000104 	.word	0xa0000104

08000d00 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000d14:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <HAL_FSMC_MspInit+0x88>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d131      	bne.n	8000d80 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <HAL_FSMC_MspInit+0x88>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_FSMC_MspInit+0x8c>)
 8000d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d2a:	4a18      	ldr	r2, [pc, #96]	@ (8000d8c <HAL_FSMC_MspInit+0x8c>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <HAL_FSMC_MspInit+0x8c>)
 8000d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000d3e:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000d42:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d50:	230c      	movs	r3, #12
 8000d52:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <HAL_FSMC_MspInit+0x90>)
 8000d5a:	f002 f805 	bl	8002d68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d5e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000d62:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d70:	230c      	movs	r3, #12
 8000d72:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <HAL_FSMC_MspInit+0x94>)
 8000d7a:	f001 fff5 	bl	8002d68 <HAL_GPIO_Init>
 8000d7e:	e000      	b.n	8000d82 <HAL_FSMC_MspInit+0x82>
    return;
 8000d80:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200000e0 	.word	0x200000e0
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40020c00 	.word	0x40020c00

08000d98 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000da0:	f7ff ffae 	bl	8000d00 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	@ 0x30
 8000db0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	4b6f      	ldr	r3, [pc, #444]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a6e      	ldr	r2, [pc, #440]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	4b68      	ldr	r3, [pc, #416]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a67      	ldr	r2, [pc, #412]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b65      	ldr	r3, [pc, #404]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b61      	ldr	r3, [pc, #388]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a60      	ldr	r2, [pc, #384]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b5e      	ldr	r3, [pc, #376]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a59      	ldr	r2, [pc, #356]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b57      	ldr	r3, [pc, #348]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4b53      	ldr	r3, [pc, #332]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a52      	ldr	r2, [pc, #328]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b50      	ldr	r3, [pc, #320]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b4c      	ldr	r3, [pc, #304]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a4b      	ldr	r2, [pc, #300]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b49      	ldr	r3, [pc, #292]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	4b45      	ldr	r3, [pc, #276]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a44      	ldr	r2, [pc, #272]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b42      	ldr	r3, [pc, #264]	@ (8000f84 <MX_GPIO_Init+0x1d8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2170      	movs	r1, #112	@ 0x70
 8000e8a:	483f      	ldr	r0, [pc, #252]	@ (8000f88 <MX_GPIO_Init+0x1dc>)
 8000e8c:	f002 f908 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e96:	483d      	ldr	r0, [pc, #244]	@ (8000f8c <MX_GPIO_Init+0x1e0>)
 8000e98:	f002 f902 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2140      	movs	r1, #64	@ 0x40
 8000ea0:	483b      	ldr	r0, [pc, #236]	@ (8000f90 <MX_GPIO_Init+0x1e4>)
 8000ea2:	f002 f8fd 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eac:	4839      	ldr	r0, [pc, #228]	@ (8000f94 <MX_GPIO_Init+0x1e8>)
 8000eae:	f002 f8f7 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	4838      	ldr	r0, [pc, #224]	@ (8000f98 <MX_GPIO_Init+0x1ec>)
 8000eb8:	f002 f8f2 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000ebc:	2370      	movs	r3, #112	@ 0x70
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482d      	ldr	r0, [pc, #180]	@ (8000f88 <MX_GPIO_Init+0x1dc>)
 8000ed4:	f001 ff48 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4826      	ldr	r0, [pc, #152]	@ (8000f8c <MX_GPIO_Init+0x1e0>)
 8000ef2:	f001 ff39 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000ef6:	23c0      	movs	r3, #192	@ 0xc0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4822      	ldr	r0, [pc, #136]	@ (8000f94 <MX_GPIO_Init+0x1e8>)
 8000f0a:	f001 ff2d 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000f0e:	2330      	movs	r3, #48	@ 0x30
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481a      	ldr	r0, [pc, #104]	@ (8000f8c <MX_GPIO_Init+0x1e0>)
 8000f22:	f001 ff21 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000f26:	2340      	movs	r3, #64	@ 0x40
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4814      	ldr	r0, [pc, #80]	@ (8000f90 <MX_GPIO_Init+0x1e4>)
 8000f3e:	f001 ff13 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000f42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480e      	ldr	r0, [pc, #56]	@ (8000f94 <MX_GPIO_Init+0x1e8>)
 8000f5c:	f001 ff04 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000f60:	2308      	movs	r3, #8
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <MX_GPIO_Init+0x1ec>)
 8000f78:	f001 fef6 	bl	8002d68 <HAL_GPIO_Init>

}
 8000f7c:	bf00      	nop
 8000f7e:	3730      	adds	r7, #48	@ 0x30
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40021800 	.word	0x40021800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020c00 	.word	0x40020c00

08000f9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fa2:	4a13      	ldr	r2, [pc, #76]	@ (8000ff0 <MX_I2C1_Init+0x54>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fa8:	4a12      	ldr	r2, [pc, #72]	@ (8000ff4 <MX_I2C1_Init+0x58>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fda:	f002 f87b 	bl	80030d4 <HAL_I2C_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe4:	f001 fa88 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000e4 	.word	0x200000e4
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	000186a0 	.word	0x000186a0

08000ff8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	@ (800107c <HAL_I2C_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12b      	bne.n	8001072 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <HAL_I2C_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <HAL_I2C_MspInit+0x88>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_I2C_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001036:	23c0      	movs	r3, #192	@ 0xc0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103a:	2312      	movs	r3, #18
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001046:	2304      	movs	r3, #4
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <HAL_I2C_MspInit+0x8c>)
 8001052:	f001 fe89 	bl	8002d68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <HAL_I2C_MspInit+0x88>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <HAL_I2C_MspInit+0x88>)
 8001060:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001064:	6413      	str	r3, [r2, #64]	@ 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_I2C_MspInit+0x88>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	@ 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40005400 	.word	0x40005400
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400

08001088 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001092:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <LCD_WR_REG+0x1c>)
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	8013      	strh	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	600ffffe 	.word	0x600ffffe

080010a8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80010b2:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <LCD_WR_DATA+0x1c>)
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	8053      	strh	r3, [r2, #2]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	600ffffe 	.word	0x600ffffe

080010c8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <LCD_RD_DATA+0x20>)
 80010d0:	885b      	ldrh	r3, [r3, #2]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	b29b      	uxth	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	600ffffe 	.word	0x600ffffe

080010ec <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4604      	mov	r4, r0
 80010f4:	4608      	mov	r0, r1
 80010f6:	4611      	mov	r1, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4623      	mov	r3, r4
 80010fc:	80fb      	strh	r3, [r7, #6]
 80010fe:	4603      	mov	r3, r0
 8001100:	80bb      	strh	r3, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	807b      	strh	r3, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800110a:	202a      	movs	r0, #42	@ 0x2a
 800110c:	f7ff ffbc 	bl	8001088 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	b29b      	uxth	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffc6 	bl	80010a8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	b29b      	uxth	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ffc0 	bl	80010a8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffba 	bl	80010a8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffb4 	bl	80010a8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001140:	202b      	movs	r0, #43	@ 0x2b
 8001142:	f7ff ffa1 	bl	8001088 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	b29b      	uxth	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ffab 	bl	80010a8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001152:	88bb      	ldrh	r3, [r7, #4]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ffa5 	bl	80010a8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800115e:	883b      	ldrh	r3, [r7, #0]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff9f 	bl	80010a8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800116a:	883b      	ldrh	r3, [r7, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff99 	bl	80010a8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001176:	202c      	movs	r0, #44	@ 0x2c
 8001178:	f7ff ff86 	bl	8001088 <LCD_WR_REG>
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bd90      	pop	{r4, r7, pc}

08001184 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	b29b      	uxth	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <lcd_Clear+0x70>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <lcd_Clear+0x70>)
 80011a8:	885b      	ldrh	r3, [r3, #2]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff ff9b 	bl	80010ec <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	81fb      	strh	r3, [r7, #14]
 80011ba:	e011      	b.n	80011e0 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 80011bc:	2300      	movs	r3, #0
 80011be:	81bb      	strh	r3, [r7, #12]
 80011c0:	e006      	b.n	80011d0 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff6f 	bl	80010a8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80011ca:	89bb      	ldrh	r3, [r7, #12]
 80011cc:	3301      	adds	r3, #1
 80011ce:	81bb      	strh	r3, [r7, #12]
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <lcd_Clear+0x70>)
 80011d2:	885b      	ldrh	r3, [r3, #2]
 80011d4:	89ba      	ldrh	r2, [r7, #12]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3f3      	bcc.n	80011c2 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	3301      	adds	r3, #1
 80011de:	81fb      	strh	r3, [r7, #14]
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <lcd_Clear+0x70>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	89fa      	ldrh	r2, [r7, #14]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3e8      	bcc.n	80011bc <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000138 	.word	0x20000138

080011f8 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4604      	mov	r4, r0
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4623      	mov	r3, r4
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	4603      	mov	r3, r0
 800120c:	80bb      	strh	r3, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]
 8001212:	4613      	mov	r3, r2
 8001214:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	3b01      	subs	r3, #1
 800121a:	b29a      	uxth	r2, r3
 800121c:	883b      	ldrh	r3, [r7, #0]
 800121e:	3b01      	subs	r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	88b9      	ldrh	r1, [r7, #4]
 8001224:	88f8      	ldrh	r0, [r7, #6]
 8001226:	f7ff ff61 	bl	80010ec <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800122a:	88bb      	ldrh	r3, [r7, #4]
 800122c:	81fb      	strh	r3, [r7, #14]
 800122e:	e010      	b.n	8001252 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	81bb      	strh	r3, [r7, #12]
 8001234:	e006      	b.n	8001244 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001236:	8c3b      	ldrh	r3, [r7, #32]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff35 	bl	80010a8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800123e:	89bb      	ldrh	r3, [r7, #12]
 8001240:	3301      	adds	r3, #1
 8001242:	81bb      	strh	r3, [r7, #12]
 8001244:	89ba      	ldrh	r2, [r7, #12]
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	429a      	cmp	r2, r3
 800124a:	d3f4      	bcc.n	8001236 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	3301      	adds	r3, #1
 8001250:	81fb      	strh	r3, [r7, #14]
 8001252:	89fa      	ldrh	r2, [r7, #14]
 8001254:	883b      	ldrh	r3, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d3ea      	bcc.n	8001230 <lcd_Fill+0x38>
		}
	}
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}

08001264 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
 800126e:	460b      	mov	r3, r1
 8001270:	80bb      	strh	r3, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001276:	88bb      	ldrh	r3, [r7, #4]
 8001278:	88fa      	ldrh	r2, [r7, #6]
 800127a:	88b9      	ldrh	r1, [r7, #4]
 800127c:	88f8      	ldrh	r0, [r7, #6]
 800127e:	f7ff ff35 	bl	80010ec <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff0f 	bl	80010a8 <LCD_WR_DATA>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	4603      	mov	r3, r0
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	70fb      	strb	r3, [r7, #3]
 80012ae:	4613      	mov	r3, r2
 80012b0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80012ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4413      	add	r3, r2
 80012de:	b29a      	uxth	r2, r3
 80012e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	fb12 f303 	smulbb	r3, r2, r3
 80012ea:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	3b20      	subs	r3, #32
 80012f0:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b29c      	uxth	r4, r3
 8001300:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001304:	b29a      	uxth	r2, r3
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	b29b      	uxth	r3, r3
 800130c:	3b01      	subs	r3, #1
 800130e:	b29b      	uxth	r3, r3
 8001310:	88b9      	ldrh	r1, [r7, #4]
 8001312:	88f8      	ldrh	r0, [r7, #6]
 8001314:	4622      	mov	r2, r4
 8001316:	f7ff fee9 	bl	80010ec <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800131a:	2300      	movs	r3, #0
 800131c:	827b      	strh	r3, [r7, #18]
 800131e:	e07a      	b.n	8001416 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001320:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001324:	2b0c      	cmp	r3, #12
 8001326:	d028      	beq.n	800137a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001328:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800132c:	2b10      	cmp	r3, #16
 800132e:	d108      	bne.n	8001342 <lcd_ShowChar+0xae>
 8001330:	78fa      	ldrb	r2, [r7, #3]
 8001332:	8a7b      	ldrh	r3, [r7, #18]
 8001334:	493c      	ldr	r1, [pc, #240]	@ (8001428 <lcd_ShowChar+0x194>)
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	440a      	add	r2, r1
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	75fb      	strb	r3, [r7, #23]
 8001340:	e01b      	b.n	800137a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8001342:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001346:	2b18      	cmp	r3, #24
 8001348:	d10b      	bne.n	8001362 <lcd_ShowChar+0xce>
 800134a:	78fa      	ldrb	r2, [r7, #3]
 800134c:	8a79      	ldrh	r1, [r7, #18]
 800134e:	4837      	ldr	r0, [pc, #220]	@ (800142c <lcd_ShowChar+0x198>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4403      	add	r3, r0
 800135a:	440b      	add	r3, r1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	75fb      	strb	r3, [r7, #23]
 8001360:	e00b      	b.n	800137a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8001362:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001366:	2b20      	cmp	r3, #32
 8001368:	d15a      	bne.n	8001420 <lcd_ShowChar+0x18c>
 800136a:	78fa      	ldrb	r2, [r7, #3]
 800136c:	8a7b      	ldrh	r3, [r7, #18]
 800136e:	4930      	ldr	r1, [pc, #192]	@ (8001430 <lcd_ShowChar+0x19c>)
 8001370:	0192      	lsls	r2, r2, #6
 8001372:	440a      	add	r2, r1
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800137a:	2300      	movs	r3, #0
 800137c:	75bb      	strb	r3, [r7, #22]
 800137e:	e044      	b.n	800140a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001380:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001384:	2b00      	cmp	r3, #0
 8001386:	d120      	bne.n	80013ca <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001388:	7dfa      	ldrb	r2, [r7, #23]
 800138a:	7dbb      	ldrb	r3, [r7, #22]
 800138c:	fa42 f303 	asr.w	r3, r2, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <lcd_ShowChar+0x10e>
 8001398:	883b      	ldrh	r3, [r7, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe84 	bl	80010a8 <LCD_WR_DATA>
 80013a0:	e003      	b.n	80013aa <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80013a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe7f 	bl	80010a8 <LCD_WR_DATA>
				m++;
 80013aa:	7d7b      	ldrb	r3, [r7, #21]
 80013ac:	3301      	adds	r3, #1
 80013ae:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80013b0:	7d7b      	ldrb	r3, [r7, #21]
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80013b8:	fb01 f202 	mul.w	r2, r1, r2
 80013bc:	1a9b      	subs	r3, r3, r2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d11f      	bne.n	8001404 <lcd_ShowChar+0x170>
				{
					m=0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	757b      	strb	r3, [r7, #21]
					break;
 80013c8:	e022      	b.n	8001410 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80013ca:	7dfa      	ldrb	r2, [r7, #23]
 80013cc:	7dbb      	ldrb	r3, [r7, #22]
 80013ce:	fa42 f303 	asr.w	r3, r2, r3
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <lcd_ShowChar+0x152>
 80013da:	883a      	ldrh	r2, [r7, #0]
 80013dc:	88b9      	ldrh	r1, [r7, #4]
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff3f 	bl	8001264 <lcd_DrawPoint>
				x++;
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	3301      	adds	r3, #1
 80013ea:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80013ec:	88fa      	ldrh	r2, [r7, #6]
 80013ee:	8a3b      	ldrh	r3, [r7, #16]
 80013f0:	1ad2      	subs	r2, r2, r3
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d105      	bne.n	8001404 <lcd_ShowChar+0x170>
				{
					x=x0;
 80013f8:	8a3b      	ldrh	r3, [r7, #16]
 80013fa:	80fb      	strh	r3, [r7, #6]
					y++;
 80013fc:	88bb      	ldrh	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	80bb      	strh	r3, [r7, #4]
					break;
 8001402:	e005      	b.n	8001410 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001404:	7dbb      	ldrb	r3, [r7, #22]
 8001406:	3301      	adds	r3, #1
 8001408:	75bb      	strb	r3, [r7, #22]
 800140a:	7dbb      	ldrb	r3, [r7, #22]
 800140c:	2b07      	cmp	r3, #7
 800140e:	d9b7      	bls.n	8001380 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001410:	8a7b      	ldrh	r3, [r7, #18]
 8001412:	3301      	adds	r3, #1
 8001414:	827b      	strh	r3, [r7, #18]
 8001416:	8a7a      	ldrh	r2, [r7, #18]
 8001418:	89bb      	ldrh	r3, [r7, #12]
 800141a:	429a      	cmp	r2, r3
 800141c:	d380      	bcc.n	8001320 <lcd_ShowChar+0x8c>
 800141e:	e000      	b.n	8001422 <lcd_ShowChar+0x18e>
		else return;
 8001420:	bf00      	nop
				}
			}
		}
	}
}
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	08006320 	.word	0x08006320
 800142c:	08006910 	.word	0x08006910
 8001430:	08007ae0 	.word	0x08007ae0

08001434 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	4613      	mov	r3, r2
 8001442:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001444:	2301      	movs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001448:	e004      	b.n	8001454 <mypow+0x20>
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	1e5a      	subs	r2, r3, #1
 8001458:	71ba      	strb	r2, [r7, #6]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f5      	bne.n	800144a <mypow+0x16>
	return result;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af04      	add	r7, sp, #16
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4603      	mov	r3, r0
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]
 8001486:	4613      	mov	r3, r2
 8001488:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800148a:	2300      	movs	r3, #0
 800148c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800148e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e059      	b.n	8001550 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 800149c:	887c      	ldrh	r4, [r7, #2]
 800149e:	787a      	ldrb	r2, [r7, #1]
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	200a      	movs	r0, #10
 80014ae:	f7ff ffc1 	bl	8001434 <mypow>
 80014b2:	4603      	mov	r3, r0
 80014b4:	fbb4 f1f3 	udiv	r1, r4, r3
 80014b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001564 <lcd_ShowIntNum+0xf8>)
 80014ba:	fba3 2301 	umull	r2, r3, r3, r1
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	1aca      	subs	r2, r1, r3
 80014ca:	4613      	mov	r3, r2
 80014cc:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80014ce:	7bbb      	ldrb	r3, [r7, #14]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d121      	bne.n	8001518 <lcd_ShowIntNum+0xac>
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	787b      	ldrb	r3, [r7, #1]
 80014d8:	3b01      	subs	r3, #1
 80014da:	429a      	cmp	r2, r3
 80014dc:	da1c      	bge.n	8001518 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80014de:	7b3b      	ldrb	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d117      	bne.n	8001514 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	7b7b      	ldrb	r3, [r7, #13]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	fb12 f303 	smulbb	r3, r2, r3
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	4413      	add	r3, r2
 80014f6:	b298      	uxth	r0, r3
 80014f8:	8c3a      	ldrh	r2, [r7, #32]
 80014fa:	88b9      	ldrh	r1, [r7, #4]
 80014fc:	2300      	movs	r3, #0
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4613      	mov	r3, r2
 800150c:	2220      	movs	r2, #32
 800150e:	f7ff fec1 	bl	8001294 <lcd_ShowChar>
				continue;
 8001512:	e01a      	b.n	800154a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001514:	2301      	movs	r3, #1
 8001516:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	b29a      	uxth	r2, r3
 800151c:	7b7b      	ldrb	r3, [r7, #13]
 800151e:	b29b      	uxth	r3, r3
 8001520:	fb12 f303 	smulbb	r3, r2, r3
 8001524:	b29a      	uxth	r2, r3
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	4413      	add	r3, r2
 800152a:	b298      	uxth	r0, r3
 800152c:	7b3b      	ldrb	r3, [r7, #12]
 800152e:	3330      	adds	r3, #48	@ 0x30
 8001530:	b2da      	uxtb	r2, r3
 8001532:	8c3c      	ldrh	r4, [r7, #32]
 8001534:	88b9      	ldrh	r1, [r7, #4]
 8001536:	2300      	movs	r3, #0
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4623      	mov	r3, r4
 8001546:	f7ff fea5 	bl	8001294 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	3301      	adds	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	787b      	ldrb	r3, [r7, #1]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3a1      	bcc.n	800149c <lcd_ShowIntNum+0x30>
	}
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	cccccccd 	.word	0xcccccccd

08001568 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <lcd_SetDir+0x44>)
 8001584:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001588:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <lcd_SetDir+0x44>)
 800158c:	22f0      	movs	r2, #240	@ 0xf0
 800158e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001590:	e006      	b.n	80015a0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <lcd_SetDir+0x44>)
 8001594:	22f0      	movs	r2, #240	@ 0xf0
 8001596:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001598:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <lcd_SetDir+0x44>)
 800159a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800159e:	805a      	strh	r2, [r3, #2]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	20000138 	.word	0x20000138

080015b0 <lcd_init>:


void lcd_init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ba:	48aa      	ldr	r0, [pc, #680]	@ (8001864 <lcd_init+0x2b4>)
 80015bc:	f001 fd70 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80015c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015c4:	f001 fa9a 	bl	8002afc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ce:	48a5      	ldr	r0, [pc, #660]	@ (8001864 <lcd_init+0x2b4>)
 80015d0:	f001 fd66 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80015d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015d8:	f001 fa90 	bl	8002afc <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff ffc3 	bl	8001568 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80015e2:	20d3      	movs	r0, #211	@ 0xd3
 80015e4:	f7ff fd50 	bl	8001088 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80015e8:	f7ff fd6e 	bl	80010c8 <LCD_RD_DATA>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b9d      	ldr	r3, [pc, #628]	@ (8001868 <lcd_init+0x2b8>)
 80015f2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80015f4:	f7ff fd68 	bl	80010c8 <LCD_RD_DATA>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b9a      	ldr	r3, [pc, #616]	@ (8001868 <lcd_init+0x2b8>)
 80015fe:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001600:	f7ff fd62 	bl	80010c8 <LCD_RD_DATA>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b97      	ldr	r3, [pc, #604]	@ (8001868 <lcd_init+0x2b8>)
 800160a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800160c:	4b96      	ldr	r3, [pc, #600]	@ (8001868 <lcd_init+0x2b8>)
 800160e:	889b      	ldrh	r3, [r3, #4]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b94      	ldr	r3, [pc, #592]	@ (8001868 <lcd_init+0x2b8>)
 8001616:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001618:	f7ff fd56 	bl	80010c8 <LCD_RD_DATA>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4b91      	ldr	r3, [pc, #580]	@ (8001868 <lcd_init+0x2b8>)
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	4313      	orrs	r3, r2
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b8f      	ldr	r3, [pc, #572]	@ (8001868 <lcd_init+0x2b8>)
 800162a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800162c:	20cf      	movs	r0, #207	@ 0xcf
 800162e:	f7ff fd2b 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff fd38 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001638:	20c1      	movs	r0, #193	@ 0xc1
 800163a:	f7ff fd35 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800163e:	2030      	movs	r0, #48	@ 0x30
 8001640:	f7ff fd32 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001644:	20ed      	movs	r0, #237	@ 0xed
 8001646:	f7ff fd1f 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800164a:	2064      	movs	r0, #100	@ 0x64
 800164c:	f7ff fd2c 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001650:	2003      	movs	r0, #3
 8001652:	f7ff fd29 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001656:	2012      	movs	r0, #18
 8001658:	f7ff fd26 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800165c:	2081      	movs	r0, #129	@ 0x81
 800165e:	f7ff fd23 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001662:	20e8      	movs	r0, #232	@ 0xe8
 8001664:	f7ff fd10 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001668:	2085      	movs	r0, #133	@ 0x85
 800166a:	f7ff fd1d 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800166e:	2010      	movs	r0, #16
 8001670:	f7ff fd1a 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001674:	207a      	movs	r0, #122	@ 0x7a
 8001676:	f7ff fd17 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800167a:	20cb      	movs	r0, #203	@ 0xcb
 800167c:	f7ff fd04 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001680:	2039      	movs	r0, #57	@ 0x39
 8001682:	f7ff fd11 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001686:	202c      	movs	r0, #44	@ 0x2c
 8001688:	f7ff fd0e 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fd0b 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001692:	2034      	movs	r0, #52	@ 0x34
 8001694:	f7ff fd08 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001698:	2002      	movs	r0, #2
 800169a:	f7ff fd05 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800169e:	20f7      	movs	r0, #247	@ 0xf7
 80016a0:	f7ff fcf2 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80016a4:	2020      	movs	r0, #32
 80016a6:	f7ff fcff 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80016aa:	20ea      	movs	r0, #234	@ 0xea
 80016ac:	f7ff fcec 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fcf9 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fcf6 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80016bc:	20c0      	movs	r0, #192	@ 0xc0
 80016be:	f7ff fce3 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80016c2:	201b      	movs	r0, #27
 80016c4:	f7ff fcf0 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80016c8:	20c1      	movs	r0, #193	@ 0xc1
 80016ca:	f7ff fcdd 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fcea 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80016d4:	20c5      	movs	r0, #197	@ 0xc5
 80016d6:	f7ff fcd7 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80016da:	2030      	movs	r0, #48	@ 0x30
 80016dc:	f7ff fce4 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80016e0:	2030      	movs	r0, #48	@ 0x30
 80016e2:	f7ff fce1 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80016e6:	20c7      	movs	r0, #199	@ 0xc7
 80016e8:	f7ff fcce 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80016ec:	20b7      	movs	r0, #183	@ 0xb7
 80016ee:	f7ff fcdb 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80016f2:	2036      	movs	r0, #54	@ 0x36
 80016f4:	f7ff fcc8 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80016f8:	2008      	movs	r0, #8
 80016fa:	f7ff fcd5 	bl	80010a8 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80016fe:	203a      	movs	r0, #58	@ 0x3a
 8001700:	f7ff fcc2 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001704:	2055      	movs	r0, #85	@ 0x55
 8001706:	f7ff fccf 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800170a:	20b1      	movs	r0, #177	@ 0xb1
 800170c:	f7ff fcbc 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fcc9 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001716:	201a      	movs	r0, #26
 8001718:	f7ff fcc6 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800171c:	20b6      	movs	r0, #182	@ 0xb6
 800171e:	f7ff fcb3 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001722:	200a      	movs	r0, #10
 8001724:	f7ff fcc0 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001728:	20a2      	movs	r0, #162	@ 0xa2
 800172a:	f7ff fcbd 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800172e:	20f2      	movs	r0, #242	@ 0xf2
 8001730:	f7ff fcaa 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fcb7 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800173a:	2026      	movs	r0, #38	@ 0x26
 800173c:	f7ff fca4 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff fcb1 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001746:	20e0      	movs	r0, #224	@ 0xe0
 8001748:	f7ff fc9e 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800174c:	200f      	movs	r0, #15
 800174e:	f7ff fcab 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001752:	202a      	movs	r0, #42	@ 0x2a
 8001754:	f7ff fca8 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001758:	2028      	movs	r0, #40	@ 0x28
 800175a:	f7ff fca5 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800175e:	2008      	movs	r0, #8
 8001760:	f7ff fca2 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001764:	200e      	movs	r0, #14
 8001766:	f7ff fc9f 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800176a:	2008      	movs	r0, #8
 800176c:	f7ff fc9c 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001770:	2054      	movs	r0, #84	@ 0x54
 8001772:	f7ff fc99 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001776:	20a9      	movs	r0, #169	@ 0xa9
 8001778:	f7ff fc96 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800177c:	2043      	movs	r0, #67	@ 0x43
 800177e:	f7ff fc93 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001782:	200a      	movs	r0, #10
 8001784:	f7ff fc90 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001788:	200f      	movs	r0, #15
 800178a:	f7ff fc8d 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800178e:	2000      	movs	r0, #0
 8001790:	f7ff fc8a 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff fc87 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fc84 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fc81 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80017a6:	20e1      	movs	r0, #225	@ 0xe1
 80017a8:	f7ff fc6e 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff fc7b 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80017b2:	2015      	movs	r0, #21
 80017b4:	f7ff fc78 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80017b8:	2017      	movs	r0, #23
 80017ba:	f7ff fc75 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80017be:	2007      	movs	r0, #7
 80017c0:	f7ff fc72 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80017c4:	2011      	movs	r0, #17
 80017c6:	f7ff fc6f 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80017ca:	2006      	movs	r0, #6
 80017cc:	f7ff fc6c 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80017d0:	202b      	movs	r0, #43	@ 0x2b
 80017d2:	f7ff fc69 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80017d6:	2056      	movs	r0, #86	@ 0x56
 80017d8:	f7ff fc66 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80017dc:	203c      	movs	r0, #60	@ 0x3c
 80017de:	f7ff fc63 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80017e2:	2005      	movs	r0, #5
 80017e4:	f7ff fc60 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80017e8:	2010      	movs	r0, #16
 80017ea:	f7ff fc5d 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f7ff fc5a 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80017f4:	203f      	movs	r0, #63	@ 0x3f
 80017f6:	f7ff fc57 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80017fa:	203f      	movs	r0, #63	@ 0x3f
 80017fc:	f7ff fc54 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001800:	200f      	movs	r0, #15
 8001802:	f7ff fc51 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001806:	202b      	movs	r0, #43	@ 0x2b
 8001808:	f7ff fc3e 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff fc4b 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fc48 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001818:	2001      	movs	r0, #1
 800181a:	f7ff fc45 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800181e:	203f      	movs	r0, #63	@ 0x3f
 8001820:	f7ff fc42 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001824:	202a      	movs	r0, #42	@ 0x2a
 8001826:	f7ff fc2f 	bl	8001088 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fc3c 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff fc39 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fc36 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800183c:	20ef      	movs	r0, #239	@ 0xef
 800183e:	f7ff fc33 	bl	80010a8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001842:	2011      	movs	r0, #17
 8001844:	f7ff fc20 	bl	8001088 <LCD_WR_REG>
	HAL_Delay(120);
 8001848:	2078      	movs	r0, #120	@ 0x78
 800184a:	f001 f957 	bl	8002afc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800184e:	2029      	movs	r0, #41	@ 0x29
 8001850:	f7ff fc1a 	bl	8001088 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800185a:	4804      	ldr	r0, [pc, #16]	@ (800186c <lcd_init+0x2bc>)
 800185c:	f001 fc20 	bl	80030a0 <HAL_GPIO_WritePin>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020800 	.word	0x40020800
 8001868:	20000138 	.word	0x20000138
 800186c:	40020000 	.word	0x40020000

08001870 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b08b      	sub	sp, #44	@ 0x2c
 8001874:	af04      	add	r7, sp, #16
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	81fb      	strh	r3, [r7, #14]
 800187e:	460b      	mov	r3, r1
 8001880:	81bb      	strh	r3, [r7, #12]
 8001882:	4613      	mov	r3, r2
 8001884:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800188e:	e048      	b.n	8001922 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d145      	bne.n	8001922 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001896:	89fa      	ldrh	r2, [r7, #14]
 8001898:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <lcd_ShowStr+0xc4>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018a2:	085b      	lsrs	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	1acb      	subs	r3, r1, r3
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dc3f      	bgt.n	800192c <lcd_ShowStr+0xbc>
 80018ac:	89ba      	ldrh	r2, [r7, #12]
 80018ae:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <lcd_ShowStr+0xc4>)
 80018b0:	885b      	ldrh	r3, [r3, #2]
 80018b2:	4619      	mov	r1, r3
 80018b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018b8:	1acb      	subs	r3, r1, r3
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dc36      	bgt.n	800192c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b80      	cmp	r3, #128	@ 0x80
 80018c4:	d902      	bls.n	80018cc <lcd_ShowStr+0x5c>
 80018c6:	2301      	movs	r3, #1
 80018c8:	75fb      	strb	r3, [r7, #23]
 80018ca:	e02a      	b.n	8001922 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b0d      	cmp	r3, #13
 80018d2:	d10b      	bne.n	80018ec <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80018d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018d8:	b29a      	uxth	r2, r3
 80018da:	89bb      	ldrh	r3, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80018e0:	8abb      	ldrh	r3, [r7, #20]
 80018e2:	81fb      	strh	r3, [r7, #14]
					str++;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	e017      	b.n	800191c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	88fc      	ldrh	r4, [r7, #6]
 80018f2:	89b9      	ldrh	r1, [r7, #12]
 80018f4:	89f8      	ldrh	r0, [r7, #14]
 80018f6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	4623      	mov	r3, r4
 8001908:	f7ff fcc4 	bl	8001294 <lcd_ShowChar>
					x+=sizey/2;
 800190c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	89fb      	ldrh	r3, [r7, #14]
 8001918:	4413      	add	r3, r2
 800191a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3301      	adds	r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1b2      	bne.n	8001890 <lcd_ShowStr+0x20>
 800192a:	e000      	b.n	800192e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800192c:	bf00      	nop
			}
		}
	}
}
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	20000138 	.word	0x20000138

08001938 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	@ 0x28
 800193c:	af04      	add	r7, sp, #16
 800193e:	60ba      	str	r2, [r7, #8]
 8001940:	461a      	mov	r2, r3
 8001942:	4603      	mov	r3, r0
 8001944:	81fb      	strh	r3, [r7, #14]
 8001946:	460b      	mov	r3, r1
 8001948:	81bb      	strh	r3, [r7, #12]
 800194a:	4613      	mov	r3, r2
 800194c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800194e:	68b8      	ldr	r0, [r7, #8]
 8001950:	f7fe fc3a 	bl	80001c8 <strlen>
 8001954:	4603      	mov	r3, r0
 8001956:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <lcd_StrCenter+0x60>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	8afb      	ldrh	r3, [r7, #22]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	0fda      	lsrs	r2, r3, #31
 8001966:	4413      	add	r3, r2
 8001968:	105b      	asrs	r3, r3, #1
 800196a:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 800196c:	89fa      	ldrh	r2, [r7, #14]
 800196e:	8abb      	ldrh	r3, [r7, #20]
 8001970:	4413      	add	r3, r2
 8001972:	b298      	uxth	r0, r3
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	89b9      	ldrh	r1, [r7, #12]
 8001978:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	8c3b      	ldrh	r3, [r7, #32]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f7ff ff70 	bl	8001870 <lcd_ShowStr>
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000138 	.word	0x20000138

0800199c <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80019a0:	2201      	movs	r2, #1
 80019a2:	2140      	movs	r1, #64	@ 0x40
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <led7_init+0x14>)
 80019a6:	f001 fb7b 	bl	80030a0 <HAL_GPIO_WritePin>
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40021800 	.word	0x40021800

080019b4 <led7_Scan>:

void led7_Scan(){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80019b8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab8 <led7_Scan+0x104>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab8 <led7_Scan+0x104>)
 80019c2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80019c4:	4b3d      	ldr	r3, [pc, #244]	@ (8001abc <led7_Scan+0x108>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac0 <led7_Scan+0x10c>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <led7_Scan+0x104>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b21b      	sxth	r3, r3
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <led7_Scan+0x104>)
 80019de:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80019e0:	4b36      	ldr	r3, [pc, #216]	@ (8001abc <led7_Scan+0x108>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d847      	bhi.n	8001a78 <led7_Scan+0xc4>
 80019e8:	a201      	add	r2, pc, #4	@ (adr r2, 80019f0 <led7_Scan+0x3c>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001a1f 	.word	0x08001a1f
 80019f8:	08001a3d 	.word	0x08001a3d
 80019fc:	08001a5b 	.word	0x08001a5b
	case 0:
		spi_buffer |= 0x00b0;
 8001a00:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <led7_Scan+0x104>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab8 <led7_Scan+0x104>)
 8001a0c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <led7_Scan+0x104>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <led7_Scan+0x104>)
 8001a1a:	801a      	strh	r2, [r3, #0]
		break;
 8001a1c:	e02d      	b.n	8001a7a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001a1e:	4b26      	ldr	r3, [pc, #152]	@ (8001ab8 <led7_Scan+0x104>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <led7_Scan+0x104>)
 8001a2a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001a2c:	4b22      	ldr	r3, [pc, #136]	@ (8001ab8 <led7_Scan+0x104>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	f023 0320 	bic.w	r3, r3, #32
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <led7_Scan+0x104>)
 8001a38:	801a      	strh	r2, [r3, #0]
		break;
 8001a3a:	e01e      	b.n	8001a7a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <led7_Scan+0x104>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <led7_Scan+0x104>)
 8001a48:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <led7_Scan+0x104>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	f023 0310 	bic.w	r3, r3, #16
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <led7_Scan+0x104>)
 8001a56:	801a      	strh	r2, [r3, #0]
		break;
 8001a58:	e00f      	b.n	8001a7a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <led7_Scan+0x104>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <led7_Scan+0x104>)
 8001a66:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <led7_Scan+0x104>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <led7_Scan+0x104>)
 8001a74:	801a      	strh	r2, [r3, #0]
		break;
 8001a76:	e000      	b.n	8001a7a <led7_Scan+0xc6>
	default:
		break;
 8001a78:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <led7_Scan+0x108>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	425a      	negs	r2, r3
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	f002 0203 	and.w	r2, r2, #3
 8001a8a:	bf58      	it	pl
 8001a8c:	4253      	negpl	r3, r2
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <led7_Scan+0x108>)
 8001a90:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2140      	movs	r1, #64	@ 0x40
 8001a96:	480b      	ldr	r0, [pc, #44]	@ (8001ac4 <led7_Scan+0x110>)
 8001a98:	f001 fb02 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4905      	ldr	r1, [pc, #20]	@ (8001ab8 <led7_Scan+0x104>)
 8001aa2:	4809      	ldr	r0, [pc, #36]	@ (8001ac8 <led7_Scan+0x114>)
 8001aa4:	f003 f911 	bl	8004cca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2140      	movs	r1, #64	@ 0x40
 8001aac:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <led7_Scan+0x110>)
 8001aae:	f001 faf7 	bl	80030a0 <HAL_GPIO_WritePin>
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000001c 	.word	0x2000001c
 8001abc:	20000140 	.word	0x20000140
 8001ac0:	20000018 	.word	0x20000018
 8001ac4:	40021800 	.word	0x40021800
 8001ac8:	20000158 	.word	0x20000158

08001acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  int sta=1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	607b      	str	r3, [r7, #4]
	  	int status=0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ada:	f000 ff9d 	bl	8002a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ade:	f000 f855 	bl	8001b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae2:	f7ff f963 	bl	8000dac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001ae6:	f000 febd 	bl	8002864 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001aea:	f000 fdc9 	bl	8002680 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001aee:	f7ff f88d 	bl	8000c0c <MX_FSMC_Init>
  MX_I2C1_Init();
 8001af2:	f7ff fa53 	bl	8000f9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001af6:	f000 f8b3 	bl	8001c60 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fb42 	bl	8001184 <lcd_Clear>
 updateTime();
 8001b00:	f000 f8d0 	bl	8001ca4 <updateTime>
  while (1)
  {
	  if(!flag_timer2){
 8001b04:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <main+0xb4>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <main+0x54>
		  setTimer2(50);
 8001b0c:	2032      	movs	r0, #50	@ 0x32
 8001b0e:	f000 fd03 	bl	8002518 <setTimer2>
		  button_Scan();
 8001b12:	f7fe fce5 	bl	80004e0 <button_Scan>
		  fsm(status);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fe7e 	bl	800081c <fsm>
	  }
	  if(status ==1){
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d102      	bne.n	8001b2c <main+0x60>
		  Flashing_cal(sta);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f95a 	bl	8001de0 <Flashing_cal>
	  }
	  if(status==2){
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d102      	bne.n	8001b38 <main+0x6c>
		  Flashing_alarm(sta);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fc26 	bl	8002384 <Flashing_alarm>
	  }
	  if(button_count[0]){
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <main+0xb8>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00f      	beq.n	8001b60 <main+0x94>
		  status++;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	603b      	str	r3, [r7, #0]
		  if(status >2) status =0;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	dd01      	ble.n	8001b50 <main+0x84>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	603b      	str	r3, [r7, #0]
		  if(status != 0){
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <main+0x94>
			  setTimer4(250);
 8001b56:	20fa      	movs	r0, #250	@ 0xfa
 8001b58:	f000 fd16 	bl	8002588 <setTimer4>
			  sta=1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	607b      	str	r3, [r7, #4]
		  }
	  }
	  if(flag_timer4){
 8001b60:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <main+0xbc>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0cd      	beq.n	8001b04 <main+0x38>
		  setTimer4(250);
 8001b68:	20fa      	movs	r0, #250	@ 0xfa
 8001b6a:	f000 fd0d 	bl	8002588 <setTimer4>
		  sta=!sta;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	607b      	str	r3, [r7, #4]
	  if(!flag_timer2){
 8001b7c:	e7c2      	b.n	8001b04 <main+0x38>
 8001b7e:	bf00      	nop
 8001b80:	20000144 	.word	0x20000144
 8001b84:	20000048 	.word	0x20000048
 8001b88:	20000150 	.word	0x20000150

08001b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b094      	sub	sp, #80	@ 0x50
 8001b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b92:	f107 0320 	add.w	r3, r7, #32
 8001b96:	2230      	movs	r2, #48	@ 0x30
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 fb4a 	bl	8006234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <SystemClock_Config+0xcc>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	4a27      	ldr	r2, [pc, #156]	@ (8001c58 <SystemClock_Config+0xcc>)
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc0:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <SystemClock_Config+0xcc>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <SystemClock_Config+0xd0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <SystemClock_Config+0xd0>)
 8001bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <SystemClock_Config+0xd0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be8:	2302      	movs	r3, #2
 8001bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bec:	2301      	movs	r3, #1
 8001bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c00:	23a8      	movs	r3, #168	@ 0xa8
 8001c02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c04:	2302      	movs	r3, #2
 8001c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0c:	f107 0320 	add.w	r3, r7, #32
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fb4d 	bl	80042b0 <HAL_RCC_OscConfig>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c1c:	f000 fc6c 	bl	80024f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c20:	230f      	movs	r3, #15
 8001c22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c24:	2302      	movs	r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2105      	movs	r1, #5
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 fdae 	bl	80047a0 <HAL_RCC_ClockConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c4a:	f000 fc55 	bl	80024f8 <Error_Handler>
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3750      	adds	r7, #80	@ 0x50
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000

08001c60 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2120      	movs	r1, #32
 8001c68:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <system_init+0x40>)
 8001c6a:	f001 fa19 	bl	80030a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2140      	movs	r1, #64	@ 0x40
 8001c72:	480b      	ldr	r0, [pc, #44]	@ (8001ca0 <system_init+0x40>)
 8001c74:	f001 fa14 	bl	80030a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2110      	movs	r1, #16
 8001c7c:	4808      	ldr	r0, [pc, #32]	@ (8001ca0 <system_init+0x40>)
 8001c7e:	f001 fa0f 	bl	80030a0 <HAL_GPIO_WritePin>
	  timer_init();
 8001c82:	f000 fc3f 	bl	8002504 <timer_init>
	  led7_init();
 8001c86:	f7ff fe89 	bl	800199c <led7_init>
	  button_init();
 8001c8a:	f7fe fc1d 	bl	80004c8 <button_init>
	  lcd_init();
 8001c8e:	f7ff fc8f 	bl	80015b0 <lcd_init>
	  ds3231_init();
 8001c92:	f7fe fef1 	bl	8000a78 <ds3231_init>
	  setTimer2(50);
 8001c96:	2032      	movs	r0, #50	@ 0x32
 8001c98:	f000 fc3e 	bl	8002518 <setTimer2>

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 8001ca8:	2117      	movs	r1, #23
 8001caa:	2006      	movs	r0, #6
 8001cac:	f7fe ff28 	bl	8000b00 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 8001cb0:	210a      	movs	r1, #10
 8001cb2:	2005      	movs	r0, #5
 8001cb4:	f7fe ff24 	bl	8000b00 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 8001cb8:	2114      	movs	r1, #20
 8001cba:	2004      	movs	r0, #4
 8001cbc:	f7fe ff20 	bl	8000b00 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8001cc0:	2106      	movs	r1, #6
 8001cc2:	2003      	movs	r0, #3
 8001cc4:	f7fe ff1c 	bl	8000b00 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 8001cc8:	2114      	movs	r1, #20
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f7fe ff18 	bl	8000b00 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 8001cd0:	210b      	movs	r1, #11
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7fe ff14 	bl	8000b00 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 8001cd8:	2117      	movs	r1, #23
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f7fe ff10 	bl	8000b00 <ds3231_Write>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <displayTime>:
    if (button_count[7] == 1)
        return 1;
    else
        return 0;
}
void displayTime(){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001cea:	4b36      	ldr	r3, [pc, #216]	@ (8001dc4 <displayTime+0xe0>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2318      	movs	r3, #24
 8001cf2:	9302      	str	r3, [sp, #8]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	2164      	movs	r1, #100	@ 0x64
 8001d02:	2046      	movs	r0, #70	@ 0x46
 8001d04:	f7ff fbb2 	bl	800146c <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001d08:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc8 <displayTime+0xe4>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2318      	movs	r3, #24
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	2300      	movs	r3, #0
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	2164      	movs	r1, #100	@ 0x64
 8001d20:	206e      	movs	r0, #110	@ 0x6e
 8001d22:	f7ff fba3 	bl	800146c <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001d26:	4b29      	ldr	r3, [pc, #164]	@ (8001dcc <displayTime+0xe8>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2318      	movs	r3, #24
 8001d2e:	9302      	str	r3, [sp, #8]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	2164      	movs	r1, #100	@ 0x64
 8001d3e:	2096      	movs	r0, #150	@ 0x96
 8001d40:	f7ff fb94 	bl	800146c <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001d44:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <displayTime+0xec>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2318      	movs	r3, #24
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	2182      	movs	r1, #130	@ 0x82
 8001d5c:	2014      	movs	r0, #20
 8001d5e:	f7ff fb85 	bl	800146c <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001d62:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <displayTime+0xf0>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	2318      	movs	r3, #24
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2302      	movs	r3, #2
 8001d78:	2182      	movs	r1, #130	@ 0x82
 8001d7a:	2046      	movs	r0, #70	@ 0x46
 8001d7c:	f7ff fb76 	bl	800146c <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001d80:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <displayTime+0xf4>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	2318      	movs	r3, #24
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2302      	movs	r3, #2
 8001d96:	2182      	movs	r1, #130	@ 0x82
 8001d98:	206e      	movs	r0, #110	@ 0x6e
 8001d9a:	f7ff fb67 	bl	800146c <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <displayTime+0xf8>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	2318      	movs	r3, #24
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2302      	movs	r3, #2
 8001db4:	2182      	movs	r1, #130	@ 0x82
 8001db6:	2096      	movs	r0, #150	@ 0x96
 8001db8:	f7ff fb58 	bl	800146c <lcd_ShowIntNum>
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000087 	.word	0x20000087
 8001dc8:	20000088 	.word	0x20000088
 8001dcc:	20000089 	.word	0x20000089
 8001dd0:	2000008b 	.word	0x2000008b
 8001dd4:	2000008a 	.word	0x2000008a
 8001dd8:	2000008c 	.word	0x2000008c
 8001ddc:	2000008d 	.word	0x2000008d

08001de0 <Flashing_cal>:
void Flashing_cal(int sta){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af04      	add	r7, sp, #16
 8001de6:	6078      	str	r0, [r7, #4]
	lcd_Fill(0, 50, 200, 160, BLACK);
 8001de8:	2300      	movs	r3, #0
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	23a0      	movs	r3, #160	@ 0xa0
 8001dee:	22c8      	movs	r2, #200	@ 0xc8
 8001df0:	2132      	movs	r1, #50	@ 0x32
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff fa00 	bl	80011f8 <lcd_Fill>
	switch (sta) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	f200 82ad 	bhi.w	800235a <Flashing_cal+0x57a>
 8001e00:	a201      	add	r2, pc, #4	@ (adr r2, 8001e08 <Flashing_cal+0x28>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001efb 	.word	0x08001efb
 8001e10:	08001fd5 	.word	0x08001fd5
 8001e14:	080020cd 	.word	0x080020cd
 8001e18:	080021a7 	.word	0x080021a7
 8001e1c:	08002281 	.word	0x08002281
	case 0:
		lcd_ShowIntNum(70, 100, cal_hour, 2, GREEN, BLACK, 24);
 8001e20:	4ba3      	ldr	r3, [pc, #652]	@ (80020b0 <Flashing_cal+0x2d0>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	2318      	movs	r3, #24
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2302      	movs	r3, #2
 8001e36:	2164      	movs	r1, #100	@ 0x64
 8001e38:	2046      	movs	r0, #70	@ 0x46
 8001e3a:	f7ff fb17 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 8001e3e:	4b9d      	ldr	r3, [pc, #628]	@ (80020b4 <Flashing_cal+0x2d4>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	2318      	movs	r3, #24
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2302      	movs	r3, #2
 8001e54:	2164      	movs	r1, #100	@ 0x64
 8001e56:	206e      	movs	r0, #110	@ 0x6e
 8001e58:	f7ff fb08 	bl	800146c <lcd_ShowIntNum>
		if (sta)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00e      	beq.n	8001e80 <Flashing_cal+0xa0>
			lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 8001e62:	4b95      	ldr	r3, [pc, #596]	@ (80020b8 <Flashing_cal+0x2d8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	2318      	movs	r3, #24
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2302      	movs	r3, #2
 8001e78:	2164      	movs	r1, #100	@ 0x64
 8001e7a:	2096      	movs	r0, #150	@ 0x96
 8001e7c:	f7ff faf6 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, cal_day, 2, YELLOW, BLACK, 24);
 8001e80:	4b8e      	ldr	r3, [pc, #568]	@ (80020bc <Flashing_cal+0x2dc>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	2318      	movs	r3, #24
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2302      	movs	r3, #2
 8001e96:	2182      	movs	r1, #130	@ 0x82
 8001e98:	2014      	movs	r0, #20
 8001e9a:	f7ff fae7 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, cal_date, 2, YELLOW, BLACK, 24);
 8001e9e:	4b88      	ldr	r3, [pc, #544]	@ (80020c0 <Flashing_cal+0x2e0>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2318      	movs	r3, #24
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	2182      	movs	r1, #130	@ 0x82
 8001eb6:	2046      	movs	r0, #70	@ 0x46
 8001eb8:	f7ff fad8 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, cal_month, 2, YELLOW, BLACK, 24);
 8001ebc:	4b81      	ldr	r3, [pc, #516]	@ (80020c4 <Flashing_cal+0x2e4>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2318      	movs	r3, #24
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	2182      	movs	r1, #130	@ 0x82
 8001ed4:	206e      	movs	r0, #110	@ 0x6e
 8001ed6:	f7ff fac9 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, cal_year, 2, YELLOW, BLACK, 24);
 8001eda:	4b7b      	ldr	r3, [pc, #492]	@ (80020c8 <Flashing_cal+0x2e8>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2318      	movs	r3, #24
 8001ee2:	9302      	str	r3, [sp, #8]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2302      	movs	r3, #2
 8001ef0:	2182      	movs	r1, #130	@ 0x82
 8001ef2:	2096      	movs	r0, #150	@ 0x96
 8001ef4:	f7ff faba 	bl	800146c <lcd_ShowIntNum>
		break;
 8001ef8:	e232      	b.n	8002360 <Flashing_cal+0x580>
	case 1:
		lcd_ShowIntNum(70, 100, cal_hour, 2, GREEN, BLACK, 24);
 8001efa:	4b6d      	ldr	r3, [pc, #436]	@ (80020b0 <Flashing_cal+0x2d0>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	2318      	movs	r3, #24
 8001f02:	9302      	str	r3, [sp, #8]
 8001f04:	2300      	movs	r3, #0
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2302      	movs	r3, #2
 8001f10:	2164      	movs	r1, #100	@ 0x64
 8001f12:	2046      	movs	r0, #70	@ 0x46
 8001f14:	f7ff faaa 	bl	800146c <lcd_ShowIntNum>
		if (sta)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00e      	beq.n	8001f3c <Flashing_cal+0x15c>
			lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 8001f1e:	4b65      	ldr	r3, [pc, #404]	@ (80020b4 <Flashing_cal+0x2d4>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	2318      	movs	r3, #24
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2302      	movs	r3, #2
 8001f34:	2164      	movs	r1, #100	@ 0x64
 8001f36:	206e      	movs	r0, #110	@ 0x6e
 8001f38:	f7ff fa98 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 8001f3c:	4b5e      	ldr	r3, [pc, #376]	@ (80020b8 <Flashing_cal+0x2d8>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	2318      	movs	r3, #24
 8001f44:	9302      	str	r3, [sp, #8]
 8001f46:	2300      	movs	r3, #0
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2302      	movs	r3, #2
 8001f52:	2164      	movs	r1, #100	@ 0x64
 8001f54:	2096      	movs	r0, #150	@ 0x96
 8001f56:	f7ff fa89 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, cal_day, 2, YELLOW, BLACK, 24);
 8001f5a:	4b58      	ldr	r3, [pc, #352]	@ (80020bc <Flashing_cal+0x2dc>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2318      	movs	r3, #24
 8001f62:	9302      	str	r3, [sp, #8]
 8001f64:	2300      	movs	r3, #0
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2302      	movs	r3, #2
 8001f70:	2182      	movs	r1, #130	@ 0x82
 8001f72:	2014      	movs	r0, #20
 8001f74:	f7ff fa7a 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, cal_date, 2, YELLOW, BLACK, 24);
 8001f78:	4b51      	ldr	r3, [pc, #324]	@ (80020c0 <Flashing_cal+0x2e0>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2318      	movs	r3, #24
 8001f80:	9302      	str	r3, [sp, #8]
 8001f82:	2300      	movs	r3, #0
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	2182      	movs	r1, #130	@ 0x82
 8001f90:	2046      	movs	r0, #70	@ 0x46
 8001f92:	f7ff fa6b 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, cal_month, 2, YELLOW, BLACK, 24);
 8001f96:	4b4b      	ldr	r3, [pc, #300]	@ (80020c4 <Flashing_cal+0x2e4>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2318      	movs	r3, #24
 8001f9e:	9302      	str	r3, [sp, #8]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2302      	movs	r3, #2
 8001fac:	2182      	movs	r1, #130	@ 0x82
 8001fae:	206e      	movs	r0, #110	@ 0x6e
 8001fb0:	f7ff fa5c 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, cal_year, 2, YELLOW, BLACK, 24);
 8001fb4:	4b44      	ldr	r3, [pc, #272]	@ (80020c8 <Flashing_cal+0x2e8>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2318      	movs	r3, #24
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2302      	movs	r3, #2
 8001fca:	2182      	movs	r1, #130	@ 0x82
 8001fcc:	2096      	movs	r0, #150	@ 0x96
 8001fce:	f7ff fa4d 	bl	800146c <lcd_ShowIntNum>
		break;
 8001fd2:	e1c5      	b.n	8002360 <Flashing_cal+0x580>
	case 2:
		if (sta)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00e      	beq.n	8001ff8 <Flashing_cal+0x218>
			lcd_ShowIntNum(70, 100, cal_hour, 2, GREEN, BLACK, 24);
 8001fda:	4b35      	ldr	r3, [pc, #212]	@ (80020b0 <Flashing_cal+0x2d0>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2318      	movs	r3, #24
 8001fe2:	9302      	str	r3, [sp, #8]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2302      	movs	r3, #2
 8001ff0:	2164      	movs	r1, #100	@ 0x64
 8001ff2:	2046      	movs	r0, #70	@ 0x46
 8001ff4:	f7ff fa3a 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80020b4 <Flashing_cal+0x2d4>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2318      	movs	r3, #24
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	2300      	movs	r3, #0
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2302      	movs	r3, #2
 800200e:	2164      	movs	r1, #100	@ 0x64
 8002010:	206e      	movs	r0, #110	@ 0x6e
 8002012:	f7ff fa2b 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 8002016:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <Flashing_cal+0x2d8>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	2318      	movs	r3, #24
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2302      	movs	r3, #2
 800202c:	2164      	movs	r1, #100	@ 0x64
 800202e:	2096      	movs	r0, #150	@ 0x96
 8002030:	f7ff fa1c 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, cal_day, 2, YELLOW, BLACK, 24);
 8002034:	4b21      	ldr	r3, [pc, #132]	@ (80020bc <Flashing_cal+0x2dc>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	2318      	movs	r3, #24
 800203c:	9302      	str	r3, [sp, #8]
 800203e:	2300      	movs	r3, #0
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2302      	movs	r3, #2
 800204a:	2182      	movs	r1, #130	@ 0x82
 800204c:	2014      	movs	r0, #20
 800204e:	f7ff fa0d 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, cal_date, 2, YELLOW, BLACK, 24);
 8002052:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <Flashing_cal+0x2e0>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	2318      	movs	r3, #24
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2302      	movs	r3, #2
 8002068:	2182      	movs	r1, #130	@ 0x82
 800206a:	2046      	movs	r0, #70	@ 0x46
 800206c:	f7ff f9fe 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, cal_month, 2, YELLOW, BLACK, 24);
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <Flashing_cal+0x2e4>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	2318      	movs	r3, #24
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	2300      	movs	r3, #0
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2302      	movs	r3, #2
 8002086:	2182      	movs	r1, #130	@ 0x82
 8002088:	206e      	movs	r0, #110	@ 0x6e
 800208a:	f7ff f9ef 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, cal_year, 2, YELLOW, BLACK, 24);
 800208e:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <Flashing_cal+0x2e8>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	2318      	movs	r3, #24
 8002096:	9302      	str	r3, [sp, #8]
 8002098:	2300      	movs	r3, #0
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2302      	movs	r3, #2
 80020a4:	2182      	movs	r1, #130	@ 0x82
 80020a6:	2096      	movs	r0, #150	@ 0x96
 80020a8:	f7ff f9e0 	bl	800146c <lcd_ShowIntNum>
		break;
 80020ac:	e158      	b.n	8002360 <Flashing_cal+0x580>
 80020ae:	bf00      	nop
 80020b0:	20000074 	.word	0x20000074
 80020b4:	20000075 	.word	0x20000075
 80020b8:	20000076 	.word	0x20000076
 80020bc:	20000078 	.word	0x20000078
 80020c0:	20000077 	.word	0x20000077
 80020c4:	20000079 	.word	0x20000079
 80020c8:	2000007a 	.word	0x2000007a
	case 3:
		lcd_ShowIntNum(70, 100, cal_hour, 2, GREEN, BLACK, 24);
 80020cc:	4ba6      	ldr	r3, [pc, #664]	@ (8002368 <Flashing_cal+0x588>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	2318      	movs	r3, #24
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	2300      	movs	r3, #0
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2302      	movs	r3, #2
 80020e2:	2164      	movs	r1, #100	@ 0x64
 80020e4:	2046      	movs	r0, #70	@ 0x46
 80020e6:	f7ff f9c1 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 80020ea:	4ba0      	ldr	r3, [pc, #640]	@ (800236c <Flashing_cal+0x58c>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	2318      	movs	r3, #24
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	2300      	movs	r3, #0
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2302      	movs	r3, #2
 8002100:	2164      	movs	r1, #100	@ 0x64
 8002102:	206e      	movs	r0, #110	@ 0x6e
 8002104:	f7ff f9b2 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 8002108:	4b99      	ldr	r3, [pc, #612]	@ (8002370 <Flashing_cal+0x590>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	2318      	movs	r3, #24
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2302      	movs	r3, #2
 800211e:	2164      	movs	r1, #100	@ 0x64
 8002120:	2096      	movs	r0, #150	@ 0x96
 8002122:	f7ff f9a3 	bl	800146c <lcd_ShowIntNum>
		if (sta) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01d      	beq.n	8002168 <Flashing_cal+0x388>
			lcd_ShowIntNum(20, 130, cal_day, 2, YELLOW, BLACK, 24);
 800212c:	4b91      	ldr	r3, [pc, #580]	@ (8002374 <Flashing_cal+0x594>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	2318      	movs	r3, #24
 8002134:	9302      	str	r3, [sp, #8]
 8002136:	2300      	movs	r3, #0
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2302      	movs	r3, #2
 8002142:	2182      	movs	r1, #130	@ 0x82
 8002144:	2014      	movs	r0, #20
 8002146:	f7ff f991 	bl	800146c <lcd_ShowIntNum>
			lcd_ShowIntNum(70, 130, cal_date, 2, YELLOW, BLACK, 24);
 800214a:	4b8b      	ldr	r3, [pc, #556]	@ (8002378 <Flashing_cal+0x598>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	2318      	movs	r3, #24
 8002152:	9302      	str	r3, [sp, #8]
 8002154:	2300      	movs	r3, #0
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2302      	movs	r3, #2
 8002160:	2182      	movs	r1, #130	@ 0x82
 8002162:	2046      	movs	r0, #70	@ 0x46
 8002164:	f7ff f982 	bl	800146c <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(110, 130, cal_month, 2, YELLOW, BLACK, 24);
 8002168:	4b84      	ldr	r3, [pc, #528]	@ (800237c <Flashing_cal+0x59c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	2318      	movs	r3, #24
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2300      	movs	r3, #0
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2302      	movs	r3, #2
 800217e:	2182      	movs	r1, #130	@ 0x82
 8002180:	206e      	movs	r0, #110	@ 0x6e
 8002182:	f7ff f973 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, cal_year, 2, YELLOW, BLACK, 24);
 8002186:	4b7e      	ldr	r3, [pc, #504]	@ (8002380 <Flashing_cal+0x5a0>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	2318      	movs	r3, #24
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	2300      	movs	r3, #0
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2302      	movs	r3, #2
 800219c:	2182      	movs	r1, #130	@ 0x82
 800219e:	2096      	movs	r0, #150	@ 0x96
 80021a0:	f7ff f964 	bl	800146c <lcd_ShowIntNum>
		break;
 80021a4:	e0dc      	b.n	8002360 <Flashing_cal+0x580>
	case 4:
		lcd_ShowIntNum(70, 100, cal_hour, 2, GREEN, BLACK, 24);
 80021a6:	4b70      	ldr	r3, [pc, #448]	@ (8002368 <Flashing_cal+0x588>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	2318      	movs	r3, #24
 80021ae:	9302      	str	r3, [sp, #8]
 80021b0:	2300      	movs	r3, #0
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2302      	movs	r3, #2
 80021bc:	2164      	movs	r1, #100	@ 0x64
 80021be:	2046      	movs	r0, #70	@ 0x46
 80021c0:	f7ff f954 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 80021c4:	4b69      	ldr	r3, [pc, #420]	@ (800236c <Flashing_cal+0x58c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	2318      	movs	r3, #24
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2300      	movs	r3, #0
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2302      	movs	r3, #2
 80021da:	2164      	movs	r1, #100	@ 0x64
 80021dc:	206e      	movs	r0, #110	@ 0x6e
 80021de:	f7ff f945 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 80021e2:	4b63      	ldr	r3, [pc, #396]	@ (8002370 <Flashing_cal+0x590>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	2318      	movs	r3, #24
 80021ea:	9302      	str	r3, [sp, #8]
 80021ec:	2300      	movs	r3, #0
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2302      	movs	r3, #2
 80021f8:	2164      	movs	r1, #100	@ 0x64
 80021fa:	2096      	movs	r0, #150	@ 0x96
 80021fc:	f7ff f936 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, cal_day, 2, YELLOW, BLACK, 24);
 8002200:	4b5c      	ldr	r3, [pc, #368]	@ (8002374 <Flashing_cal+0x594>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	2318      	movs	r3, #24
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	2300      	movs	r3, #0
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2302      	movs	r3, #2
 8002216:	2182      	movs	r1, #130	@ 0x82
 8002218:	2014      	movs	r0, #20
 800221a:	f7ff f927 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, cal_date, 2, YELLOW, BLACK, 24);
 800221e:	4b56      	ldr	r3, [pc, #344]	@ (8002378 <Flashing_cal+0x598>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	2318      	movs	r3, #24
 8002226:	9302      	str	r3, [sp, #8]
 8002228:	2300      	movs	r3, #0
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2302      	movs	r3, #2
 8002234:	2182      	movs	r1, #130	@ 0x82
 8002236:	2046      	movs	r0, #70	@ 0x46
 8002238:	f7ff f918 	bl	800146c <lcd_ShowIntNum>
		if (sta)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00e      	beq.n	8002260 <Flashing_cal+0x480>
			lcd_ShowIntNum(110, 130, cal_month, 2, YELLOW, BLACK, 24);
 8002242:	4b4e      	ldr	r3, [pc, #312]	@ (800237c <Flashing_cal+0x59c>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	2318      	movs	r3, #24
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	2300      	movs	r3, #0
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2302      	movs	r3, #2
 8002258:	2182      	movs	r1, #130	@ 0x82
 800225a:	206e      	movs	r0, #110	@ 0x6e
 800225c:	f7ff f906 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, cal_year, 2, YELLOW, BLACK, 24);
 8002260:	4b47      	ldr	r3, [pc, #284]	@ (8002380 <Flashing_cal+0x5a0>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	2318      	movs	r3, #24
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	2300      	movs	r3, #0
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2302      	movs	r3, #2
 8002276:	2182      	movs	r1, #130	@ 0x82
 8002278:	2096      	movs	r0, #150	@ 0x96
 800227a:	f7ff f8f7 	bl	800146c <lcd_ShowIntNum>
		break;
 800227e:	e06f      	b.n	8002360 <Flashing_cal+0x580>
	case 5:
		lcd_ShowIntNum(70, 100, cal_hour, 2, GREEN, BLACK, 24);
 8002280:	4b39      	ldr	r3, [pc, #228]	@ (8002368 <Flashing_cal+0x588>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	2318      	movs	r3, #24
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	2300      	movs	r3, #0
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2302      	movs	r3, #2
 8002296:	2164      	movs	r1, #100	@ 0x64
 8002298:	2046      	movs	r0, #70	@ 0x46
 800229a:	f7ff f8e7 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, cal_min, 2, GREEN, BLACK, 24);
 800229e:	4b33      	ldr	r3, [pc, #204]	@ (800236c <Flashing_cal+0x58c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	2318      	movs	r3, #24
 80022a6:	9302      	str	r3, [sp, #8]
 80022a8:	2300      	movs	r3, #0
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2302      	movs	r3, #2
 80022b4:	2164      	movs	r1, #100	@ 0x64
 80022b6:	206e      	movs	r0, #110	@ 0x6e
 80022b8:	f7ff f8d8 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, cal_sec, 2, GREEN, BLACK, 24);
 80022bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002370 <Flashing_cal+0x590>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	2318      	movs	r3, #24
 80022c4:	9302      	str	r3, [sp, #8]
 80022c6:	2300      	movs	r3, #0
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2302      	movs	r3, #2
 80022d2:	2164      	movs	r1, #100	@ 0x64
 80022d4:	2096      	movs	r0, #150	@ 0x96
 80022d6:	f7ff f8c9 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, cal_day, 2, YELLOW, BLACK, 24);
 80022da:	4b26      	ldr	r3, [pc, #152]	@ (8002374 <Flashing_cal+0x594>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	2318      	movs	r3, #24
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	2300      	movs	r3, #0
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2302      	movs	r3, #2
 80022f0:	2182      	movs	r1, #130	@ 0x82
 80022f2:	2014      	movs	r0, #20
 80022f4:	f7ff f8ba 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, cal_date, 2, YELLOW, BLACK, 24);
 80022f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002378 <Flashing_cal+0x598>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	2318      	movs	r3, #24
 8002300:	9302      	str	r3, [sp, #8]
 8002302:	2300      	movs	r3, #0
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2302      	movs	r3, #2
 800230e:	2182      	movs	r1, #130	@ 0x82
 8002310:	2046      	movs	r0, #70	@ 0x46
 8002312:	f7ff f8ab 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, cal_month, 2, YELLOW, BLACK, 24);
 8002316:	4b19      	ldr	r3, [pc, #100]	@ (800237c <Flashing_cal+0x59c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	2318      	movs	r3, #24
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2300      	movs	r3, #0
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2302      	movs	r3, #2
 800232c:	2182      	movs	r1, #130	@ 0x82
 800232e:	206e      	movs	r0, #110	@ 0x6e
 8002330:	f7ff f89c 	bl	800146c <lcd_ShowIntNum>
		if (sta)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d011      	beq.n	800235e <Flashing_cal+0x57e>
			lcd_ShowIntNum(150, 130, cal_year, 2, YELLOW, BLACK, 24);
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <Flashing_cal+0x5a0>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	2318      	movs	r3, #24
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	2300      	movs	r3, #0
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	2302      	movs	r3, #2
 8002350:	2182      	movs	r1, #130	@ 0x82
 8002352:	2096      	movs	r0, #150	@ 0x96
 8002354:	f7ff f88a 	bl	800146c <lcd_ShowIntNum>
		break;
 8002358:	e001      	b.n	800235e <Flashing_cal+0x57e>
	default:
		break;
 800235a:	bf00      	nop
 800235c:	e000      	b.n	8002360 <Flashing_cal+0x580>
		break;
 800235e:	bf00      	nop
	}
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000074 	.word	0x20000074
 800236c:	20000075 	.word	0x20000075
 8002370:	20000076 	.word	0x20000076
 8002374:	20000078 	.word	0x20000078
 8002378:	20000077 	.word	0x20000077
 800237c:	20000079 	.word	0x20000079
 8002380:	2000007a 	.word	0x2000007a

08002384 <Flashing_alarm>:
void Flashing_alarm(int sta){
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af04      	add	r7, sp, #16
 800238a:	6078      	str	r0, [r7, #4]
	lcd_Fill(0, 50, 200, 160, BLACK);
 800238c:	2300      	movs	r3, #0
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	23a0      	movs	r3, #160	@ 0xa0
 8002392:	22c8      	movs	r2, #200	@ 0xc8
 8002394:	2132      	movs	r1, #50	@ 0x32
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe ff2e 	bl	80011f8 <lcd_Fill>
	switch (sta) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d06c      	beq.n	800247c <Flashing_alarm+0xf8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	f300 809a 	bgt.w	80024de <Flashing_alarm+0x15a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <Flashing_alarm+0x34>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d031      	beq.n	800241a <Flashing_alarm+0x96>
			lcd_ShowIntNum(70, 100, al_hours, 2, GREEN, BLACK, 24);
		lcd_ShowIntNum(110, 100, al_min, 2, GREEN, BLACK, 24);
		lcd_ShowIntNum(150, 100, al_sec, 2, GREEN, BLACK, 24);
		break;
	default:
		break;
 80023b6:	e092      	b.n	80024de <Flashing_alarm+0x15a>
		lcd_ShowIntNum(70, 100, al_hours, 2, GREEN, BLACK, 24);
 80023b8:	4b4c      	ldr	r3, [pc, #304]	@ (80024ec <Flashing_alarm+0x168>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	2318      	movs	r3, #24
 80023c0:	9302      	str	r3, [sp, #8]
 80023c2:	2300      	movs	r3, #0
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2302      	movs	r3, #2
 80023ce:	2164      	movs	r1, #100	@ 0x64
 80023d0:	2046      	movs	r0, #70	@ 0x46
 80023d2:	f7ff f84b 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, al_min, 2, GREEN, BLACK, 24);
 80023d6:	4b46      	ldr	r3, [pc, #280]	@ (80024f0 <Flashing_alarm+0x16c>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	2318      	movs	r3, #24
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	2300      	movs	r3, #0
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2302      	movs	r3, #2
 80023ec:	2164      	movs	r1, #100	@ 0x64
 80023ee:	206e      	movs	r0, #110	@ 0x6e
 80023f0:	f7ff f83c 	bl	800146c <lcd_ShowIntNum>
		if (sta)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d073      	beq.n	80024e2 <Flashing_alarm+0x15e>
			lcd_ShowIntNum(150, 100, al_sec, 2, GREEN, BLACK, 24);
 80023fa:	4b3e      	ldr	r3, [pc, #248]	@ (80024f4 <Flashing_alarm+0x170>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	2318      	movs	r3, #24
 8002402:	9302      	str	r3, [sp, #8]
 8002404:	2300      	movs	r3, #0
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2302      	movs	r3, #2
 8002410:	2164      	movs	r1, #100	@ 0x64
 8002412:	2096      	movs	r0, #150	@ 0x96
 8002414:	f7ff f82a 	bl	800146c <lcd_ShowIntNum>
		break;
 8002418:	e063      	b.n	80024e2 <Flashing_alarm+0x15e>
		lcd_ShowIntNum(70, 100, al_hours, 2, GREEN, BLACK, 24);
 800241a:	4b34      	ldr	r3, [pc, #208]	@ (80024ec <Flashing_alarm+0x168>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	2318      	movs	r3, #24
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	2300      	movs	r3, #0
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2302      	movs	r3, #2
 8002430:	2164      	movs	r1, #100	@ 0x64
 8002432:	2046      	movs	r0, #70	@ 0x46
 8002434:	f7ff f81a 	bl	800146c <lcd_ShowIntNum>
		if (sta)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00e      	beq.n	800245c <Flashing_alarm+0xd8>
			lcd_ShowIntNum(110, 100, al_min, 2, GREEN, BLACK, 24);
 800243e:	4b2c      	ldr	r3, [pc, #176]	@ (80024f0 <Flashing_alarm+0x16c>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	2318      	movs	r3, #24
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	2300      	movs	r3, #0
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2302      	movs	r3, #2
 8002454:	2164      	movs	r1, #100	@ 0x64
 8002456:	206e      	movs	r0, #110	@ 0x6e
 8002458:	f7ff f808 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, al_sec, 2, GREEN, BLACK, 24);
 800245c:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <Flashing_alarm+0x170>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	2318      	movs	r3, #24
 8002464:	9302      	str	r3, [sp, #8]
 8002466:	2300      	movs	r3, #0
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2302      	movs	r3, #2
 8002472:	2164      	movs	r1, #100	@ 0x64
 8002474:	2096      	movs	r0, #150	@ 0x96
 8002476:	f7fe fff9 	bl	800146c <lcd_ShowIntNum>
		break;
 800247a:	e033      	b.n	80024e4 <Flashing_alarm+0x160>
		if (sta)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00e      	beq.n	80024a0 <Flashing_alarm+0x11c>
			lcd_ShowIntNum(70, 100, al_hours, 2, GREEN, BLACK, 24);
 8002482:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <Flashing_alarm+0x168>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	2318      	movs	r3, #24
 800248a:	9302      	str	r3, [sp, #8]
 800248c:	2300      	movs	r3, #0
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2302      	movs	r3, #2
 8002498:	2164      	movs	r1, #100	@ 0x64
 800249a:	2046      	movs	r0, #70	@ 0x46
 800249c:	f7fe ffe6 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, al_min, 2, GREEN, BLACK, 24);
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <Flashing_alarm+0x16c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	2318      	movs	r3, #24
 80024a8:	9302      	str	r3, [sp, #8]
 80024aa:	2300      	movs	r3, #0
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2302      	movs	r3, #2
 80024b6:	2164      	movs	r1, #100	@ 0x64
 80024b8:	206e      	movs	r0, #110	@ 0x6e
 80024ba:	f7fe ffd7 	bl	800146c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, al_sec, 2, GREEN, BLACK, 24);
 80024be:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <Flashing_alarm+0x170>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	2318      	movs	r3, #24
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	2300      	movs	r3, #0
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2302      	movs	r3, #2
 80024d4:	2164      	movs	r1, #100	@ 0x64
 80024d6:	2096      	movs	r0, #150	@ 0x96
 80024d8:	f7fe ffc8 	bl	800146c <lcd_ShowIntNum>
		break;
 80024dc:	e002      	b.n	80024e4 <Flashing_alarm+0x160>
		break;
 80024de:	bf00      	nop
 80024e0:	e000      	b.n	80024e4 <Flashing_alarm+0x160>
		break;
 80024e2:	bf00      	nop
	}
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2000007b 	.word	0x2000007b
 80024f0:	2000007c 	.word	0x2000007c
 80024f4:	2000007d 	.word	0x2000007d

080024f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <Error_Handler+0x8>

08002504 <timer_init>:
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;
uint16_t flag_timer4 = 0;
uint16_t timer4_counter = 0;
uint16_t timer4_MUL = 0;
void timer_init(){
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002508:	4802      	ldr	r0, [pc, #8]	@ (8002514 <timer_init+0x10>)
 800250a:	f003 f991 	bl	8005830 <HAL_TIM_Base_Start_IT>
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200001b0 	.word	0x200001b0

08002518 <setTimer2>:

void setTimer2(uint16_t duration){
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002522:	4a08      	ldr	r2, [pc, #32]	@ (8002544 <setTimer2+0x2c>)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <setTimer2+0x2c>)
 800252a:	881a      	ldrh	r2, [r3, #0]
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <setTimer2+0x30>)
 800252e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <setTimer2+0x34>)
 8002532:	2200      	movs	r2, #0
 8002534:	801a      	strh	r2, [r3, #0]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000148 	.word	0x20000148
 8002548:	20000146 	.word	0x20000146
 800254c:	20000144 	.word	0x20000144

08002550 <setTimer3>:
void setTimer3(uint16_t duration){
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 800255a:	4a08      	ldr	r2, [pc, #32]	@ (800257c <setTimer3+0x2c>)
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <setTimer3+0x2c>)
 8002562:	881a      	ldrh	r2, [r3, #0]
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <setTimer3+0x30>)
 8002566:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <setTimer3+0x34>)
 800256a:	2200      	movs	r2, #0
 800256c:	801a      	strh	r2, [r3, #0]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	2000014e 	.word	0x2000014e
 8002580:	2000014c 	.word	0x2000014c
 8002584:	2000014a 	.word	0x2000014a

08002588 <setTimer4>:
void setTimer4(uint16_t duration){
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 8002592:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <setTimer4+0x2c>)
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8002598:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <setTimer4+0x2c>)
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <setTimer4+0x30>)
 800259e:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 80025a0:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <setTimer4+0x34>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	801a      	strh	r2, [r3, #0]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000154 	.word	0x20000154
 80025b8:	20000152 	.word	0x20000152
 80025bc:	20000150 	.word	0x20000150

080025c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d0:	d140      	bne.n	8002654 <HAL_TIM_PeriodElapsedCallback+0x94>
		if (timer2_counter > 0) {
 80025d2:	4b22      	ldr	r3, [pc, #136]	@ (800265c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d010      	beq.n	80025fc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80025da:	4b20      	ldr	r3, [pc, #128]	@ (800265c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	4b1e      	ldr	r3, [pc, #120]	@ (800265c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80025e4:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 80025e6:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80025ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002660 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80025f6:	881a      	ldrh	r2, [r3, #0]
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80025fa:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer3_counter > 0) {
 80025fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d010      	beq.n	8002626 <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8002604:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800260e:	801a      	strh	r2, [r3, #0]
			if (timer3_counter == 0) {
 8002610:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8002618:	4b14      	ldr	r3, [pc, #80]	@ (800266c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800261a:	2201      	movs	r2, #1
 800261c:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002620:	881a      	ldrh	r2, [r3, #0]
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002624:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer4_counter > 0) {
 8002626:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d010      	beq.n	8002650 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 800262e:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002638:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 800263a:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 8002642:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002644:	2201      	movs	r2, #1
 8002646:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800264e:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002650:	f7ff f9b0 	bl	80019b4 <led7_Scan>
	}
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000146 	.word	0x20000146
 8002660:	20000144 	.word	0x20000144
 8002664:	20000148 	.word	0x20000148
 8002668:	2000014c 	.word	0x2000014c
 800266c:	2000014a 	.word	0x2000014a
 8002670:	2000014e 	.word	0x2000014e
 8002674:	20000152 	.word	0x20000152
 8002678:	20000150 	.word	0x20000150
 800267c:	20000154 	.word	0x20000154

08002680 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002684:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <MX_SPI1_Init+0x64>)
 8002686:	4a18      	ldr	r2, [pc, #96]	@ (80026e8 <MX_SPI1_Init+0x68>)
 8002688:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800268a:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <MX_SPI1_Init+0x64>)
 800268c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002690:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002692:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <MX_SPI1_Init+0x64>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002698:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <MX_SPI1_Init+0x64>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800269e:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <MX_SPI1_Init+0x64>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <MX_SPI1_Init+0x64>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <MX_SPI1_Init+0x64>)
 80026ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b2:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <MX_SPI1_Init+0x64>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <MX_SPI1_Init+0x64>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026be:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <MX_SPI1_Init+0x64>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c4:	4b07      	ldr	r3, [pc, #28]	@ (80026e4 <MX_SPI1_Init+0x64>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <MX_SPI1_Init+0x64>)
 80026cc:	220a      	movs	r2, #10
 80026ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026d0:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <MX_SPI1_Init+0x64>)
 80026d2:	f002 fa71 	bl	8004bb8 <HAL_SPI_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026dc:	f7ff ff0c 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000158 	.word	0x20000158
 80026e8:	40013000 	.word	0x40013000

080026ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	@ 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a19      	ldr	r2, [pc, #100]	@ (8002770 <HAL_SPI_MspInit+0x84>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d12b      	bne.n	8002766 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <HAL_SPI_MspInit+0x88>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	4a17      	ldr	r2, [pc, #92]	@ (8002774 <HAL_SPI_MspInit+0x88>)
 8002718:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800271c:	6453      	str	r3, [r2, #68]	@ 0x44
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <HAL_SPI_MspInit+0x88>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <HAL_SPI_MspInit+0x88>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	4a10      	ldr	r2, [pc, #64]	@ (8002774 <HAL_SPI_MspInit+0x88>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	6313      	str	r3, [r2, #48]	@ 0x30
 800273a:	4b0e      	ldr	r3, [pc, #56]	@ (8002774 <HAL_SPI_MspInit+0x88>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002746:	2338      	movs	r3, #56	@ 0x38
 8002748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002752:	2303      	movs	r3, #3
 8002754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002756:	2305      	movs	r3, #5
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	@ (8002778 <HAL_SPI_MspInit+0x8c>)
 8002762:	f000 fb01 	bl	8002d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002766:	bf00      	nop
 8002768:	3728      	adds	r7, #40	@ 0x28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40013000 	.word	0x40013000
 8002774:	40023800 	.word	0x40023800
 8002778:	40020400 	.word	0x40020400

0800277c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <HAL_MspInit+0x4c>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	4a0f      	ldr	r2, [pc, #60]	@ (80027c8 <HAL_MspInit+0x4c>)
 800278c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002790:	6453      	str	r3, [r2, #68]	@ 0x44
 8002792:	4b0d      	ldr	r3, [pc, #52]	@ (80027c8 <HAL_MspInit+0x4c>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <HAL_MspInit+0x4c>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a08      	ldr	r2, [pc, #32]	@ (80027c8 <HAL_MspInit+0x4c>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_MspInit+0x4c>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800

080027cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <NMI_Handler+0x4>

080027d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <MemManage_Handler+0x4>

080027e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <BusFault_Handler+0x4>

080027ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <UsageFault_Handler+0x4>

080027f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002822:	f000 f94b 	bl	8002abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002830:	4802      	ldr	r0, [pc, #8]	@ (800283c <TIM2_IRQHandler+0x10>)
 8002832:	f003 f86d 	bl	8005910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200001b0 	.word	0x200001b0

08002840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <SystemInit+0x20>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	4a05      	ldr	r2, [pc, #20]	@ (8002860 <SystemInit+0x20>)
 800284c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800286a:	f107 0308 	add.w	r3, r7, #8
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002878:	463b      	mov	r3, r7
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002880:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <MX_TIM2_Init+0x94>)
 8002882:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <MX_TIM2_Init+0x94>)
 800288a:	f240 3247 	movw	r2, #839	@ 0x347
 800288e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002890:	4b19      	ldr	r3, [pc, #100]	@ (80028f8 <MX_TIM2_Init+0x94>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002896:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <MX_TIM2_Init+0x94>)
 8002898:	2263      	movs	r2, #99	@ 0x63
 800289a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289c:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <MX_TIM2_Init+0x94>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a2:	4b15      	ldr	r3, [pc, #84]	@ (80028f8 <MX_TIM2_Init+0x94>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028a8:	4813      	ldr	r0, [pc, #76]	@ (80028f8 <MX_TIM2_Init+0x94>)
 80028aa:	f002 ff71 	bl	8005790 <HAL_TIM_Base_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028b4:	f7ff fe20 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	480c      	ldr	r0, [pc, #48]	@ (80028f8 <MX_TIM2_Init+0x94>)
 80028c6:	f003 f92b 	bl	8005b20 <HAL_TIM_ConfigClockSource>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028d0:	f7ff fe12 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028dc:	463b      	mov	r3, r7
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <MX_TIM2_Init+0x94>)
 80028e2:	f003 fb47 	bl	8005f74 <HAL_TIMEx_MasterConfigSynchronization>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028ec:	f7ff fe04 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200001b0 	.word	0x200001b0

080028fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290c:	d115      	bne.n	800293a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <HAL_TIM_Base_MspInit+0x48>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	4a0b      	ldr	r2, [pc, #44]	@ (8002944 <HAL_TIM_Base_MspInit+0x48>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6413      	str	r3, [r2, #64]	@ 0x40
 800291e:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <HAL_TIM_Base_MspInit+0x48>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	201c      	movs	r0, #28
 8002930:	f000 f9e3 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002934:	201c      	movs	r0, #28
 8002936:	f000 f9fc 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800

08002948 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	4413      	add	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	b2da      	uxtb	r2, r3
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	b2db      	uxtb	r3, r3
 800296a:	4413      	add	r3, r2
 800296c:	b2db      	uxtb	r3, r3
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4a0d      	ldr	r2, [pc, #52]	@ (80029c0 <DEC2BCD+0x44>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	08db      	lsrs	r3, r3, #3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	b258      	sxtb	r0, r3
 8002996:	79fa      	ldrb	r2, [r7, #7]
 8002998:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <DEC2BCD+0x44>)
 800299a:	fba3 1302 	umull	r1, r3, r3, r2
 800299e:	08d9      	lsrs	r1, r3, #3
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	4303      	orrs	r3, r0
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	cccccccd 	.word	0xcccccccd

080029c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c8:	480d      	ldr	r0, [pc, #52]	@ (8002a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029ca:	490e      	ldr	r1, [pc, #56]	@ (8002a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d0:	e002      	b.n	80029d8 <LoopCopyDataInit>

080029d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d6:	3304      	adds	r3, #4

080029d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029dc:	d3f9      	bcc.n	80029d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029de:	4a0b      	ldr	r2, [pc, #44]	@ (8002a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029e0:	4c0b      	ldr	r4, [pc, #44]	@ (8002a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e4:	e001      	b.n	80029ea <LoopFillZerobss>

080029e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e8:	3204      	adds	r2, #4

080029ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ec:	d3fb      	bcc.n	80029e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029ee:	f7ff ff27 	bl	8002840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f2:	f003 fc37 	bl	8006264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f6:	f7ff f869 	bl	8001acc <main>
  bx  lr    
 80029fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a04:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002a08:	080092c8 	.word	0x080092c8
  ldr r2, =_sbss
 8002a0c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8002a10:	200001fc 	.word	0x200001fc

08002a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a14:	e7fe      	b.n	8002a14 <ADC_IRQHandler>
	...

08002a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <HAL_Init+0x40>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0d      	ldr	r2, [pc, #52]	@ (8002a58 <HAL_Init+0x40>)
 8002a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_Init+0x40>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <HAL_Init+0x40>)
 8002a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a34:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <HAL_Init+0x40>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a07      	ldr	r2, [pc, #28]	@ (8002a58 <HAL_Init+0x40>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a40:	2003      	movs	r0, #3
 8002a42:	f000 f94f 	bl	8002ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a46:	200f      	movs	r0, #15
 8002a48:	f000 f808 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a4c:	f7ff fe96 	bl	800277c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023c00 	.word	0x40023c00

08002a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a64:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <HAL_InitTick+0x54>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <HAL_InitTick+0x58>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f967 	bl	8002d4e <HAL_SYSTICK_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00e      	b.n	8002aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b0f      	cmp	r3, #15
 8002a8e:	d80a      	bhi.n	8002aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a90:	2200      	movs	r2, #0
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f000 f92f 	bl	8002cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a9c:	4a06      	ldr	r2, [pc, #24]	@ (8002ab8 <HAL_InitTick+0x5c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000020 	.word	0x20000020
 8002ab4:	20000028 	.word	0x20000028
 8002ab8:	20000024 	.word	0x20000024

08002abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_IncTick+0x20>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_IncTick+0x24>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <HAL_IncTick+0x24>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000028 	.word	0x20000028
 8002ae0:	200001f8 	.word	0x200001f8

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	@ (8002af8 <HAL_GetTick+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	200001f8 	.word	0x200001f8

08002afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff ffee 	bl	8002ae4 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d005      	beq.n	8002b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b16:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_Delay+0x44>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b22:	bf00      	nop
 8002b24:	f7ff ffde 	bl	8002ae4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d8f7      	bhi.n	8002b24 <HAL_Delay+0x28>
  {
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000028 	.word	0x20000028

08002b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b76:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60d3      	str	r3, [r2, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	@ (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	@ (8002be0 <__NVIC_EnableIRQ+0x38>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	@ (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	@ (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	@ 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
         );
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	@ 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cb0:	d301      	bcc.n	8002cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00f      	b.n	8002cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <SysTick_Config+0x40>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	f7ff ff8e 	bl	8002be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc8:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <SysTick_Config+0x40>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cce:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <SysTick_Config+0x40>)
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	e000e010 	.word	0xe000e010

08002ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff29 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d0c:	f7ff ff3e 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	6978      	ldr	r0, [r7, #20]
 8002d18:	f7ff ff8e 	bl	8002c38 <NVIC_EncodePriority>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff5d 	bl	8002be4 <__NVIC_SetPriority>
}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff31 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ffa2 	bl	8002ca0 <SysTick_Config>
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	@ 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e16b      	b.n	800305c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 815a 	bne.w	8003056 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d005      	beq.n	8002dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d130      	bne.n	8002e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 0201 	and.w	r2, r3, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d017      	beq.n	8002e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d123      	bne.n	8002eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80b4 	beq.w	8003056 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b60      	ldr	r3, [pc, #384]	@ (8003074 <HAL_GPIO_Init+0x30c>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	4a5f      	ldr	r2, [pc, #380]	@ (8003074 <HAL_GPIO_Init+0x30c>)
 8002ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002efe:	4b5d      	ldr	r3, [pc, #372]	@ (8003074 <HAL_GPIO_Init+0x30c>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003078 <HAL_GPIO_Init+0x310>)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	220f      	movs	r2, #15
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a52      	ldr	r2, [pc, #328]	@ (800307c <HAL_GPIO_Init+0x314>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d02b      	beq.n	8002f8e <HAL_GPIO_Init+0x226>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a51      	ldr	r2, [pc, #324]	@ (8003080 <HAL_GPIO_Init+0x318>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d025      	beq.n	8002f8a <HAL_GPIO_Init+0x222>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a50      	ldr	r2, [pc, #320]	@ (8003084 <HAL_GPIO_Init+0x31c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <HAL_GPIO_Init+0x21e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4f      	ldr	r2, [pc, #316]	@ (8003088 <HAL_GPIO_Init+0x320>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d019      	beq.n	8002f82 <HAL_GPIO_Init+0x21a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4e      	ldr	r2, [pc, #312]	@ (800308c <HAL_GPIO_Init+0x324>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_GPIO_Init+0x216>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4d      	ldr	r2, [pc, #308]	@ (8003090 <HAL_GPIO_Init+0x328>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00d      	beq.n	8002f7a <HAL_GPIO_Init+0x212>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4c      	ldr	r2, [pc, #304]	@ (8003094 <HAL_GPIO_Init+0x32c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <HAL_GPIO_Init+0x20e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4b      	ldr	r2, [pc, #300]	@ (8003098 <HAL_GPIO_Init+0x330>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_GPIO_Init+0x20a>
 8002f6e:	2307      	movs	r3, #7
 8002f70:	e00e      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f72:	2308      	movs	r3, #8
 8002f74:	e00c      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f76:	2306      	movs	r3, #6
 8002f78:	e00a      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	e008      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	e006      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e004      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e002      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	f002 0203 	and.w	r2, r2, #3
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	4093      	lsls	r3, r2
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa0:	4935      	ldr	r1, [pc, #212]	@ (8003078 <HAL_GPIO_Init+0x310>)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fae:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <HAL_GPIO_Init+0x334>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd2:	4a32      	ldr	r2, [pc, #200]	@ (800309c <HAL_GPIO_Init+0x334>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fd8:	4b30      	ldr	r3, [pc, #192]	@ (800309c <HAL_GPIO_Init+0x334>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ffc:	4a27      	ldr	r2, [pc, #156]	@ (800309c <HAL_GPIO_Init+0x334>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003002:	4b26      	ldr	r3, [pc, #152]	@ (800309c <HAL_GPIO_Init+0x334>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003026:	4a1d      	ldr	r2, [pc, #116]	@ (800309c <HAL_GPIO_Init+0x334>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800302c:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <HAL_GPIO_Init+0x334>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003050:	4a12      	ldr	r2, [pc, #72]	@ (800309c <HAL_GPIO_Init+0x334>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3301      	adds	r3, #1
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	f67f ae90 	bls.w	8002d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	3724      	adds	r7, #36	@ 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	40013800 	.word	0x40013800
 800307c:	40020000 	.word	0x40020000
 8003080:	40020400 	.word	0x40020400
 8003084:	40020800 	.word	0x40020800
 8003088:	40020c00 	.word	0x40020c00
 800308c:	40021000 	.word	0x40021000
 8003090:	40021400 	.word	0x40021400
 8003094:	40021800 	.word	0x40021800
 8003098:	40021c00 	.word	0x40021c00
 800309c:	40013c00 	.word	0x40013c00

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e12b      	b.n	800333e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd ff7c 	bl	8000ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	@ 0x24
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003138:	f001 fd2a 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 800313c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a81      	ldr	r2, [pc, #516]	@ (8003348 <HAL_I2C_Init+0x274>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d807      	bhi.n	8003158 <HAL_I2C_Init+0x84>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a80      	ldr	r2, [pc, #512]	@ (800334c <HAL_I2C_Init+0x278>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e006      	b.n	8003166 <HAL_I2C_Init+0x92>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a7d      	ldr	r2, [pc, #500]	@ (8003350 <HAL_I2C_Init+0x27c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0e7      	b.n	800333e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a78      	ldr	r2, [pc, #480]	@ (8003354 <HAL_I2C_Init+0x280>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0c9b      	lsrs	r3, r3, #18
 8003178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a6a      	ldr	r2, [pc, #424]	@ (8003348 <HAL_I2C_Init+0x274>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d802      	bhi.n	80031a8 <HAL_I2C_Init+0xd4>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	e009      	b.n	80031bc <HAL_I2C_Init+0xe8>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	4a69      	ldr	r2, [pc, #420]	@ (8003358 <HAL_I2C_Init+0x284>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	3301      	adds	r3, #1
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	495c      	ldr	r1, [pc, #368]	@ (8003348 <HAL_I2C_Init+0x274>)
 80031d8:	428b      	cmp	r3, r1
 80031da:	d819      	bhi.n	8003210 <HAL_I2C_Init+0x13c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e59      	subs	r1, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ea:	1c59      	adds	r1, r3, #1
 80031ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031f0:	400b      	ands	r3, r1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_I2C_Init+0x138>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1e59      	subs	r1, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fbb1 f3f3 	udiv	r3, r1, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320a:	e051      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800320c:	2304      	movs	r3, #4
 800320e:	e04f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d111      	bne.n	800323c <HAL_I2C_Init+0x168>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e012      	b.n	8003262 <HAL_I2C_Init+0x18e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	0099      	lsls	r1, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Init+0x196>
 8003266:	2301      	movs	r3, #1
 8003268:	e022      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10e      	bne.n	8003290 <HAL_I2C_Init+0x1bc>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e58      	subs	r0, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	440b      	add	r3, r1
 8003280:	fbb0 f3f3 	udiv	r3, r0, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800328e:	e00f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1e58      	subs	r0, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	0099      	lsls	r1, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	6809      	ldr	r1, [r1, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6911      	ldr	r1, [r2, #16]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68d2      	ldr	r2, [r2, #12]
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	000186a0 	.word	0x000186a0
 800334c:	001e847f 	.word	0x001e847f
 8003350:	003d08ff 	.word	0x003d08ff
 8003354:	431bde83 	.word	0x431bde83
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	4608      	mov	r0, r1
 8003366:	4611      	mov	r1, r2
 8003368:	461a      	mov	r2, r3
 800336a:	4603      	mov	r3, r0
 800336c:	817b      	strh	r3, [r7, #10]
 800336e:	460b      	mov	r3, r1
 8003370:	813b      	strh	r3, [r7, #8]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003376:	f7ff fbb5 	bl	8002ae4 <HAL_GetTick>
 800337a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b20      	cmp	r3, #32
 8003386:	f040 80d9 	bne.w	800353c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	2319      	movs	r3, #25
 8003390:	2201      	movs	r2, #1
 8003392:	496d      	ldr	r1, [pc, #436]	@ (8003548 <HAL_I2C_Mem_Write+0x1ec>)
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fdad 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0cc      	b.n	800353e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_I2C_Mem_Write+0x56>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0c5      	b.n	800353e <HAL_I2C_Mem_Write+0x1e2>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d007      	beq.n	80033d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2221      	movs	r2, #33	@ 0x21
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2240      	movs	r2, #64	@ 0x40
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a3a      	ldr	r2, [r7, #32]
 8003402:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4a4d      	ldr	r2, [pc, #308]	@ (800354c <HAL_I2C_Mem_Write+0x1f0>)
 8003418:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800341a:	88f8      	ldrh	r0, [r7, #6]
 800341c:	893a      	ldrh	r2, [r7, #8]
 800341e:	8979      	ldrh	r1, [r7, #10]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4603      	mov	r3, r0
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fbe4 	bl	8003bf8 <I2C_RequestMemoryWrite>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d052      	beq.n	80034dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e081      	b.n	800353e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fe2e 	bl	80040a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	2b04      	cmp	r3, #4
 8003450:	d107      	bne.n	8003462 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06b      	b.n	800353e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d11b      	bne.n	80034dc <HAL_I2C_Mem_Write+0x180>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d017      	beq.n	80034dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1aa      	bne.n	800343a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fe1a 	bl	8004122 <I2C_WaitOnBTFFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d107      	bne.n	800350c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e016      	b.n	800353e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	00100002 	.word	0x00100002
 800354c:	ffff0000 	.word	0xffff0000

08003550 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	@ 0x30
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	460b      	mov	r3, r1
 8003564:	813b      	strh	r3, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356a:	f7ff fabb 	bl	8002ae4 <HAL_GetTick>
 800356e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b20      	cmp	r3, #32
 800357a:	f040 8208 	bne.w	800398e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2319      	movs	r3, #25
 8003584:	2201      	movs	r2, #1
 8003586:	497b      	ldr	r1, [pc, #492]	@ (8003774 <HAL_I2C_Mem_Read+0x224>)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fcb3 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	e1fb      	b.n	8003990 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_I2C_Mem_Read+0x56>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e1f4      	b.n	8003990 <HAL_I2C_Mem_Read+0x440>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d007      	beq.n	80035cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2222      	movs	r2, #34	@ 0x22
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2240      	movs	r2, #64	@ 0x40
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a5b      	ldr	r2, [pc, #364]	@ (8003778 <HAL_I2C_Mem_Read+0x228>)
 800360c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800360e:	88f8      	ldrh	r0, [r7, #6]
 8003610:	893a      	ldrh	r2, [r7, #8]
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4603      	mov	r3, r0
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fb80 	bl	8003d24 <I2C_RequestMemoryRead>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1b0      	b.n	8003990 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d113      	bne.n	800365e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003636:	2300      	movs	r3, #0
 8003638:	623b      	str	r3, [r7, #32]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	623b      	str	r3, [r7, #32]
 800364a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e184      	b.n	8003968 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	2b01      	cmp	r3, #1
 8003664:	d11b      	bne.n	800369e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e164      	b.n	8003968 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d11b      	bne.n	80036de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	e144      	b.n	8003968 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036f4:	e138      	b.n	8003968 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	f200 80f1 	bhi.w	80038e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	2b01      	cmp	r3, #1
 8003706:	d123      	bne.n	8003750 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fd49 	bl	80041a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e139      	b.n	8003990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800374e:	e10b      	b.n	8003968 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003754:	2b02      	cmp	r3, #2
 8003756:	d14e      	bne.n	80037f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	2200      	movs	r2, #0
 8003760:	4906      	ldr	r1, [pc, #24]	@ (800377c <HAL_I2C_Mem_Read+0x22c>)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fbc6 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e10e      	b.n	8003990 <HAL_I2C_Mem_Read+0x440>
 8003772:	bf00      	nop
 8003774:	00100002 	.word	0x00100002
 8003778:	ffff0000 	.word	0xffff0000
 800377c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037f4:	e0b8      	b.n	8003968 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fc:	2200      	movs	r2, #0
 80037fe:	4966      	ldr	r1, [pc, #408]	@ (8003998 <HAL_I2C_Mem_Read+0x448>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fb77 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0bf      	b.n	8003990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800381e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	2200      	movs	r2, #0
 800385a:	494f      	ldr	r1, [pc, #316]	@ (8003998 <HAL_I2C_Mem_Read+0x448>)
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fb49 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e091      	b.n	8003990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800387a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038e0:	e042      	b.n	8003968 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fc5c 	bl	80041a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e04c      	b.n	8003990 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d118      	bne.n	8003968 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	f47f aec2 	bne.w	80036f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3728      	adds	r7, #40	@ 0x28
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	00010004 	.word	0x00010004

0800399c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	460b      	mov	r3, r1
 80039aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff f89a 	bl	8002ae4 <HAL_GetTick>
 80039b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80039b2:	2301      	movs	r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b20      	cmp	r3, #32
 80039c0:	f040 8111 	bne.w	8003be6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2319      	movs	r3, #25
 80039ca:	2201      	movs	r2, #1
 80039cc:	4988      	ldr	r1, [pc, #544]	@ (8003bf0 <HAL_I2C_IsDeviceReady+0x254>)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fa90 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80039da:	2302      	movs	r3, #2
 80039dc:	e104      	b.n	8003be8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_I2C_IsDeviceReady+0x50>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e0fd      	b.n	8003be8 <HAL_I2C_IsDeviceReady+0x24c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d007      	beq.n	8003a12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2224      	movs	r2, #36	@ 0x24
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a70      	ldr	r2, [pc, #448]	@ (8003bf4 <HAL_I2C_IsDeviceReady+0x258>)
 8003a34:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fa4e 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00d      	beq.n	8003a7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a6c:	d103      	bne.n	8003a76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a74:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0b6      	b.n	8003be8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a7a:	897b      	ldrh	r3, [r7, #10]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003a8a:	f7ff f82b 	bl	8002ae4 <HAL_GetTick>
 8003a8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003abe:	e025      	b.n	8003b0c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ac0:	f7ff f810 	bl	8002ae4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d302      	bcc.n	8003ad6 <HAL_I2C_IsDeviceReady+0x13a>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	22a0      	movs	r2, #160	@ 0xa0
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b16:	d005      	beq.n	8003b24 <HAL_I2C_IsDeviceReady+0x188>
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <HAL_I2C_IsDeviceReady+0x188>
 8003b1e:	7dbb      	ldrb	r3, [r7, #22]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0cd      	beq.n	8003ac0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d129      	bne.n	8003b8e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b48:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	2319      	movs	r3, #25
 8003b66:	2201      	movs	r2, #1
 8003b68:	4921      	ldr	r1, [pc, #132]	@ (8003bf0 <HAL_I2C_IsDeviceReady+0x254>)
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f9c2 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e036      	b.n	8003be8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e02c      	b.n	8003be8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ba6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2319      	movs	r3, #25
 8003bae:	2201      	movs	r2, #1
 8003bb0:	490f      	ldr	r1, [pc, #60]	@ (8003bf0 <HAL_I2C_IsDeviceReady+0x254>)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f99e 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e012      	b.n	8003be8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	f4ff af32 	bcc.w	8003a36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
  }
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	00100002 	.word	0x00100002
 8003bf4:	ffff0000 	.word	0xffff0000

08003bf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	817b      	strh	r3, [r7, #10]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	813b      	strh	r3, [r7, #8]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f960 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c48:	d103      	bne.n	8003c52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e05f      	b.n	8003d16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	492d      	ldr	r1, [pc, #180]	@ (8003d20 <I2C_RequestMemoryWrite+0x128>)
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f998 	bl	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e04c      	b.n	8003d16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	6a39      	ldr	r1, [r7, #32]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fa02 	bl	80040a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d107      	bne.n	8003cba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e02b      	b.n	8003d16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc4:	893b      	ldrh	r3, [r7, #8]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]
 8003cce:	e021      	b.n	8003d14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce0:	6a39      	ldr	r1, [r7, #32]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f9dc 	bl	80040a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d107      	bne.n	8003d06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e005      	b.n	8003d16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	00010002 	.word	0x00010002

08003d24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f8c2 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d84:	d103      	bne.n	8003d8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0aa      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d92:	897b      	ldrh	r3, [r7, #10]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003da0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	4952      	ldr	r1, [pc, #328]	@ (8003ef0 <I2C_RequestMemoryRead+0x1cc>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f8fa 	bl	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e097      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f964 	bl	80040a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e076      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d105      	bne.n	8003e0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e00:	893b      	ldrh	r3, [r7, #8]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	611a      	str	r2, [r3, #16]
 8003e0a:	e021      	b.n	8003e50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e0c:	893b      	ldrh	r3, [r7, #8]
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1c:	6a39      	ldr	r1, [r7, #32]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f93e 	bl	80040a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d107      	bne.n	8003e42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e050      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e46:	893b      	ldrh	r3, [r7, #8]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e52:	6a39      	ldr	r1, [r7, #32]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f923 	bl	80040a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d107      	bne.n	8003e78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e035      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f82b 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb2:	d103      	bne.n	8003ebc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e013      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ec0:	897b      	ldrh	r3, [r7, #10]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	6a3a      	ldr	r2, [r7, #32]
 8003ed4:	4906      	ldr	r1, [pc, #24]	@ (8003ef0 <I2C_RequestMemoryRead+0x1cc>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f863 	bl	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	00010002 	.word	0x00010002

08003ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	e025      	b.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d021      	beq.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe fde9 	bl	8002ae4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d116      	bne.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	f043 0220 	orr.w	r2, r3, #32
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e023      	b.n	8003f9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d10d      	bne.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	43da      	mvns	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	e00c      	b.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d0b6      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb0:	e051      	b.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc0:	d123      	bne.n	800400a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	f043 0204 	orr.w	r2, r3, #4
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e046      	b.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d021      	beq.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fe fd67 	bl	8002ae4 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d116      	bne.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e020      	b.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d10c      	bne.n	800407a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	e00b      	b.n	8004092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	43da      	mvns	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4013      	ands	r3, r2
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d18d      	bne.n	8003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040ac:	e02d      	b.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f8ce 	bl	8004250 <I2C_IsAcknowledgeFailed>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e02d      	b.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d021      	beq.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fe fd0d 	bl	8002ae4 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e007      	b.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004114:	2b80      	cmp	r3, #128	@ 0x80
 8004116:	d1ca      	bne.n	80040ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800412e:	e02d      	b.n	800418c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f88d 	bl	8004250 <I2C_IsAcknowledgeFailed>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e02d      	b.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d021      	beq.n	800418c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004148:	f7fe fccc 	bl	8002ae4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d116      	bne.n	800418c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e007      	b.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b04      	cmp	r3, #4
 8004198:	d1ca      	bne.n	8004130 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041b0:	e042      	b.n	8004238 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d119      	bne.n	80041f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0210 	mvn.w	r2, #16
 80041c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e029      	b.n	8004248 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f4:	f7fe fc76 	bl	8002ae4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	429a      	cmp	r2, r3
 8004202:	d302      	bcc.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e007      	b.n	8004248 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004242:	2b40      	cmp	r3, #64	@ 0x40
 8004244:	d1b5      	bne.n	80041b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004266:	d11b      	bne.n	80042a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004270:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	f043 0204 	orr.w	r2, r3, #4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e267      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d075      	beq.n	80043ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ce:	4b88      	ldr	r3, [pc, #544]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d00c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042da:	4b85      	ldr	r3, [pc, #532]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d112      	bne.n	800430c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b82      	ldr	r3, [pc, #520]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042f2:	d10b      	bne.n	800430c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	4b7e      	ldr	r3, [pc, #504]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05b      	beq.n	80043b8 <HAL_RCC_OscConfig+0x108>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d157      	bne.n	80043b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e242      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004314:	d106      	bne.n	8004324 <HAL_RCC_OscConfig+0x74>
 8004316:	4b76      	ldr	r3, [pc, #472]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a75      	ldr	r2, [pc, #468]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e01d      	b.n	8004360 <HAL_RCC_OscConfig+0xb0>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0x98>
 800432e:	4b70      	ldr	r3, [pc, #448]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6f      	ldr	r2, [pc, #444]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b6d      	ldr	r3, [pc, #436]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6c      	ldr	r2, [pc, #432]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e00b      	b.n	8004360 <HAL_RCC_OscConfig+0xb0>
 8004348:	4b69      	ldr	r3, [pc, #420]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a68      	ldr	r2, [pc, #416]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800434e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b66      	ldr	r3, [pc, #408]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a65      	ldr	r2, [pc, #404]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800435a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800435e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fe fbbc 	bl	8002ae4 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe fbb8 	bl	8002ae4 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	@ 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e207      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	4b5b      	ldr	r3, [pc, #364]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0xc0>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe fba8 	bl	8002ae4 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004398:	f7fe fba4 	bl	8002ae4 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	@ 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1f3      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	4b51      	ldr	r3, [pc, #324]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0xe8>
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d063      	beq.n	800448e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043c6:	4b4a      	ldr	r3, [pc, #296]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d2:	4b47      	ldr	r3, [pc, #284]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d11c      	bne.n	8004418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043de:	4b44      	ldr	r3, [pc, #272]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d116      	bne.n	8004418 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	4b41      	ldr	r3, [pc, #260]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_RCC_OscConfig+0x152>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e1c7      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004402:	4b3b      	ldr	r3, [pc, #236]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4937      	ldr	r1, [pc, #220]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004416:	e03a      	b.n	800448e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004420:	4b34      	ldr	r3, [pc, #208]	@ (80044f4 <HAL_RCC_OscConfig+0x244>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004426:	f7fe fb5d 	bl	8002ae4 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800442e:	f7fe fb59 	bl	8002ae4 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e1a8      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	4b2b      	ldr	r3, [pc, #172]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444c:	4b28      	ldr	r3, [pc, #160]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4925      	ldr	r1, [pc, #148]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]
 8004460:	e015      	b.n	800448e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004462:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <HAL_RCC_OscConfig+0x244>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fe fb3c 	bl	8002ae4 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004470:	f7fe fb38 	bl	8002ae4 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e187      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	4b1b      	ldr	r3, [pc, #108]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d036      	beq.n	8004508 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a2:	4b15      	ldr	r3, [pc, #84]	@ (80044f8 <HAL_RCC_OscConfig+0x248>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fe fb1c 	bl	8002ae4 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b0:	f7fe fb18 	bl	8002ae4 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e167      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80044c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x200>
 80044ce:	e01b      	b.n	8004508 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d0:	4b09      	ldr	r3, [pc, #36]	@ (80044f8 <HAL_RCC_OscConfig+0x248>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d6:	f7fe fb05 	bl	8002ae4 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044dc:	e00e      	b.n	80044fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044de:	f7fe fb01 	bl	8002ae4 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d907      	bls.n	80044fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e150      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
 80044f0:	40023800 	.word	0x40023800
 80044f4:	42470000 	.word	0x42470000
 80044f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044fc:	4b88      	ldr	r3, [pc, #544]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ea      	bne.n	80044de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8097 	beq.w	8004644 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451a:	4b81      	ldr	r3, [pc, #516]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	4b7d      	ldr	r3, [pc, #500]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	4a7c      	ldr	r2, [pc, #496]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004534:	6413      	str	r3, [r2, #64]	@ 0x40
 8004536:	4b7a      	ldr	r3, [pc, #488]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004542:	2301      	movs	r3, #1
 8004544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004546:	4b77      	ldr	r3, [pc, #476]	@ (8004724 <HAL_RCC_OscConfig+0x474>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d118      	bne.n	8004584 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004552:	4b74      	ldr	r3, [pc, #464]	@ (8004724 <HAL_RCC_OscConfig+0x474>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a73      	ldr	r2, [pc, #460]	@ (8004724 <HAL_RCC_OscConfig+0x474>)
 8004558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455e:	f7fe fac1 	bl	8002ae4 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004566:	f7fe fabd 	bl	8002ae4 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e10c      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004578:	4b6a      	ldr	r3, [pc, #424]	@ (8004724 <HAL_RCC_OscConfig+0x474>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d106      	bne.n	800459a <HAL_RCC_OscConfig+0x2ea>
 800458c:	4b64      	ldr	r3, [pc, #400]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004590:	4a63      	ldr	r2, [pc, #396]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6713      	str	r3, [r2, #112]	@ 0x70
 8004598:	e01c      	b.n	80045d4 <HAL_RCC_OscConfig+0x324>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x30c>
 80045a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045a8:	f043 0304 	orr.w	r3, r3, #4
 80045ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0x324>
 80045bc:	4b58      	ldr	r3, [pc, #352]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c0:	4a57      	ldr	r2, [pc, #348]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c8:	4b55      	ldr	r3, [pc, #340]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045cc:	4a54      	ldr	r2, [pc, #336]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045ce:	f023 0304 	bic.w	r3, r3, #4
 80045d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d015      	beq.n	8004608 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fe fa82 	bl	8002ae4 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7fe fa7e 	bl	8002ae4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0cb      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fa:	4b49      	ldr	r3, [pc, #292]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ee      	beq.n	80045e4 <HAL_RCC_OscConfig+0x334>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004608:	f7fe fa6c 	bl	8002ae4 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460e:	e00a      	b.n	8004626 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004610:	f7fe fa68 	bl	8002ae4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e0b5      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004626:	4b3e      	ldr	r3, [pc, #248]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ee      	bne.n	8004610 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d105      	bne.n	8004644 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004638:	4b39      	ldr	r3, [pc, #228]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	4a38      	ldr	r2, [pc, #224]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 800463e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004642:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a1 	beq.w	8004790 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800464e:	4b34      	ldr	r3, [pc, #208]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b08      	cmp	r3, #8
 8004658:	d05c      	beq.n	8004714 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d141      	bne.n	80046e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004662:	4b31      	ldr	r3, [pc, #196]	@ (8004728 <HAL_RCC_OscConfig+0x478>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7fe fa3c 	bl	8002ae4 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004670:	f7fe fa38 	bl	8002ae4 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e087      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004682:	4b27      	ldr	r3, [pc, #156]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	019b      	lsls	r3, r3, #6
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	3b01      	subs	r3, #1
 80046a8:	041b      	lsls	r3, r3, #16
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	491b      	ldr	r1, [pc, #108]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004728 <HAL_RCC_OscConfig+0x478>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046be:	f7fe fa11 	bl	8002ae4 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c6:	f7fe fa0d 	bl	8002ae4 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e05c      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d8:	4b11      	ldr	r3, [pc, #68]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x416>
 80046e4:	e054      	b.n	8004790 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e6:	4b10      	ldr	r3, [pc, #64]	@ (8004728 <HAL_RCC_OscConfig+0x478>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fe f9fa 	bl	8002ae4 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fe f9f6 	bl	8002ae4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e045      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x444>
 8004712:	e03d      	b.n	8004790 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d107      	bne.n	800472c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e038      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
 8004720:	40023800 	.word	0x40023800
 8004724:	40007000 	.word	0x40007000
 8004728:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800472c:	4b1b      	ldr	r3, [pc, #108]	@ (800479c <HAL_RCC_OscConfig+0x4ec>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d028      	beq.n	800478c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d121      	bne.n	800478c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d11a      	bne.n	800478c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800475c:	4013      	ands	r3, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004762:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004764:	4293      	cmp	r3, r2
 8004766:	d111      	bne.n	800478c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	3b01      	subs	r3, #1
 8004776:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d107      	bne.n	800478c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800

080047a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0cc      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b68      	ldr	r3, [pc, #416]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d90c      	bls.n	80047dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b65      	ldr	r3, [pc, #404]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b63      	ldr	r3, [pc, #396]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0b8      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f4:	4b59      	ldr	r3, [pc, #356]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a58      	ldr	r2, [pc, #352]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800480c:	4b53      	ldr	r3, [pc, #332]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	4a52      	ldr	r2, [pc, #328]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004818:	4b50      	ldr	r3, [pc, #320]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	494d      	ldr	r1, [pc, #308]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d044      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d119      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e07f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d003      	beq.n	800485e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485a:	2b03      	cmp	r3, #3
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b3f      	ldr	r3, [pc, #252]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e06f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	4b3b      	ldr	r3, [pc, #236]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e067      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487e:	4b37      	ldr	r3, [pc, #220]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4934      	ldr	r1, [pc, #208]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	4313      	orrs	r3, r2
 800488e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004890:	f7fe f928 	bl	8002ae4 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	e00a      	b.n	80048ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004898:	f7fe f924 	bl	8002ae4 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e04f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	4b2b      	ldr	r3, [pc, #172]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 020c 	and.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	429a      	cmp	r2, r3
 80048be:	d1eb      	bne.n	8004898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c0:	4b25      	ldr	r3, [pc, #148]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d20c      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b22      	ldr	r3, [pc, #136]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b20      	ldr	r3, [pc, #128]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e032      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f4:	4b19      	ldr	r3, [pc, #100]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4916      	ldr	r1, [pc, #88]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	490e      	ldr	r1, [pc, #56]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004926:	f000 f821 	bl	800496c <HAL_RCC_GetSysClockFreq>
 800492a:	4602      	mov	r2, r0
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	490a      	ldr	r1, [pc, #40]	@ (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	5ccb      	ldrb	r3, [r1, r3]
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	4a09      	ldr	r2, [pc, #36]	@ (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe f888 	bl	8002a5c <HAL_InitTick>

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023c00 	.word	0x40023c00
 800495c:	40023800 	.word	0x40023800
 8004960:	080092a0 	.word	0x080092a0
 8004964:	20000020 	.word	0x20000020
 8004968:	20000024 	.word	0x20000024

0800496c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800496c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004970:	b094      	sub	sp, #80	@ 0x50
 8004972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	647b      	str	r3, [r7, #68]	@ 0x44
 8004978:	2300      	movs	r3, #0
 800497a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800497c:	2300      	movs	r3, #0
 800497e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004984:	4b79      	ldr	r3, [pc, #484]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b08      	cmp	r3, #8
 800498e:	d00d      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x40>
 8004990:	2b08      	cmp	r3, #8
 8004992:	f200 80e1 	bhi.w	8004b58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x34>
 800499a:	2b04      	cmp	r3, #4
 800499c:	d003      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800499e:	e0db      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a0:	4b73      	ldr	r3, [pc, #460]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x204>)
 80049a2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80049a4:	e0db      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049a6:	4b73      	ldr	r3, [pc, #460]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x208>)
 80049a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049aa:	e0d8      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049ac:	4b6f      	ldr	r3, [pc, #444]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049b6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d063      	beq.n	8004a8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	2200      	movs	r2, #0
 80049ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049d6:	2300      	movs	r3, #0
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	f04f 0000 	mov.w	r0, #0
 80049e6:	f04f 0100 	mov.w	r1, #0
 80049ea:	0159      	lsls	r1, r3, #5
 80049ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f0:	0150      	lsls	r0, r2, #5
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4621      	mov	r1, r4
 80049f8:	1a51      	subs	r1, r2, r1
 80049fa:	6139      	str	r1, [r7, #16]
 80049fc:	4629      	mov	r1, r5
 80049fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a10:	4659      	mov	r1, fp
 8004a12:	018b      	lsls	r3, r1, #6
 8004a14:	4651      	mov	r1, sl
 8004a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	018a      	lsls	r2, r1, #6
 8004a1e:	4651      	mov	r1, sl
 8004a20:	ebb2 0801 	subs.w	r8, r2, r1
 8004a24:	4659      	mov	r1, fp
 8004a26:	eb63 0901 	sbc.w	r9, r3, r1
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a3e:	4690      	mov	r8, r2
 8004a40:	4699      	mov	r9, r3
 8004a42:	4623      	mov	r3, r4
 8004a44:	eb18 0303 	adds.w	r3, r8, r3
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	462b      	mov	r3, r5
 8004a4c:	eb49 0303 	adc.w	r3, r9, r3
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a5e:	4629      	mov	r1, r5
 8004a60:	024b      	lsls	r3, r1, #9
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a68:	4621      	mov	r1, r4
 8004a6a:	024a      	lsls	r2, r1, #9
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a72:	2200      	movs	r2, #0
 8004a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a7c:	f7fb fbac 	bl	80001d8 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a88:	e058      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8a:	4b38      	ldr	r3, [pc, #224]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	099b      	lsrs	r3, r3, #6
 8004a90:	2200      	movs	r2, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	4611      	mov	r1, r2
 8004a96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a9a:	623b      	str	r3, [r7, #32]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	f04f 0000 	mov.w	r0, #0
 8004aac:	f04f 0100 	mov.w	r1, #0
 8004ab0:	0159      	lsls	r1, r3, #5
 8004ab2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab6:	0150      	lsls	r0, r2, #5
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4641      	mov	r1, r8
 8004abe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ad4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ad8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004adc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ae0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	00eb      	lsls	r3, r5, #3
 8004aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004af2:	00e2      	lsls	r2, r4, #3
 8004af4:	4614      	mov	r4, r2
 8004af6:	461d      	mov	r5, r3
 8004af8:	4643      	mov	r3, r8
 8004afa:	18e3      	adds	r3, r4, r3
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	464b      	mov	r3, r9
 8004b00:	eb45 0303 	adc.w	r3, r5, r3
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b12:	4629      	mov	r1, r5
 8004b14:	028b      	lsls	r3, r1, #10
 8004b16:	4621      	mov	r1, r4
 8004b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	028a      	lsls	r2, r1, #10
 8004b20:	4610      	mov	r0, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b26:	2200      	movs	r2, #0
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	61fa      	str	r2, [r7, #28]
 8004b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b30:	f7fb fb52 	bl	80001d8 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4613      	mov	r3, r2
 8004b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	3301      	adds	r3, #1
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004b4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b56:	e002      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3750      	adds	r7, #80	@ 0x50
 8004b64:	46bd      	mov	sp, r7
 8004b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	00f42400 	.word	0x00f42400
 8004b74:	007a1200 	.word	0x007a1200

08004b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	@ (8004b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000020 	.word	0x20000020

08004b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b94:	f7ff fff0 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	@ (8004bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	@ (8004bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	080092b0 	.word	0x080092b0

08004bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07b      	b.n	8004cc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d108      	bne.n	8004be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bda:	d009      	beq.n	8004bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	61da      	str	r2, [r3, #28]
 8004be2:	e005      	b.n	8004bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fd fd6e 	bl	80026ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c74:	ea42 0103 	orr.w	r1, r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	f003 0104 	and.w	r1, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	f003 0210 	and.w	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b088      	sub	sp, #32
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_SPI_Transmit+0x22>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e126      	b.n	8004f3a <HAL_SPI_Transmit+0x270>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf4:	f7fd fef6 	bl	8002ae4 <HAL_GetTick>
 8004cf8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d002      	beq.n	8004d10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d0e:	e10b      	b.n	8004f28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Transmit+0x52>
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d20:	e102      	b.n	8004f28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2203      	movs	r2, #3
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d68:	d10f      	bne.n	8004d8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d94:	2b40      	cmp	r3, #64	@ 0x40
 8004d96:	d007      	beq.n	8004da8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004db0:	d14b      	bne.n	8004e4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_SPI_Transmit+0xf6>
 8004dba:	8afb      	ldrh	r3, [r7, #22]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d13e      	bne.n	8004e3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	881a      	ldrh	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd0:	1c9a      	adds	r2, r3, #2
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004de4:	e02b      	b.n	8004e3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d112      	bne.n	8004e1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df8:	881a      	ldrh	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	1c9a      	adds	r2, r3, #2
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e18:	e011      	b.n	8004e3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e1a:	f7fd fe63 	bl	8002ae4 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d803      	bhi.n	8004e32 <HAL_SPI_Transmit+0x168>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d102      	bne.n	8004e38 <HAL_SPI_Transmit+0x16e>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e3c:	e074      	b.n	8004f28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ce      	bne.n	8004de6 <HAL_SPI_Transmit+0x11c>
 8004e48:	e04c      	b.n	8004ee4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_SPI_Transmit+0x18e>
 8004e52:	8afb      	ldrh	r3, [r7, #22]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d140      	bne.n	8004eda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e7e:	e02c      	b.n	8004eda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d113      	bne.n	8004eb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	330c      	adds	r3, #12
 8004e98:	7812      	ldrb	r2, [r2, #0]
 8004e9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004eb4:	e011      	b.n	8004eda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb6:	f7fd fe15 	bl	8002ae4 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d803      	bhi.n	8004ece <HAL_SPI_Transmit+0x204>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d102      	bne.n	8004ed4 <HAL_SPI_Transmit+0x20a>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ed8:	e026      	b.n	8004f28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1cd      	bne.n	8004e80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fbcb 	bl	8005684 <SPI_EndRxTxTransaction>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e000      	b.n	8004f28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b088      	sub	sp, #32
 8004f46:	af02      	add	r7, sp, #8
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f5e:	d112      	bne.n	8004f86 <HAL_SPI_Receive+0x44>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10e      	bne.n	8004f86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f70:	88fa      	ldrh	r2, [r7, #6]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	4613      	mov	r3, r2
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f8f1 	bl	8005164 <HAL_SPI_TransmitReceive>
 8004f82:	4603      	mov	r3, r0
 8004f84:	e0ea      	b.n	800515c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_SPI_Receive+0x52>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e0e3      	b.n	800515c <HAL_SPI_Receive+0x21a>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f9c:	f7fd fda2 	bl	8002ae4 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d002      	beq.n	8004fb4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fb2:	e0ca      	b.n	800514a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_SPI_Receive+0x7e>
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fc4:	e0c1      	b.n	800514a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	88fa      	ldrh	r2, [r7, #6]
 8004fde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	88fa      	ldrh	r2, [r7, #6]
 8004fe4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800500c:	d10f      	bne.n	800502e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800502c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005038:	2b40      	cmp	r3, #64	@ 0x40
 800503a:	d007      	beq.n	800504c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800504a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d162      	bne.n	800511a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005054:	e02e      	b.n	80050b4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d115      	bne.n	8005090 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f103 020c 	add.w	r2, r3, #12
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005070:	7812      	ldrb	r2, [r2, #0]
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800508e:	e011      	b.n	80050b4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005090:	f7fd fd28 	bl	8002ae4 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d803      	bhi.n	80050a8 <HAL_SPI_Receive+0x166>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	d102      	bne.n	80050ae <HAL_SPI_Receive+0x16c>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050b2:	e04a      	b.n	800514a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1cb      	bne.n	8005056 <HAL_SPI_Receive+0x114>
 80050be:	e031      	b.n	8005124 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d113      	bne.n	80050f6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d8:	b292      	uxth	r2, r2
 80050da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050f4:	e011      	b.n	800511a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050f6:	f7fd fcf5 	bl	8002ae4 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d803      	bhi.n	800510e <HAL_SPI_Receive+0x1cc>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d102      	bne.n	8005114 <HAL_SPI_Receive+0x1d2>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005118:	e017      	b.n	800514a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1cd      	bne.n	80050c0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	6839      	ldr	r1, [r7, #0]
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fa45 	bl	80055b8 <SPI_EndRxTransaction>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
 8005146:	e000      	b.n	800514a <HAL_SPI_Receive+0x208>
  }

error :
 8005148:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08c      	sub	sp, #48	@ 0x30
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005172:	2301      	movs	r3, #1
 8005174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_SPI_TransmitReceive+0x26>
 8005186:	2302      	movs	r3, #2
 8005188:	e18a      	b.n	80054a0 <HAL_SPI_TransmitReceive+0x33c>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005192:	f7fd fca7 	bl	8002ae4 <HAL_GetTick>
 8005196:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80051a8:	887b      	ldrh	r3, [r7, #2]
 80051aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d00f      	beq.n	80051d4 <HAL_SPI_TransmitReceive+0x70>
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051ba:	d107      	bne.n	80051cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d103      	bne.n	80051cc <HAL_SPI_TransmitReceive+0x68>
 80051c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d003      	beq.n	80051d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80051cc:	2302      	movs	r3, #2
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80051d2:	e15b      	b.n	800548c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_SPI_TransmitReceive+0x82>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <HAL_SPI_TransmitReceive+0x82>
 80051e0:	887b      	ldrh	r3, [r7, #2]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d103      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80051ec:	e14e      	b.n	800548c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d003      	beq.n	8005202 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2205      	movs	r2, #5
 80051fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	887a      	ldrh	r2, [r7, #2]
 8005212:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	887a      	ldrh	r2, [r7, #2]
 8005218:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	887a      	ldrh	r2, [r7, #2]
 800522a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005242:	2b40      	cmp	r3, #64	@ 0x40
 8005244:	d007      	beq.n	8005256 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005254:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800525e:	d178      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HAL_SPI_TransmitReceive+0x10a>
 8005268:	8b7b      	ldrh	r3, [r7, #26]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d166      	bne.n	800533c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005272:	881a      	ldrh	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527e:	1c9a      	adds	r2, r3, #2
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005292:	e053      	b.n	800533c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d11b      	bne.n	80052da <HAL_SPI_TransmitReceive+0x176>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d016      	beq.n	80052da <HAL_SPI_TransmitReceive+0x176>
 80052ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d113      	bne.n	80052da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	881a      	ldrh	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c2:	1c9a      	adds	r2, r3, #2
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d119      	bne.n	800531c <HAL_SPI_TransmitReceive+0x1b8>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d014      	beq.n	800531c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fc:	b292      	uxth	r2, r2
 80052fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005304:	1c9a      	adds	r2, r3, #2
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005318:	2301      	movs	r3, #1
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800531c:	f7fd fbe2 	bl	8002ae4 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005328:	429a      	cmp	r2, r3
 800532a:	d807      	bhi.n	800533c <HAL_SPI_TransmitReceive+0x1d8>
 800532c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d003      	beq.n	800533c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800533a:	e0a7      	b.n	800548c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1a6      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x130>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1a1      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x130>
 8005350:	e07c      	b.n	800544c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_SPI_TransmitReceive+0x1fc>
 800535a:	8b7b      	ldrh	r3, [r7, #26]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d16b      	bne.n	8005438 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005386:	e057      	b.n	8005438 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	d11c      	bne.n	80053d0 <HAL_SPI_TransmitReceive+0x26c>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d017      	beq.n	80053d0 <HAL_SPI_TransmitReceive+0x26c>
 80053a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d114      	bne.n	80053d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	7812      	ldrb	r2, [r2, #0]
 80053b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d119      	bne.n	8005412 <HAL_SPI_TransmitReceive+0x2ae>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d014      	beq.n	8005412 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800540e:	2301      	movs	r3, #1
 8005410:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005412:	f7fd fb67 	bl	8002ae4 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800541e:	429a      	cmp	r2, r3
 8005420:	d803      	bhi.n	800542a <HAL_SPI_TransmitReceive+0x2c6>
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d102      	bne.n	8005430 <HAL_SPI_TransmitReceive+0x2cc>
 800542a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542c:	2b00      	cmp	r3, #0
 800542e:	d103      	bne.n	8005438 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005436:	e029      	b.n	800548c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1a2      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x224>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d19d      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800544c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f917 	bl	8005684 <SPI_EndRxTxTransaction>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d006      	beq.n	800546a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005468:	e010      	b.n	800548c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	e000      	b.n	800548c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800548a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800549c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3730      	adds	r7, #48	@ 0x30
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054b8:	f7fd fb14 	bl	8002ae4 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	4413      	add	r3, r2
 80054c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054c8:	f7fd fb0c 	bl	8002ae4 <HAL_GetTick>
 80054cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054ce:	4b39      	ldr	r3, [pc, #228]	@ (80055b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	015b      	lsls	r3, r3, #5
 80054d4:	0d1b      	lsrs	r3, r3, #20
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	fb02 f303 	mul.w	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054de:	e054      	b.n	800558a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e6:	d050      	beq.n	800558a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054e8:	f7fd fafc 	bl	8002ae4 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d902      	bls.n	80054fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d13d      	bne.n	800557a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800550c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005516:	d111      	bne.n	800553c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005520:	d004      	beq.n	800552c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800552a:	d107      	bne.n	800553c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800553a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005544:	d10f      	bne.n	8005566 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e017      	b.n	80055aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	3b01      	subs	r3, #1
 8005588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	bf0c      	ite	eq
 800559a:	2301      	moveq	r3, #1
 800559c:	2300      	movne	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d19b      	bne.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000020 	.word	0x20000020

080055b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055cc:	d111      	bne.n	80055f2 <SPI_EndRxTransaction+0x3a>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d6:	d004      	beq.n	80055e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e0:	d107      	bne.n	80055f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055fa:	d12a      	bne.n	8005652 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005604:	d012      	beq.n	800562c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2200      	movs	r2, #0
 800560e:	2180      	movs	r1, #128	@ 0x80
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff ff49 	bl	80054a8 <SPI_WaitFlagStateUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d02d      	beq.n	8005678 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005620:	f043 0220 	orr.w	r2, r3, #32
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e026      	b.n	800567a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2200      	movs	r2, #0
 8005634:	2101      	movs	r1, #1
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff ff36 	bl	80054a8 <SPI_WaitFlagStateUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01a      	beq.n	8005678 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e013      	b.n	800567a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2200      	movs	r2, #0
 800565a:	2101      	movs	r1, #1
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff ff23 	bl	80054a8 <SPI_WaitFlagStateUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566c:	f043 0220 	orr.w	r2, r3, #32
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e000      	b.n	800567a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005690:	4b1b      	ldr	r3, [pc, #108]	@ (8005700 <SPI_EndRxTxTransaction+0x7c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1b      	ldr	r2, [pc, #108]	@ (8005704 <SPI_EndRxTxTransaction+0x80>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	0d5b      	lsrs	r3, r3, #21
 800569c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056a0:	fb02 f303 	mul.w	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ae:	d112      	bne.n	80056d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	2180      	movs	r1, #128	@ 0x80
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff fef4 	bl	80054a8 <SPI_WaitFlagStateUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d016      	beq.n	80056f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ca:	f043 0220 	orr.w	r2, r3, #32
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e00f      	b.n	80056f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3b01      	subs	r3, #1
 80056e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ec:	2b80      	cmp	r3, #128	@ 0x80
 80056ee:	d0f2      	beq.n	80056d6 <SPI_EndRxTxTransaction+0x52>
 80056f0:	e000      	b.n	80056f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80056f2:	bf00      	nop
  }

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20000020 	.word	0x20000020
 8005704:	165e9f81 	.word	0x165e9f81

08005708 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e034      	b.n	8005788 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7fb fb30 	bl	8000d98 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3308      	adds	r3, #8
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f000 fca6 	bl	8006094 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	461a      	mov	r2, r3
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	f000 fcf0 	bl	8006138 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6858      	ldr	r0, [r3, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	f000 fd25 	bl	80061b4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	6892      	ldr	r2, [r2, #8]
 8005772:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	6892      	ldr	r2, [r2, #8]
 800577e:	f041 0101 	orr.w	r1, r1, #1
 8005782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e041      	b.n	8005826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fd f8a0 	bl	80028fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f000 fa96 	bl	8005d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d001      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e04e      	b.n	80058e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a23      	ldr	r2, [pc, #140]	@ (80058f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d022      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005872:	d01d      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1f      	ldr	r2, [pc, #124]	@ (80058f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d018      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1e      	ldr	r2, [pc, #120]	@ (80058fc <HAL_TIM_Base_Start_IT+0xcc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d013      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1c      	ldr	r2, [pc, #112]	@ (8005900 <HAL_TIM_Base_Start_IT+0xd0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00e      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1b      	ldr	r2, [pc, #108]	@ (8005904 <HAL_TIM_Base_Start_IT+0xd4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d009      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a19      	ldr	r2, [pc, #100]	@ (8005908 <HAL_TIM_Base_Start_IT+0xd8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d004      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a18      	ldr	r2, [pc, #96]	@ (800590c <HAL_TIM_Base_Start_IT+0xdc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d111      	bne.n	80058d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b06      	cmp	r3, #6
 80058c0:	d010      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0201 	orr.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d2:	e007      	b.n	80058e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40000400 	.word	0x40000400
 80058fc:	40000800 	.word	0x40000800
 8005900:	40000c00 	.word	0x40000c00
 8005904:	40010400 	.word	0x40010400
 8005908:	40014000 	.word	0x40014000
 800590c:	40001800 	.word	0x40001800

08005910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b02      	cmp	r3, #2
 8005924:	d122      	bne.n	800596c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b02      	cmp	r3, #2
 8005932:	d11b      	bne.n	800596c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0202 	mvn.w	r2, #2
 800593c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f9b5 	bl	8005cc2 <HAL_TIM_IC_CaptureCallback>
 8005958:	e005      	b.n	8005966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f9a7 	bl	8005cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f9b8 	bl	8005cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b04      	cmp	r3, #4
 8005978:	d122      	bne.n	80059c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b04      	cmp	r3, #4
 8005986:	d11b      	bne.n	80059c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0204 	mvn.w	r2, #4
 8005990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f98b 	bl	8005cc2 <HAL_TIM_IC_CaptureCallback>
 80059ac:	e005      	b.n	80059ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f97d 	bl	8005cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f98e 	bl	8005cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d122      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d11b      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0208 	mvn.w	r2, #8
 80059e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2204      	movs	r2, #4
 80059ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f961 	bl	8005cc2 <HAL_TIM_IC_CaptureCallback>
 8005a00:	e005      	b.n	8005a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f953 	bl	8005cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f964 	bl	8005cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d122      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d11b      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0210 	mvn.w	r2, #16
 8005a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f937 	bl	8005cc2 <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f929 	bl	8005cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f93a 	bl	8005cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d10e      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d107      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0201 	mvn.w	r2, #1
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fc fd96 	bl	80025c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a9e:	2b80      	cmp	r3, #128	@ 0x80
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aac:	2b80      	cmp	r3, #128	@ 0x80
 8005aae:	d107      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fae0 	bl	8006080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aca:	2b40      	cmp	r3, #64	@ 0x40
 8005acc:	d10e      	bne.n	8005aec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad8:	2b40      	cmp	r3, #64	@ 0x40
 8005ada:	d107      	bne.n	8005aec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8ff 	bl	8005cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d10e      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d107      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0220 	mvn.w	r2, #32
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 faaa 	bl	800606c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_TIM_ConfigClockSource+0x1c>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e0b4      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x186>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b74:	d03e      	beq.n	8005bf4 <HAL_TIM_ConfigClockSource+0xd4>
 8005b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b7a:	f200 8087 	bhi.w	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b82:	f000 8086 	beq.w	8005c92 <HAL_TIM_ConfigClockSource+0x172>
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b8a:	d87f      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005b8c:	2b70      	cmp	r3, #112	@ 0x70
 8005b8e:	d01a      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0xa6>
 8005b90:	2b70      	cmp	r3, #112	@ 0x70
 8005b92:	d87b      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005b94:	2b60      	cmp	r3, #96	@ 0x60
 8005b96:	d050      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x11a>
 8005b98:	2b60      	cmp	r3, #96	@ 0x60
 8005b9a:	d877      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005b9c:	2b50      	cmp	r3, #80	@ 0x50
 8005b9e:	d03c      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0xfa>
 8005ba0:	2b50      	cmp	r3, #80	@ 0x50
 8005ba2:	d873      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005ba4:	2b40      	cmp	r3, #64	@ 0x40
 8005ba6:	d058      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x13a>
 8005ba8:	2b40      	cmp	r3, #64	@ 0x40
 8005baa:	d86f      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005bac:	2b30      	cmp	r3, #48	@ 0x30
 8005bae:	d064      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x15a>
 8005bb0:	2b30      	cmp	r3, #48	@ 0x30
 8005bb2:	d86b      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d060      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x15a>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d867      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d05c      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x15a>
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d05a      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x15a>
 8005bc4:	e062      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6899      	ldr	r1, [r3, #8]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f000 f9ad 	bl	8005f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005be8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	609a      	str	r2, [r3, #8]
      break;
 8005bf2:	e04f      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6899      	ldr	r1, [r3, #8]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f000 f996 	bl	8005f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c16:	609a      	str	r2, [r3, #8]
      break;
 8005c18:	e03c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6859      	ldr	r1, [r3, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f000 f90a 	bl	8005e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2150      	movs	r1, #80	@ 0x50
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f963 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005c38:	e02c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f000 f929 	bl	8005e9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2160      	movs	r1, #96	@ 0x60
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f953 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005c58:	e01c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f000 f8ea 	bl	8005e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2140      	movs	r1, #64	@ 0x40
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f943 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005c78:	e00c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4619      	mov	r1, r3
 8005c84:	4610      	mov	r0, r2
 8005c86:	f000 f93a 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005c8a:	e003      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c90:	e000      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a40      	ldr	r2, [pc, #256]	@ (8005e14 <TIM_Base_SetConfig+0x114>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d013      	beq.n	8005d40 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1e:	d00f      	beq.n	8005d40 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a3d      	ldr	r2, [pc, #244]	@ (8005e18 <TIM_Base_SetConfig+0x118>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00b      	beq.n	8005d40 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a3c      	ldr	r2, [pc, #240]	@ (8005e1c <TIM_Base_SetConfig+0x11c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d007      	beq.n	8005d40 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3b      	ldr	r2, [pc, #236]	@ (8005e20 <TIM_Base_SetConfig+0x120>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8005e24 <TIM_Base_SetConfig+0x124>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d108      	bne.n	8005d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2f      	ldr	r2, [pc, #188]	@ (8005e14 <TIM_Base_SetConfig+0x114>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d02b      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d60:	d027      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2c      	ldr	r2, [pc, #176]	@ (8005e18 <TIM_Base_SetConfig+0x118>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d023      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e1c <TIM_Base_SetConfig+0x11c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01f      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2a      	ldr	r2, [pc, #168]	@ (8005e20 <TIM_Base_SetConfig+0x120>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01b      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a29      	ldr	r2, [pc, #164]	@ (8005e24 <TIM_Base_SetConfig+0x124>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d017      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a28      	ldr	r2, [pc, #160]	@ (8005e28 <TIM_Base_SetConfig+0x128>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a27      	ldr	r2, [pc, #156]	@ (8005e2c <TIM_Base_SetConfig+0x12c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00f      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a26      	ldr	r2, [pc, #152]	@ (8005e30 <TIM_Base_SetConfig+0x130>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00b      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a25      	ldr	r2, [pc, #148]	@ (8005e34 <TIM_Base_SetConfig+0x134>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d007      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a24      	ldr	r2, [pc, #144]	@ (8005e38 <TIM_Base_SetConfig+0x138>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a23      	ldr	r2, [pc, #140]	@ (8005e3c <TIM_Base_SetConfig+0x13c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d108      	bne.n	8005dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a0a      	ldr	r2, [pc, #40]	@ (8005e14 <TIM_Base_SetConfig+0x114>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_Base_SetConfig+0xf8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e24 <TIM_Base_SetConfig+0x124>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d103      	bne.n	8005e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	615a      	str	r2, [r3, #20]
}
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	40010000 	.word	0x40010000
 8005e18:	40000400 	.word	0x40000400
 8005e1c:	40000800 	.word	0x40000800
 8005e20:	40000c00 	.word	0x40000c00
 8005e24:	40010400 	.word	0x40010400
 8005e28:	40014000 	.word	0x40014000
 8005e2c:	40014400 	.word	0x40014400
 8005e30:	40014800 	.word	0x40014800
 8005e34:	40001800 	.word	0x40001800
 8005e38:	40001c00 	.word	0x40001c00
 8005e3c:	40002000 	.word	0x40002000

08005e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f023 0201 	bic.w	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 030a 	bic.w	r3, r3, #10
 8005e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	621a      	str	r2, [r3, #32]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b087      	sub	sp, #28
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	f023 0210 	bic.w	r2, r3, #16
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	031b      	lsls	r3, r3, #12
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005eda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f043 0307 	orr.w	r3, r3, #7
 8005f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	609a      	str	r2, [r3, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e05a      	b.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a21      	ldr	r2, [pc, #132]	@ (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d022      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd8:	d01d      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1d      	ldr	r2, [pc, #116]	@ (8006054 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d018      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800605c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a17      	ldr	r2, [pc, #92]	@ (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a15      	ldr	r2, [pc, #84]	@ (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d10c      	bne.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800601c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	4313      	orrs	r3, r2
 8006026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40010000 	.word	0x40010000
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00
 8006060:	40010400 	.word	0x40010400
 8006064:	40014000 	.word	0x40014000
 8006068:	40001800 	.word	0x40001800

0800606c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4b20      	ldr	r3, [pc, #128]	@ (8006134 <FSMC_NORSRAM_Init+0xa0>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80060be:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80060c4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80060ca:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80060d0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80060d6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80060dc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80060e2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 80060e8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80060ee:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 80060f4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 80060fa:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8006100:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d103      	bne.n	8006118 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006116:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	fff00080 	.word	0xfff00080

08006138 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006152:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800615a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006166:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800616e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006176:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	3b01      	subs	r3, #1
 800617e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006180:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	3b02      	subs	r3, #2
 8006188:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800618a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006190:	4313      	orrs	r3, r2
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6979      	ldr	r1, [r7, #20]
 80061a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061cc:	d122      	bne.n	8006214 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80061dc:	4013      	ands	r3, r2
 80061de:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80061ea:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80061f2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80061fa:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006200:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6979      	ldr	r1, [r7, #20]
 800620e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006212:	e005      	b.n	8006220 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800621c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	cff00000 	.word	0xcff00000

08006234 <memset>:
 8006234:	4402      	add	r2, r0
 8006236:	4603      	mov	r3, r0
 8006238:	4293      	cmp	r3, r2
 800623a:	d100      	bne.n	800623e <memset+0xa>
 800623c:	4770      	bx	lr
 800623e:	f803 1b01 	strb.w	r1, [r3], #1
 8006242:	e7f9      	b.n	8006238 <memset+0x4>

08006244 <strcat>:
 8006244:	b510      	push	{r4, lr}
 8006246:	4602      	mov	r2, r0
 8006248:	7814      	ldrb	r4, [r2, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	3201      	adds	r2, #1
 800624e:	2c00      	cmp	r4, #0
 8006250:	d1fa      	bne.n	8006248 <strcat+0x4>
 8006252:	3b01      	subs	r3, #1
 8006254:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006258:	f803 2f01 	strb.w	r2, [r3, #1]!
 800625c:	2a00      	cmp	r2, #0
 800625e:	d1f9      	bne.n	8006254 <strcat+0x10>
 8006260:	bd10      	pop	{r4, pc}
	...

08006264 <__libc_init_array>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	4d0d      	ldr	r5, [pc, #52]	@ (800629c <__libc_init_array+0x38>)
 8006268:	4c0d      	ldr	r4, [pc, #52]	@ (80062a0 <__libc_init_array+0x3c>)
 800626a:	1b64      	subs	r4, r4, r5
 800626c:	10a4      	asrs	r4, r4, #2
 800626e:	2600      	movs	r6, #0
 8006270:	42a6      	cmp	r6, r4
 8006272:	d109      	bne.n	8006288 <__libc_init_array+0x24>
 8006274:	4d0b      	ldr	r5, [pc, #44]	@ (80062a4 <__libc_init_array+0x40>)
 8006276:	4c0c      	ldr	r4, [pc, #48]	@ (80062a8 <__libc_init_array+0x44>)
 8006278:	f000 f818 	bl	80062ac <_init>
 800627c:	1b64      	subs	r4, r4, r5
 800627e:	10a4      	asrs	r4, r4, #2
 8006280:	2600      	movs	r6, #0
 8006282:	42a6      	cmp	r6, r4
 8006284:	d105      	bne.n	8006292 <__libc_init_array+0x2e>
 8006286:	bd70      	pop	{r4, r5, r6, pc}
 8006288:	f855 3b04 	ldr.w	r3, [r5], #4
 800628c:	4798      	blx	r3
 800628e:	3601      	adds	r6, #1
 8006290:	e7ee      	b.n	8006270 <__libc_init_array+0xc>
 8006292:	f855 3b04 	ldr.w	r3, [r5], #4
 8006296:	4798      	blx	r3
 8006298:	3601      	adds	r6, #1
 800629a:	e7f2      	b.n	8006282 <__libc_init_array+0x1e>
 800629c:	080092c0 	.word	0x080092c0
 80062a0:	080092c0 	.word	0x080092c0
 80062a4:	080092c0 	.word	0x080092c0
 80062a8:	080092c4 	.word	0x080092c4

080062ac <_init>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	bf00      	nop
 80062b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b2:	bc08      	pop	{r3}
 80062b4:	469e      	mov	lr, r3
 80062b6:	4770      	bx	lr

080062b8 <_fini>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	bf00      	nop
 80062bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062be:	bc08      	pop	{r3}
 80062c0:	469e      	mov	lr, r3
 80062c2:	4770      	bx	lr
